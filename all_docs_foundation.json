[
    {
        "chapterName": "Media Library",
        "lessonTitle": "doc_Media Library_doc_Media Library_Media Library video flow",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Media Library video script & flow\n\n\nScript:\n\nHello and welcome to this eLearning video. In this session I will guide you through the Media Library, where you will learn about the processes of uploading, organizing, importing, exporting, and deleting media files.\n \nThe Media Library acts as a storage hub for various file types, such as: images, videos, scripts, and more. Its main purpose is to store the files and have them ready to use at every stage of the development process.\n \nWith that being said, let’s jump into the cockpit and open the Media Library. \n \nThe Root folder is on the left panel, and will contain all the folders and subfolders that will be created. \nFolder actions are located at the top, such as: delete, edit, create, collapse and expand. \n \nMoving on to the centre panel, where the files from the folders will be displayed and you can also interact with them.\nOn the top of the centre panel you can filter, search and update the files, as well as having the option to exclude the subfolders from search. \n \nAt the top-right of the screen you can import files or zip files, and you can export the files from the Media Library. \n \nNow, let’s select the root folder, and add a new folder. Give it a name and save. \n \nWithin this folder, you can import one file at a time, or you can import multiple files in one go. \n \nClicking on the image, will open the file in a new tab, and the link button will copy the link of the file in the clipboard. So if I paste it in a new tab the file will be displayed. \n \nTo delete files, click on the x button at the end of each row. \n \nYou can import zip files in one go, as well as export the folder with all the media files as a zip. \n \nThe edit button allows you to change the name of the folder, and to assign the folder to a development package. \n \nSelect the folder and click add, to create a subfolder. \n \nYou can browse through the media files using the search bar, having the option to exclude the subfolders from the search.\n \nAnd finally, to delete a folder, you need to select it and press the delete button. \n \nWell done! Now you know how to use the Media Library! \n \nSee you in the next lesson! Goodbye!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlow:\n\n\nIntroduction to the Tool - what is it and its use and where to find it. \nFolder&Sub-folder creation/edit and mention assignment to development package.\nImporting files.\nExport/Import to zip.\n\nMoving to the pre-build app: \n\nAssign images from Media Library to the image components:\n\n\n\nNext page - bind the images from the list, since the API Designer topic will be covered. (Image source from the table are coming from Media Library):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMoving on to the Launchpad - add a background image to the Launchpad. \n\n\n\n\n\nAdd images to the Tiles.\n\n\n\n\n"
    },
    {
        "chapterName": "Script Editor",
        "lessonTitle": "Understanding the 'result' variable",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "You can understand the 'result' vairable by reading the code snippet. You can observe other properties you can set as part of the result.\n \nresult.data = \"Server script response data\"; This line assigns a string (\"Server script response data\") to the data property of the result object. The data property is intended to hold the actual content or data you want to return to the client. In a real scenario, this might be a JSON object, HTML content, or any other data format depending on the application's requirements.\n\nThe snippet comments shows that you can also set additional properties on the result object to further customize the response. These are not explicitly set in the provided code but are mentioned as possibilities:\nstatusCode is typically used to set the HTTP status code of the response. Common status codes include 200 for a successful request, 404 for not found, 500 for a server error, etc.\ncontentType specifies the MIME type of the response data, indicating to the client how the data should be interpreted or processed. Common content types include application/json for JSON data, text/html for HTML content, etc.\nfilename might be used when the response is intended to prompt the client to download a file, specifying the name of the file for download.\nheaders would allow you to set any additional HTTP headers needed for the response, such as caching controls, content encoding, etc.\n\n\nNote - \nresult.data = XYZ; modifies or adds the data property on the existing result object without affecting its other properties.\nresult = { data: XYZ }; creates a new object with only the data property and assigns it to result, replacing any existing object and its properties.\nSo, the first method is used to update or add to an existing object, while the second method resets the object to only contain the data property.\n"
    },
    {
        "chapterName": "Launchpad, Tile and Tile Group Basics",
        "lessonTitle": "Launchpad Update Cycle",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "The Launchpad is an Application that is created by Neptune, downloaded from the Marketplace and is regularly updated with new functionalities and bug fixes.\n \nThe Launchpad application name is 'planet9_launchpad_standard'.\nWhen you configure a Launchpad within the developer cockpit, this is the application you choose within this ‘Launchpad Application’ field:\n\n \nIt is always recommended to be running the latest version of the Launchpad. You can check at any time, the Marketplace product, to view the version running within your instance, compared to the version available to download.\nEG: When running the latest version, you will see this message:\n\nWhen you are running a different version, you will see this message:\n \nIt is possible to make adjustments to the Launchpad application itself, like any other, but this is not recommended. For this purpose, there are 'Launchpad Enhancements' that cover this which will be explained in the expert level of this course.\nIf you attempt to use a different Launchpad application – you will see this warning:\n"
    },
    {
        "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
        "lessonTitle": "Downloading products from the Marketpalce & inspecting the packages",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "\nThe Marketplace hosts a range of products, most of which you can install directly into your system.\nHere is an example of a product you can install:\n\n\n   There is a connection between Development Packages and Marketplace items you install.\n  When you install a product, you are installing a package, which can contain one or more artifacts. Within the Marketplace, after installing, you can click \"Open Package\" to open the Development Package tool straight into the installed package\nHere you can view the artifacts and utilise the shortcut to open them directly within their respective tools.\n\n \n Press “Open” within the product to view the Neptune hosted repository, which integrates with the package via the CI/CD configuration.\nFor the example above: \nhttps://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-uploadtomedialibrary\nNote, Neptune published items will be contained within this GitHub organisation.\n\nIf a product is installed, a re-install button will be visible:\n\n\nIt is important to re-install carefully when updates are available. Here you can see an example of the messaging available when your currently installed version doesn’t match the latest version linked to the Marketplace product:\n\n\nThe best practice is to copy / export the development item(s) included in the package you wish to re-install, so if there are critical issues, you can restore the original copy.\n"
    },
    {
        "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
        "lessonTitle": "First look - How to navigate the Developer Cockpit",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "There is a search bar at the top of the cockpit - This searches for tools and artifacts by default, so anything that has been created within the system. You can click into the search bar and search for any tool or artifact.\n \n\nHere ”Tool\" is being searched for:\n\n\nNote only the following categories are searched through:\n\nThere is a switch to change to search the Documentation website instead.\nHere you can see the results when the Document Search is enabled:\n\nTiles can be marked with a star to be saved into the 'Favourites' group in the cockpit (they also appear in the drop down of the search results!):\n\nOpen apps appear on the left bar, the menu can be expanded and collapsed to view the names of the tools:\n \n\n\n \nRecommendations will be presented in the bottom left of the cockpit when similar tools might be useful to complete your current development process:\n \nIt is possible to change your user settings in the top right - to adjust the position of the action buttons for example, from defaulting to the right had side of the screen, to the left instead! Useful when working on a larger screen. You can also swap between Light and Dark mode:\n\nEnhancement: There is now an option in the user settings menu to change how editors are opened, i.e. tab or window.\nThis effects the behaviour of the App Designer, Adaptive Designer, Script Editor (and others), which open in their own browser instance.\n"
    },
    {
        "chapterName": "Other Cockpit features",
        "lessonTitle": "Monitoring,  Logging and more",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Monitoring Tools in Neptune DXP\n\nIn this lesson, we will explore the various monitoring tools available in Neptune DXP Open Edition and how they can help you in application development and management.\nTrace/Monitor/Audit Log: The Trace/Monitor/Audit Log tools in Neptune DXP Open Edition provide valuable insights into the changes made to tables, activities in the Cockpit, and application operations. These tools enhance transparency, accountability, and troubleshooting capabilities. Let's take a closer look at each of these tools:\nTable Audit: The Table Audit tool allows you to track changes made to tables in your application. It records information such as the user who made the change, the timestamp, and the old and new values. This tool is useful for auditing purposes and tracking data modifications.\n\nThis setting is enabled for individual tables in the Table Definition tool:\n\n\nAudit Log: The Audit Log tool captures activities performed in the Cockpit, such as user logins, application deployments, and configuration changes. It helps you keep track of who did what and when, ensuring accountability and facilitating troubleshooting.\n\n\nApplication Log: The Application Log tool allows you to trace application operations and track important events. It records information such as error messages, warnings, and user actions. This tool is invaluable for troubleshooting and identifying issues in your application.\n\n\nJob Log: The Job Log tool in Neptune DXP Open Edition helps you monitor and track the execution of background jobs. It provides valuable insights into job performance, execution times, and any errors or warnings encountered during the process. \n\nSystem Logs: The System Logs tool in Neptune DXP Open Edition allows you to track system errors, warnings, process messages, and user locks. It provides different log levels for different types of log entries, allowing you to filter and analyse the logs based on your requirements. This tool helps you identify and resolve issues in your application effectively.\n\nSystem logs can be exported!\n\nNeptune DXP Open Edition Monitoring Documentation: Link"
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "What are APIs and what are RESTAPIs",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Before you start this module, it's important that you have a basic understanding of APIs, with a particular focus on REST APIs.\n\nWhat are APIs?\n\nAn API (Application Programming Interface) is a set of rules that allows different software applications to communicate with each other. It acts like a bridge between a website or app and a user, enabling them to send and receive information. For example, when you search for a TV on a web shop, you're using an API to tell the server what you're looking for. The server then uses the API to understand your request, find the information about TVs that match your search, and send this information back to you.\n\n\n\n\nWhen you browse through a web shop and search for a specific product, such as a TV, you are essentially requesting from the server. The server processes your request and returns a response based on the parameters of your request, which could include TVs made from brands A and B, with a size of 32 inches, and so on. You can also make requests without parameters, to get all the TV’s for example!\n\nAPIs: Not the Server or Database\n\nIt's important to remember that an API is not the database that stores the information, nor is it the server that houses the database. Instead, think of an API as a messenger that takes your request, tells the server, waits for the server's response, and then brings that response back to you.\n\nIntroduction to REST APIs\n\nAmong the various types of APIs, such as SOAP, GraphQL, and WebSocket, REST APIs are the most common. They work over the internet using HTTP requests to perform operations on data. These operations include creating, reading, updating, and deleting records—a set often referred to as CRUD. \n\nREST APIs use specific HTTP methods to handle these operations (more are available, ):\n\n    GET: Retrieves data from the server. Like when you read information about a product on a website.\n    POST: Sends data to the server to create a new item. Like when you sign up on a website, creating a new user profile.\n    PUT: Updates existing data on the server. It's like editing your profile information.\n    DELETE: Removes data from the server. Like deleting a post or a comment.\n\nWhy REST APIs Are Special: Stateless Communication\n\nOne key principle of REST APIs is statelessness. This means that every request from your application to the server must include all the information the server needs to understand and fulfill the request. The server doesn't remember anything from previous requests. This makes the system more reliable and scalable because the server doesn't need to keep track of any state or session information.\n\nIn Summary\n\nUnderstanding APIs, especially REST APIs, is crucial for developing applications that interact with the web. APIs are the communication layer that enables you to perform actions on the web, like searching for products, signing up for services, or posting messages. By mastering APIs, you open a world of possibilities for what your applications can do."
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "TablevsExternalAPIs",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Table Definition and External APIs\nTable Definition and External APIs serve similar purposes, both operating under REST API principles. However, Table Definition APIs enable you to create, update, list, and delete your internal data (tables generated from the Table Definition tool). On the other hand, external APIs facilitate connections to external resources such as weather APIs, stock market APIs, and others.\n\n\nIt's important to note that you can develop an external API to interact with your internal tables. However, this process requires specifying endpoints, parameters, definitions, and more. This is precisely why the Table Definition API tool generates these elements for you when selected.\nHere we can see how the endpoint for a Table API is configured automatically, running against the domain of the environment, with the endpoints using the table name. Compared to an external API, which is configured manually:\n\n\n"
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "POSTvsPUT",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Crucial note\n\nIt is important to note that the POST and PUT operations are swapped in Neptune DXP - Open Edition. In this context, the PUT operation functions as a POST operation, and the POST operation functions as a PUT operation. \n\nFor example, in a Neptune application:\nIf you want to update data, you will use a POST operation, \nIf you want to submit new data, you will use a PUT operation.\n\n\n\nThis may be confusing at first, that is because the functions of Creating and Updating are inherently similar.\n\nIn the context of Neptune, \nBoth PUT and POST will create a record if you send data via these methods.\nOnly POST will be able to update existing records. \nNote – You need to include a ‘where = value’ clause to find the record to update\nIf you attempt to update a record via PUT, it will create a new one.\n\n"
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "APIDocFindings",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Below you will find a list of findings for the API Designer. \n\nPaths for models (Multimodels, etc)\nWhen adding a response for an operation, you can add a path that will specify the start of model (such as ‘modelList.setData(model.path.path)’). For example, if the if the response has the following form:\t\n{\n  \"status\": \"success\",\n  \"message\": \"Data retrieved successfully\",\n  \"data\": {\n    \"user\": {\n      \"id\": 123456,\n      \"username\": \"example_user\",\n      \"email\": \"user@example.com\",\n      \"profile\": {\n        \"full_name\": \"John Doe\",\n        \"age\": 30,\n        \"location\": \"New York\",\n        \"interests\": [\"coding\", \"reading\", \"traveling\"]\n      },\n      \"posts\": [\n        {\n          \"id\": 1,\n          \"title\": \"First Post\",\n          \"content\": \"This is the content of the first post.\"\n        },\n        {\n          \"id\": 2,\n          \"title\": \"Second Post\",\n          \"content\": \"This is the content of the second post.\"\n        }\n      ]\n    }\n  }\n}\n\nThen if you provide in the path the following: data/user then, the model will have the following structure: \n{\n      \"id\": 123456,\n      \"username\": \"example_user\",\n      \"email\": \"user@example.com\",\n      \"profile\": {\n        \"full_name\": \"John Doe\",\n        \"age\": 30,\n        \"location\": \"New York\",\n        \"interests\": [\"coding\", \"reading\", \"traveling\"]\n      }\n\nThis feature is available for Swagger 2.0 APIs.\n\n Endpoint precedence\nWhen creating an API with multiple operations, you must consider the following hierarchy when setting different endpoints depending on system role:\nGeneral endpoint < Tab endpoint < Operation endpoint\nMain endpoint:\n\n\nTab endpoint:\nEndpoint in an operation:\n\n\nEndpoint Override \nIn external scripts, you can override the main endpoint if specified in the general tab of the operation. For example, if the main endpoint is ‘www.qa-neptune-software.com’ and the ‘Endpoint Override’ value is set to ‘www.prod-neptune-software.com’, then the operation will use the last endpoint instead of the main one. Note that this will work if the operation is triggered within a script or an application.\n\n\n\n\n\nAPI Sync (API Discovery Service)\n\nYou can import and update your entire API using the API Sync (API Discovery Service) with a Swagger JSON file. This allows you to define the structure, endpoints, parameters, and other details of the API. For a clearer understanding, you can check out https://petstore.swagger.io/v2/swagger.json.\n\n\n\n"
    },
    {
        "chapterName": "Data Management Fundamentals Tables",
        "lessonTitle": "Understanding data types",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Let’s now look at the properties you can select for your definition:\n\n\nIn the context of SQL (Structured Query Language), which is used for managing and manipulating relational databases, these data types represent the kind of data that can be stored in a column of a database table:\nText: A data type for storing long-form text strings. It can hold a string with a maximum length that is dependent on the database system (often very large, up to GBs of text).\nUUID (Universally Unique Identifier): Used to store unique identifiers across a database. UUIDs are 128-bit values that are globally unique. They are used in various software applications to ensure a higher level of uniqueness than traditional incrementing IDs.\nDecimal: A fixed-point number where the number of digits before and after the decimal point is fixed, based on the specified precision and scale. It's used to store exact numeric data values, often for financial calculations where rounding errors of floating-point numbers are unacceptable.\nBoolean: A simple binary data type that can store true or false values. It is used to store truth values, often in flags that indicate a condition, such as is_active or has_logged_in.\nSmallint: A small-range integer data type that is used to store a numeric value without a decimal. It generally has a smaller range and storage size than a standard integer, often from -32768 to 32767.\nInteger: The standard data type for numerical values that don't require a fraction. It's used to store whole numbers, typically with a range from -2,147,483,648 to 2,147,483,647.\nBigint: An extended-size integer data type that can store very large numbers, usually with a range from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807. It's used when the range of integers is insufficient.\nSmalltext: This isn't a standard SQL data type, but based on its naming, it's likely a text string with a smaller limit on its size than a full 'Text' data type. Specific details would depend on the SQL database system in use.\nMediumtext: Similar to the 'Text' data type, but usually with a smaller maximum size. The exact limit can vary by the database system.\nTimestamp With Time Zone: Stores a date and time with an associated time zone offset from UTC. It is used when you need to record the exact time an event occurs and maintain the correct time relative to the time zone.\nTimestamp Without Time Zone: Similar to the above but does not store any time zone data. It represents a specific point in time and is usually considered as being in the local time zone of the database server.\nJSON (JavaScript Object Notation): A data type for storing JSON documents. It allows the storage of structured data in a text format that can be easily parsed and generated by many programming languages.\n\nNOTE:\nSelecting Boolean or Decimal changes the input for that row:\n\nBoolean – Adds a Segmented Button to the Default value:\n(null, false, true)\n\nDecimal – Adds Precision and Scale inputs under Options:\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-DatePickers, ComboBoxes, SegmentedButtons, and RadioButtons",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Date pickers, Combo Boxes, Segmented buttons, and Radio Buttons\n\n\n\nThis document describes the date pickers, combo boxes, segmented buttons, and radio buttons, their purpose, and how to use them. \n\nTo showcase the capabilities of these components, the following applications from UI5 Application Samples package have been used:\n\n\n\nDownload the UI5 Application Samples from the Marketplace and open the applications in the App Designer, in different tabs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDatePickers\nhttps://experience.sap.com/fiori-design-web/date-picker/ \nThe sap.m.DatePicker component is used to enable users to select a date from a calendar. It provides a convenient interface for users to choose dates easily and accurately.\n\n\nSAMPLE_DATEPICKER application\n\n\nDatePicker Properties\n\nSome of the most commonly used properties of the sap.m.DatePicker are: \n\nvalue: The date value displayed in the input field.\nplaceholder: Placeholder text displayed when the field is empty.\nvalueState: Indicates the validation state of the input (e.g., Error, Warning).\nvalueStateText: Text that describes the validation state.\ndisplayFormat: Indicates he format in which the date is displayed.\nminDate: Sets the minimum selectable date.\nmaxDate: Sets the maximum selectable date.\n\n\n\nDatePicker Events\n\nThe sap.m.DatePicker events are used to customize or perform actions based on user interactions. The following events are available to use with a DatePicker component:\n\nafterValueHelpClose: Fired after the value help dialog of the DatePicker closes.\nafterValueHelpOpen: Fired after the value help dialog of the DatePicker opens.\nchange: Fired when the date is changed by the user and the input field loses focus.\nliveChange: Fired during typing, while the value of the input field is changed by the user.\nnavigate: Fired when the user navigates to another month or year in the calendar popup.\nvalidateFieldGroup: Fired to validate a specific field group.\n\nComboBox\nhttps://experience.sap.com/fiori-design-web/combo-box/ \nThe sap.m.ComboBox is used to create a dropdown list with a searchable input field. It allows users to select one option from a predefined list of items or enter custom values.\n\n\nSAMPLE_COMBOBOX application\n\n\n\n\n\n\n\nComboBox Properties\n\nSome of the most commonly used properties of the sap.m.ComboBox are: \n\nselectedKey: Specifies the key of the selected item.\nselectedItem: Specifies the selected item.\nvalue: Specifies the value of the input field.\nplaceholder: Defines the placeholder text when no value is selected.\nvalueState: Indicates the validation state of the input value.\n\nComboBox Events\n\nThe sap.m.ComboBox events are used to customize or perform actions based on user interactions. The following events are available to use with a ComboBox component:\n\ncacheInitLoadFinished: This event is fired when the cache initialization and loading of initial items is completed.\nchange: The change event is triggered when the selection is changed by the user.\n\n\nloadItems: Fired when the items of the ComboBox are being loaded.\nselectionChange: This event is triggered when the selected item in the ComboBox changes.\nvalidateFieldGroup: Fired to validate a specific field group.\n\n\n\n\nSegmented Buttons\nhttps://experience.sap.com/fiori-design-web/segmented-button-web-component/ \nThe sap.m.SegmentedButton component is typically used when you want to offer users a choice among several options, but only one option should be active or selected. The SegmentedButton visually presents these options as a group of buttons, and the user can toggle between them by clicking.\n\n\nSAMPLE_SEGMENTEDBUTTON application\n\n\nSegmentedButton Properties\n\nSome of the most commonly used properties of the sap.m.SegmentedButton are: \n\nwidth: Allows you to set the width of the SegmentedButton.\nvisible: Controls the visibility of the SegmentedButton.\nselectedKey: Specifies the key of the currently selected button.\n\nSegmentedButton Events\n\nThe sap.m.SegmentedButton events are used to customize or perform actions based on user interactions. The following events are available for the sap.m.SegmentedButton:\nFor SegmentedButton:\nselect: Triggered when a button in the SegmentedButton is pressed or selected.\n\n\nselectionChange: Fired when the selected button within the SegmentedButton changes.\n\nvalidateFieldGroup: Fired to validate a specific field group.\n\nFor SegmentedButtonItems (individual items within SegmentedButton):\npress: This event is available on each SegmentedButtonItem and is triggered when the button is pressed or selected.\n\n\n\n\nThese events allow you to add custom logic or functionality when users interact with the SegmentedButton or its items.\n\n\n\n\n\nRadio Button\nhttps://experience.sap.com/fiori-design-web/radio-button/ \nThe sap.m.RadioButton component is used to represent a single choice among a set of options. It allows users to select one option from a group of related options.This behavior makes radio buttons ideal for situations where users need to make a single selection from a list of options.\n\n\nSAMPLE_RADIOBUTTON  application\n\n\nRadio Button Properties\n\nSome of the most commonly used properties of the sap.m.RadioButton are: \ntext: The text displayed next to the radio button.\ngroupName: The name of the group to which the radio button belongs. Radio buttons within the same group allow only one selection.\nselected: Indicates whether the radio button is selected or not.\ntooltip: The tooltip text displayed when hovering over the radio button.\nvalueState: Indicates the validation state of the radio button.\n\n\n\n\n\n\n\nRadio Button Events\n\nThe sap.m.RadioButton has two events: \n\nselect: Triggered when a button in the Radio Button is selected.\n\n\n\n\nvalidateFieldGroup: Fired to validate a specific field group.\n\n\n\nConclusion\n\nDatePickers, ComboBoxes, SegmentedButtons, and RadioButtons are essential components in UI development, offering a range of options for user input and selection.By understanding their properties, events, and customization options, you can design applications that meet specific user needs while maintaining a consistent and user-friendly experience.\n\nThe best way to understand their capabilities is to experiment with them. Therefore, feel free to explore them within the sample application! \n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-SimpleForm",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Simple Form\n\n\n\nThis document describes the simpleForm component, its purpose, and how to use it. The simpleForm simplifies the creation and maintenance of forms in applications. \n\nSap.ui.layout.form.SimpleForm\nhttps://experience.sap.com/fiori-design-web/form/ \n\n\nNOTE: There is another component:\nsap.ui.layout.form.Form\n\nHowever this course and tutorial, will focus on the first component – the SimpleForm.\n\nThe SimpleForm automatically arranges form elements in a compact layout that adjusts to different screen sizes. It offers various properties and aggregations to define the layout and structure of the form elements, making it easy to create forms with labels and input fields, labels and checkboxes, or any other combination of components used in creating a form.\n\nTo showcase the capabilities of this component, the SAMPLE_SIMPLEFORMS application from the UI5 Application Samples package has been used. \n\nDownload the UI5 Application Samples from the Marketplace and open the SAMPLE_SIMPLEFORMS application in the App Designer. \n\n\n\nThis sample application contains 4 example SimpleForms\n\nsimpleForm Layouts \n\nThe SAMPLE_SIMPLEFORMS application showcases four examples of simpleForms. These examples highlight various layouts and the editable property.\n\nThe layouts available to use on a simpleForm are: \n\nGrid Layout:\n\n\n\nResponsive Grid Layout \n\n\n\nResponsive Layout\n\n\n\nNo Layout (the propery has no value assigned)\n\n\nNOTE: Each of these forms behaves differently when it comes to responsive design.\n\n\n\n\n\n\nsimpleForm Editable property\n\nThe ‘editable’ property of the simpleForm aids with the label alignment to the form rows if the form has editable content. \n\nFor example, the first three forms within the example have the editable property set to true, whereas the fourth has the editable property set to false. Therefore within the first three forms the labels are aligned with the form rows, and within the fourth form, the labels are not aligned with the form rows. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponsivensess\n\nOne of the main advatages of the simpleForm is represented by its responsivness by default. This component automatically adjusts its layout to the screen size of the device being used, whether it's a desktop, tablet, or mobile device.\n\n\n\n\n\n\n\nConclusion\n\nThe simpleForm supports a variety of components, including checkboxes, various types of input fields, buttons, and other elements commonly used in form design. To fully understand its capabilities, the best approach is to experiment with it. Feel free to explore and experiment within the sample application to discover how the simpleForm can be used in different scenarios."
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Pt.2 - Definitions integration with the App Designer",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Understanding the importance of definitions within the App Designer context.\n \nThis diagram higlights the Defintion Properties within an API, in the API Designer. It links to the right, where within the App Designer, the Wizard generation tool (within the right-click context menu) is used.\nThe Tables configured ‘Model Source’ or ‘Model Path’, can choose any operations of any APIs configured within the application\nEG:\n\nThis then enables the wizard to access the properties associated with that operation, so it can then generate the required components and bindings automatically.\n\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-Panels, Popovers, and GenericTiles",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Panels, Popovers and Generic Tiles\n\n\n\n\nThis document describes the panels, popovers and tiles (generic), their purpose, and how to use them. \n\nTo showcase the capabilities of these components, the following applications from UI5 Application Samples package have been used:\n\n\n\nDownload the UI5 Application Samples from the Marketplace and open the applications in the App Designer, in different tabs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPanel\nhttps://experience.sap.com/fiori-design-web/panel-web-component/ \nThe sap.m.Panel is a container used to group and organize other UI elements. It provides a simple container with a header and content area, allowing you to structure the application related content together.\n\n\nSAMPLE_PANEL application\n\n\n\nPanel Properties \n\nSome of the most commonly used properties of the sap.m.Panel component are: \n\nheaderText: Allows you to set the text for the panel header.\nexpandable: Determines if the panel is expandable or not.\n\nexpanded: Specifies whether the panel content is expanded or collapsed.\n\nbackgroundDesign: Sets the background color scheme of the panel.\nwidth: Defines the width of the panel.\n\nPanel Events\nexpand: This event is fired when the panel is expanded or collapsed by user interaction. You can add custom logic in this event to perform actions when the panel is expanded or collapsed.\n\n\n\nvalidateFieldGroup: when used in a Panel, it would indicate that a field group validation is triggered when the panel content is being validated.\n\n\n\n\n\n\n\n\n\n\nPanel Responsiveness\nPanels are responsive by default, meaning they automatically adjust their layout based on the screen size of the device.\n\n\n\n\n\n\n\n\n\n\n\nPopovers \nhttps://experience.sap.com/fiori-design-web/popover-web-component/ \nsap.m.Popover\nThe sap.m.Popover component is used to display additional information or options related to a specific element on the screen. The popover is typically displayed as a small window that appears above or below the UI element it is related to. It can contain various types of content, such as text, buttons, tables, or other components.\n\nSAMPLE_POPOVER application\nPopover Properties\nplacement: Determines the placement of the popover relative to its associated component.\n\ntitle: Specifies the title text displayed at the top of the popover.\ncontentWidth: Defines the width of the popover's content area\ncontentHeight: Similar to contentWidth, this property sets the height of the popover's content area.\nshowHeader: Determines whether the popover should display a header bar. If set to false, the title will not be shown.\nshowArrow: Determines whether an arrow should be displayed pointing from the popover to the associated component.\n\nPopover Events \nThe sap.m.Popover events are used to customize or perform actions based on user interactions. These are the commonly used events on a Popover:\n\nafterClose: fired after the popover is closed. It can be used to trigger actions or update the UI after the popover has been closed by the user.\nafterOpen: fired after the popover is opened and displayed on the screen. Used to perform actions or updates that should occur after the popover is visible.\nbeforeClose: triggered before the popover is closed. It allows to perform tasks or checks before the popover is closed.\nbeforeOpen: fired before the popover is opened. It provides a hook to execute tasks or checks before the popover is displayed.\n\n\n\n\n\n\n\n\nMessagePopover\nThe sap.m.MessagePopover component is designed to display messages and notifications to users in a popover format. It is particularly useful for showing validation messages, error notifications, or information messages in a compact and organized way. The sap.m.MessagePopover provides a centralized location for users to view and manage messages within an application.\n\nSAMPLE_MESSAGEPOPOVER application\n\nMessagePopover Properties\nSome of the most commonly used properties of the sap.m.MessagePopover are:\ninitiallyExpanded: Specifies whether the MessagePopover should be initially expanded (open) when it is first rendered. Set to true to have it open by default.\nplacement: Determines the placement of the MessagePopover relative to its target control.\n\n\n\n\nPopover Events\nThe sap.m.MessagePopover events are used to customize or perform actions based on user interactions. These are the most commonly used events that can be used on a MessagePopover:\n\nafterClose: Fired after the MessagePopover is closed. This event can be used to trigger actions after the popover is no longer visible.\nafterOpen: Fired after the MessagePopover is opened and visible to the user.\nbeforeClose: Triggered just before the MessagePopover is closed. \nbeforeOpen: Fired just before the MessagePopover is opened.\nitemSelect: This event is fired when a message item inside the MessagePopover is selected by the user. You can use it to handle actions when an item is clicked or selected.\nlistSelect: Similar to itemSelect, this event is triggered when a list item inside the MessagePopover is selected. It provides another way to handle item selection events.\n\n\n\n\n\n\nOpen a Popover and MessagePopover \nBoth sap.m.Popover and sap.m.MessagePopover are opened using the same logic. In the case of a MessagePopover, the method openBy(this) is used, where this refers to the button that triggers the opening of the popover. The same logic applies for the Popover.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTile - Generic Tiles\nhttps://experience.sap.com/fiori-design-web/tile/ \nThe sap.m.GenericTile is used to display data or information in a tile format. It provides a versatile way to present various types of content, such as images, text, and icons, in a visually appealing manner.\n\nSAMPLE_TILES application\n\nGeneric Tiles Properties\nheader: The header text displayed at the top of the tile.\nsubheader: Additional information or subheader text displayed below the header.\nmode: The mode of the tile, which determines the layout and appearance of the tile.\nstate: The state of the tile, such as \"None\", \"Success\", \"Warning\", or \"Error\", which affects the color or visual indication of the tile.\nheaderImage: An optional image displayed in the header of the tile.\nbackgroundImage: An image displayed as the background of the tile.\nfooter: Text displayed at the bottom of the tile.\n\n\nGeneric Tile Events \nThe most commonly used event of the sap.m.GenericTile:\npress: triggered when the tile is clicked.\n\n\nConclusion\nPanels, popovers, and generic tiles are essential UI components used in applications, each serving a specific purpose in providing a structured and user-friendly interface. Panels offer a way to organize content and provide a container for grouping elements, while popovers enhance user interaction by displaying additional information or options in a context-sensitive manner. Generic tiles provide a versatile way to showcase information or actions in a visually appealing format.\nThe best way to understand their capabilities is to experiment with them. Therefore, feel free to explore the sample applications!\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Pt2. Models and Bindings",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Models are based on API definitions, utilising their definition properties to handle bindings – but can also just be “Generic” - which just lacks the binding metadata.\nA model must be configured with one of these two sources to hold data or be interacted with programmatically.\n\nYou have already been working with models! \nModels are present on most components, and there are specific model components too.\nWhen the wizard creates a List or a Table, the model is set automatically to the List or Table component. Other examples are Pages and Panels which have their own model source configuration, and so their own model, and can store data.\nThe model gives the component the ability to store data, plus the context of the properties of the dataset.\n\nFor any data stored within a component, the children components of that parent, can utilise the data with bindings.\n \nUnderstanding a MultiModel, ModelArray and ModelObject\nThese are centralised containers for data within your app, so data doesn't have to live within List or Table, or other component.\n\n\nAll three a very similar. They are called ‘neptune.mode.array’, ‘neptune.model.object’ & ‘neptune.model’, and are all underling a UI JSON component:\nhttps://openui5.hana.ondemand.com/api/sap.ui.model.json.JSONModel \nThe intended use is to store Arrays of data in the ModelArray, a single object at a time in the ModelObject and the MultiModel can handle nested data.\n\nInteracting with models – Model Data Object\n In any JavaScript editor, right-click and you will get JavaScript helpers.  \nFor Model Data objects all methods are documented as comment’s. \nYou can easily find read, update, and delete methods.\n\n\n\nGeneric Data Model bindings will be covered in more detail in Advanced - Bindings, Responses & Data Models"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Highlight the full binding data flow",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "\nHere we can see the full data binding flow. It is similar to the Wizard generation process, which creates both the components and bindings automatically. \nIt highlights a table API’s definition. This API definition has been assigned to an API component within the App Designer.\nA List component has then utilised the API operation as its Model Source, and within the List is a ObjectListItem, which is bound to one of the properties from the definition - {assigned_for_checking}\nThe API has the its response body defined – so can be configured within the API component to set the data to the model of the List. This then populates the list with data when the API is called."
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Deisgner pt.1-Message Box",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Message Box\n\n\n\nThis document describes the sap.m.MessageBox component, its purpose, and how to use it. The Message Box provides a standardized way to display various types of messages or alerts to users. It allows developers to show messages such as information, warnings, errors, or confirmations in a consistent and user-friendly manner. The MessageBox can include text, icons, and buttons to interact with the message.\n\nTo showcase the capabilities of this component, the SAMPLE_MESSAGEBOX application from the UI5 Application Samples package has been used. \n\nDownload the UI5 Application Samples from the Marketplace and open the SAMPLE_ MESSAGEBOX application in the App Designer. \n\n\n\n\n\n\n\nThe SAMPLE_MESSAGEBOX application is showcasing various Message Boxes that provide users with different types of messages or alerts.\n\n\n\nSuccess \n\nThe first example displays a message box informing the user of a successful action, stating that the settings have been reset.\n\n\n\nWarning\n\nThe second example displays a message box informing the user about a warning, stating that the settings are about to change.\n\n\n\nInfo\n\nThe third example showcases an information message box, designed to inform the user about a specific action or event.\n\n\n\nError\n\nThe third example demonstrates an error message box, which is used to inform the user about an encountered error.\n\n\n\nAlert\n\nThe forth example displays an alert message box, designed to alert the users about an action.\n\n\n\nConfirm \n\nThe last example illustrates a confirmation message box, used to prompt the user for confirmation on a specific action or event.\n\n\n\n\n\nMessage Box Properties\n\nThe message box can be configured with the following properties:\n\n\n\n\nUp to 5 custom buttons can be added, from the list:\n\nWhen selecting an icon for the message box, you can choose any value from the list to reflect the nature of the displayed message to the users.\n\nEach of the values will apply an icon and a state for the message box.\n\nText content to display within the dialog.\n\nA title for the message box.\n\nOpen a Message Box \nIn the SAMPLE_MESSAGEBOX application, message boxes are triggered to open within the button press event using the OpenMsgSuccess() function.\n\nHowever, this is not the only way of opening message boxes. You can also trigger message boxes throughout your application logic using the same function.\n\n\nMessage Box Events\n\nThe message box has one event called \"callback.\" \nWithin this event, you can implement custom logic to trigger a specific function based on the user's interaction with the message box. For instance, if a message box displays a \"Retry\" button, you can utilize the callback event to call a function that retries the action when the \"Retry\" button is clicked.\n\n\n\n\n\nThe callback event can be utilized to take the user input and execute custom logic accordingly. For instance, when using a confirmation box with \"Yes\" and \"No\" buttons, you can implement specific actions based on whether the user clicks \"Yes\" or \"No\". This allows for tailored behavior depending on the user's choice.\n\n\nThe Message Box offers a standardized and user-friendly method for presenting a range of messages, from information to warnings, errors, and confirmations. With options for text, icons, buttons, and events, developers can create consistent and intuitive message displays for users to interact with. This enhances the overall user experience and ensures that important information is communicated effectively within the application.\n\nFeel free to experiment within the sample application! \n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-Import App Builder app in the App Designer",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Import App Builder application in App Designer\n\n\n\n\nThis document describes the process of importing an App Builder application in the App Deisigner. \n\nTo showcase this functionality, the “My First App!” application from the Marketplace has been used, but you can also use the application built in the App Builder chapter.\n\nDownload the “My First App!” from the Marketplace and open the application in the App Designer.\n\n\n\n\nIf you've opted to use the application built in the App Builder chapter, click on the “Export to Open Edition” button within the App Builder, and the application file will be downloaded.  \n\n\n\nOnce the file has been downloaded, open the App Designer, click on \"New From File,\" and select the application file from your machine.\n\n\nApp Designer - Import application from file\n\nOnce you've opened the application in the App Designer or imported it from a file, the application will be available for editing in the App Designer.\nNote: The application imported into the App Designer remains unchanged, so it will look the same as it did in the App Builder.\n\n\nApp Builder application in the App Designer\n\n\n\nTest data\nThe import functionality also includes any test data assigned to your application within the App Builder. Bindings are preserved, and the data is added to the models of the components at runtime. Therefore, you can easily continue developing the application within the Low-Code environment of the App Designer. It is then possible to swap (disable) the static (hardcoded) test data and integrate an API to request the data at runtime. \n\nMore information around Models and Bindings, along with API integration, is covered in the Foundation - App Designer Part 2 chapter.\n\n\nApp Builder Test Data\n\nAbove we can focus on two files that will be present within your imported App Builder application if you have assigned test data to it. The first is a MultiModel component called “TestData”, and the second is a JavaScript file, that runs when the application starts, that sets the data to the MultiModel “TestData”. You can see the JSON stored within the JavaScript file.\nAny components, such as the Table in the above example – that point to the model, will utilise their bindings to display the data, just as in ‘Run Mode’ within the App Builder.\n\nConclusion\n\nIn conclusion, the import functionality bridges the gap between the No-Code environment of the App Builder and the Low-Code environment of the App Designer. It enables you to design your application in the App Builder as per your requirements, then seamlessly import it into the App Designer to further enhance it with additional functionality, logic, APIs, server scripts, and more.\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Writing good error messages",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Writing good error messages can be the difference between a useable application, and something that confuses and frustrates end users.\nHere is some guidance on how to write a good error message for your users.\n\n\n\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Pt 2. Using .getContent on a Form, and looping through",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Looping through a form\nTo loop through all input fields on a form and set a specific value without specifying the input field names, you can use the following code snippet:\nlet simpleFormContent = simpleForm.getContent();\nfor (let a = 0; a < simpleFormContent.length; a++) {\n    if (simpleFormContent[a].getValue) {\n        console.log(simpleFormContent[a].getValue());\n        // simpleFormContent[a].setValue(\"new value\");\n    }\n}\n\nIn this code snippet, we first retrieve the content of the simpleForm using the getContent() method. This will give us an array-like object containing all the elements within the form.\nWe then use a for loop to iterate over each element in the simpleFormContent array. Within the loop, we check if the current element has a getValue() method. This is to ensure that we are only considering input fields.\nIf the current element has a getValue() method, we can retrieve its value using getValue() and perform any necessary logic based on the value. In the example code, we simply log the value to the console using console.log().\nYou can uncomment the simpleFormContent[a].setValue(\"new value\") line and replace \"new value\" with the desired value to set the input field value programmatically.\nBy using this approach, you can loop through all input fields on a form without explicitly specifying their names, making the solution more flexible as the input field names may change over time.\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Searching within the App Designer",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "As you start to build more comprehensive applications, searching for what you need within the App Designer becomes a vital skill. Here are a few of the search processes available:\n\n\n\n\n\n\n\nOpen some example applications and test each of these search processes to become familiar with their capabilities!"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-Input Fields",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Input Fields\n\n\n\nThis document describes the different types of input fields, their purpose, and how to use them. \n\nTo showcase the capabilities of these components, the following applications from UI5 Application Samples package have been used:\n\n\n\nDownload the UI5 Application Samples from the Marketplace and open the applications in the App Designer, in different tabs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput Fields \nhttps://experience.sap.com/fiori-design-web/input-field/ \nAn sap.m.Input component is used for creating input fields in applications. It provides a control for users to enter and edit single-line text values. These input fields can be used for various purposes such as:\nGathering user input (like names, addresses, emails, etc.)\nEntering search queries\nProviding options for users to input data in forms\nAllowing users to edit existing text data\nFor example:\n\n\nSAMPLE_SIMPLEFORMS application\n\nNOTE: For capturing larger (several) lines of text, you can utilise the ‘TextArea’ component:\nhttps://experience.sap.com/fiori-design-web/text-area/ \n\n\nInput Field Properties \n\nThe sap.m.Input component offers various properties to customize its behavior and appearance, such as:\n\nplaceholder text.\n\n\n\nvalue state (to indicate errors or warnings)\n\ntype (for different input formats like numbers, dates, emails), and more.\n\nInput Field Events\nThe sap.m.Input component provides several events to handle different user interactions. These events allow developers to respond to user actions such as typing, changing values, submitting input, selecting suggestions from a list, requesting value help, and more. Each event serves a specific purpose in enhancing the user experience and validating input data within the application.\nchange: Fired when the input value is changed by the user.\nliveChange: Fired for every change of the input value, as the user types.\nsubmit: Fired when the user presses the \"Enter\" key or submits a form.\nsuggest: Fired when the user inputs something and a suggestion list is displayed.\nsuggestionItemSelected: Fired when a suggestion item from the list is selected.\nvalidateFieldGroup: Fired when a logical field group defined by fieldGroupIds is left or when the user explicitly triggers validation.\nvalueHelpRequest: Fired when the user requests value help for the input field.\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeed Input \nhttps://experience.sap.com/fiori-design-web/feedinput/ \nThe sap.m.FeedInput component is a specialized input field designed for creating social media-style feeds or posts within applications. It provides a user-friendly interface for users to input and post messages, comments, or updates. This component can be used to create interactive and engaging social feed functionalities within their applications.\n\n\nSAMPLE_FEEDINPUT application\n\n\nFeed Input Properties\n\nThe sap.m.FeedInput component allows you to add icons, specify icon initials or sizes, set placeholders, and more, allowing developers to customize the appearance and behavior of the feed input according to their application's requirements.\n\n\nFeed Input Events\n\nThe sap.m.FeedInput has two events available to use: \n\npost: this event is triggered when the user has entered a value and pressed the post button. After firing this event, the value is reset.\n\n\n\n\n\nvalidateFieldGroup: fired when a logical field group defined by fieldGroupIds is left or when the user explicitly triggers validation.\n\nDateTime Input\nhttps://experience.sap.com/fiori-design-web/datetime-picker/ \nThe sap.m.DateTimeInput component is used to enable users to input date and time values. It provides a field where users can select dates and times either manually or through a date/time picker, making it easier to handle date and time-related input in applications.\n\nSAMPLE_DATETIMEINPUT application\nDateTime Input Properties\nThe DateTime Input component has various properties that can be configured, such as setting a placeholder, a valueState, a displayFormat, and more. A key property of this component is the \"type\", which allows you to specify whether the user should select the date, the time, or both. \n\nThe \"type\" property is showcased in the SAMPLE_DATETIMEINPUT application, where the first input prompts for the date, the second for the time, and the third for both date and time.\n\nDateTime Input Events\n\nchange: used to trigger actions or validation based on the new input value provided by the user.\nvalidateFieldGroup: fired when a logical field group defined by fieldGroupIds is left or when the user explicitly triggers validation.\n\n\nStep Input \nhttps://experience.sap.com/fiori-design-web/step-input/ \nThe sap.m.StepInput allows users to input a numerical value by clicking on increment and decrement buttons. It's commonly used for fields where users need to adjust a value step by step, such as quantity fields in shopping carts or settings where a specific increment or decrement is required.\n\nSAMPLE_STEPINPUT application\n\n\nStep Input Properties\n\nThe SAMPLE_STEPINPUT application demonstrates various examples of the StepInput component's usage. It showcases scenarios with minimum and maximum values, different step sizes, and other customizable features, highlighting the flexibility of this component.\n\n\n\n\nStep Input Events\n\nThe sap.m.StepInput has two events: \n\nChange: can be triggered when the text in the input has been modified and the focus leaves the input field or when the “Enter” key is pressed. Additionally, it is fired when either the decrement or increment buttons are pressed.\nvalidateFieldGroup: fired when a logical field group defined by fieldGroupIds is left or when the user explicitly triggers validation.\n\n\nMask Input\nhttps://experience.sap.com/fiori-design-web/generic-mask-input/ \nThe sap.m.MaskInput component is used to enforce a specific input format from users. It allows to define a mask for input fields, ensuring that users enter data in a specific pattern. This can be useful for scenarios where input needs to be in a certain format, such as phone numbers, serial numbers, or other structured data. \n\nSAMPLE_MASKINPUT application\nMask Input Properties\nThis component offers a range of configurable properties, among which some of the most significant are:\nmask – this property is used to define patterns or to limit the number of characters that the user is expected to enter. When a user types in the input field, the mask ensures that the entered text conforms to the defined pattern.\n\ntype - This property allows you to specify predefined mask types for common input formats such as dates, times, numbers, and more.\n\nplaceholder – this property allows to set a placeholder text that provides a hint to the user about the expected input format.\n\n\nConclusion\n\nEach of these compoents are designed to handle different types of user input in applications, offering various customization options making it easier to create inuitive and user-friendly applications. \n\nFeel free to experiment within the sample applications!\n\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-Dialogs ",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning - Dialogs\n\n\n\nThis document describes the sap.m.Dialog component, its purpose, and how to use it. Dialogs are utilized to display important messages, warnings, or prompts in a focused window that appears on top of the main content. They improve user interaction and provide a clear way to handle information or actions within an application.\n\nTo showcase the capabilities of this component, the SAMPLE_SHOWDIALOG application from the UI5 Application Samples package has been used. \n\nDownload the UI5 Application Samples from the Marketplace and open the SAMPLE_SHOWDIALOG application in the App Designer. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe SAMPLE_SHOWDIALOG application is showcasing different dialogs containing various components, all accessible with a simple click of a button. \n\nSimple Dialog\n\nThe first dialog includes two tabs. Within these tabs, there's a SimpleForm that contains a text element and a textArea.\n\n\n\n\n\nOpen a Dialog\nAs seen in this example, each dialog is opened using a button. Now let's take a look at how this action is performed.\nWithin the press event of each button a function is called. Let’s take as an example, the button opening the Simple Dialog. The press event of this button contains a function: oSimpleDialog.open() – which uses the name of the dialog and the function open() used to open the dialog. Therefore, when the button is pressed, the function is called and the dialog opens.\n\n\n\nThe properties of a dialog allow you to customize it to your specific needs. You can customize the title, add an icon, include a custom header, or set a state to reflect the content displayed within the dialog. Similarly, when it comes to the content within the dialog, you have the flexibility to add various elements such as lists, tables, images, forms, buttons, and more.\n\nExample: A dialog featuring a table.\n\n\n\n\n\nAssociations \n\nAssociations are used to establish relationships between the dialog and other UI elements. These associations allow the dialog to interact with and control specific elements within the application. The two associations available within the dialog are: beginButton and endButton. \n\n\n\nIn the figure above, the two buttons (Submit and Close) are located outside of the dialog within the component tree. However, when referenced in the associations of the dialog, they will be rendered and accessible when the dialog is opened. Associations allow the dialog to establish connections with external elements, making these buttons functional and visible within the dialog context.\n\nClose a Dialog\n\nBy default, a dialog closes when the escape (Esc) key is pressed. However, if you want to customize this behavior, it's possible to do so. One approach is to reference a button in the dialog's associations. Within the press event of that button, you can use the oSimpleDialog.close() function. When the dialog is opened, the button is rendered, and when pressed, it triggers the function to close the dialog.\n\n\nThis function can also be triggered throughout your application's logic. For instance, if you have a form within the dialog, after the user fills in the form and presses submit, you can call the function to close the dialog after the information is submitted. This allows for flexible control over when the dialog should be closed based on user actions or application logic.\n\nFeel free to experiment within the sample application! \n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-Responsive Design Principles",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Responsive Design Principles\n\n\n\n\nThis document describes the responsive design principles within the App Designer.\nTo showcase the responsive design principles, the SAMPLE_HBOXVSVBOX application from the UI5 Application Samples package has been used. \n\nDownload the UI5 Application Samples from the Marketplace and open the SAMPLE_ HBOXVSVBOX application in the App Designer. \n\n\n\n\nLet’s have a look at the more comprehensive example within the third tab of the application.\n\nSAMPLE_ HBOXVSVBOX – third tab\n\n\nYou can adjust the size of the view port to mimic the size of different screens when running the application.\n\nAdjust the view port\n\nOne of the most important properties to consider when using layout boxes is the Wrap property. \nThe wrap property in layout boxes like HBox and VBox directly affects how the elements behave when the available space changes, which is crucial for responsiveness:\nWhen the wrap property is set to wrap, the items will wrap onto the next line or column as the container's size decreases, ensuring that all items remain visible and arranged even on smaller screens. This is ideal for creating responsive layouts.\n\nWhen the wrap property is set to NoWrap, the items will try to maintain their position in a single line or column. If there isn't enough space, they may overflow the container, potentially causing a horizontal scrollbar or cutting off content.\n\n\n\n\n\n\nAnother property that aids when building responsive applications is the styleClassVisibility. This property allows you to dynamically control the visibility of the components within your application.\nThe styleClassVisibility has multiple options to choose from:\nsapUiHideOnDesktop: Hides the component on desktop devices.\nsapUiHideOnPhone: Hides the component on mobile devices.\nsapUiHideOnTablet: Hides the component on tablet devices.\nsapUiVisibleOnlyOnDesktop: Makes the component visible only on desktop devices.\nsapUiVisibleOnlyOnPhone: Makes the component visible only on mobile devices.\nsapUiVisibleOnlyOnTablet: Makes the component visible only on tablet devices.\n\nIn the following example the HBox3, which contains the price information of the product, has the styleClassVisibility set to sapUiHideOnPhone, therefore the panel will be visible on Desktop and Tablet devices, but hidden on Mobile devices.\n\nstyleClassVisibility example\n\n\n\nIt is important to consider the design of your interface, and to implement layout components to account for your different use cases. Most components are responsive by default, however when combining mutliple components, it is your responsibility to decide the behaviour of how these components should be arranged when the application runs on different devices and screen sizes.\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-Generate-Application-Versions",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Generate Application Versions \n\n\n\nThis document describes the process of generating versions of your application in the App Designer. This feature offers you the ability to save previous versions of your application, allowing you to effectively track changes and maintain a history of your app’s previous iterations.\nIn the App Designer, you have the option to manually generate versions or enable the autogenerated versions of your application.\n\n\nManual Version Generation \n\nTo manually create versions of your application, click on the Application, then choose \"Generate Version\" from the dropdown menu. In the description field of the dialog, provide a name for the version and click on \"Create.\"\n\n\n\n\n\n\n\n\n\n\n\n\nTo preview the generated version click on the Version Management from the left side menu of the App Designer. Within this tab, the right pane displays the previous version of the application, while the left pane displays the current version (V1).\n\n\n\nThe Version Management also provides the option to export the previous version of the application by clicking the \"Export\" button.\n\n\n\nAutogenerated Versions \n\nAutogenerated versions allow you to generate application versions automatically upon activation. To enable this feature, go to the application settings, navigate to the properties tab, and enable \"Autogenerated Versions.\" You can then specify the number of versions to keep in history upon activation.\n\n\n\n\n\n\n\n\n\nOnce Autogenerated Versions is enabled, the App Designer will generate a new version of the application every time it is activated. These versions can be previewed within the Version Management tab. In this tab, the right pane shows the previous version of the application, while the left pane displays the current version. The right panel contains all the autogenerated versions of the application, each of which can be exported using the \"Export\" button. \n\n\n\n\n\nRevert Changes to applications\n\nTo revert changes made to an application, you have two options. You can export a previous version and then import it back into the App Designer, restoring the application to its earlier state. Alternatively, in Neptune DXP – Open Edition LTS23, the undo button history is now preserved even after saving or activating the application. This means you can simply use the undo button to revert the app to its previous version without the need to export and import.\n\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.2-ListItem Varients",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Foundation eLearning – Different ListItem Varients\n\n\n\nThis document describes the different ListItems varients, their purpose and how to use them. The ListItems are used to display and organize data in lists within applications. They offer a versatile way to present different types of information, from simple text to complex object data with images and actions.\n\n\nTo showcase the capabilities of this component, the following applications from the UI5 Application Samples package have been used. \n\n\nDownload the UI5 Application Samples from the Marketplace and open the sample applications in the App Designer. \n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom List Item\n\n\nThe sap.m.Custom list item is a versatile list item that allows you to create fully customized lists with any type of content or components. It is used when the standard list item types do not meet specific layout or design requirements, providing flexibility to display unique data structures or complex UI elements within a list.\n\n\n\n\nSAMPLE_CUSTOMLISTITEM application\n\n\nDisplay List Item\n\n\nThe sap.m.DisplayListItem is designed for displaying read-only information in a structured way. It is used when you need to show data with labels and values, providing a clean and organized presentation of information within a list.\n\n\nSAMPLE_DISPLAYLISTITEM application\n\nFeed List Item\n\n\nThe sap.m.FeedListItem is designed for displaying social feed-like content, such as posts, updates, or activities. It includes fields for the author, timestamp, text content, and optional images, making it ideal for creating a timeline or activity feed within an application.\n\n\n\nSAMPLE_FEEDLISTITEM application\n\n\nStandard List Item\n\n\nThe sap.m.StandardListItem is used for displaying basic information in a list format. It typically includes a title, description, and optional attributes like icons or counters. This list item is commonly used for presenting a list of items where each entry has a straightforward structure and limited additional information.\n\n\nSAMPLE_STANDARDLISTITEM application\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObect List Item \n\n\nThe sap.m.ObjectListItem is designed for displaying more complex information about objects or entities. It allows for the display of an image, title, description, attributes, and statuses in a single list item. This makes it ideal for showing detailed information about entities in a structured and visually appealing manner within a list.\n\n\n\nSAMPLE_OBJECTLISTITEM application\n\n\n\n\nConclusion\n\nThe different ListItem varients, are offering various ways for displaying and organizing data in lists within applications. From the simple StandardListItem - for basic information to the versatile ObjectListItem - for more complex data structures, these ListItems provide flexibility and customization options. Whether it's displaying text, images, statuses, or actions, the ListItems allow you to better display and organize data within a list, enhancing the overall user experience.\n\nThe best way to understand their capabilities is to experiment with them. Therefore, feel free to explore the sample applications!\n\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App-Designer pt.1-Layout Boxes revision",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Layout Boxes – Revision\n\n\n\nThis document offers additional insights into Layout boxes. Layout boxes in OpenUI5, such as HBox and VBox, essentially function as HTML <divs> designed for layout purposes within the application. They provide a structured way to organize and position UI elements.\n\n\nHBox – Horizontal Box\nIf you wish to display content on the right side within an HBox, you can achieve this by setting the justifyContent property to “End”, as demonstrated in the figure below\n\n\n\nTo create space around the content within the HBox, you can set the justifyContent property to \"SpaceAround,\" as demonstrated in the figure below.\n\n\n\n\n\n\n\n\nTo create space between the content within the HBox, you can set the justifyContent property to \"SpaceBetween,\" as demonstrated in the figure below.\n\n\n\n\n\nTo center the content of the HBox, you can set the justifyContent property to “Center”, as seen in the figure below. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVBox – Vertical Box\nThe height of a VBox in OpenUI5 adjusts automatically based on the number of components added to it. However, if you want the VBox to take up the full height of the page, you'll need to set the height property to 100%.\nIf you wish to display content on the bottom within an VBox, you can achieve this by setting the justifyContent property to “End”, as demonstrated in the figure below\n\n\n\nTo create space around the content within the VBox, you can set the justifyContent property to \"SpaceAround,\" as demonstrated in the figure below.\n\n\n\n\n\n\n\n\n\n\nTo create space between the content within the VBox, you can set the justifyContent property to \"SpaceBetween,\" as demonstrated in the figure below.\n\n\n\n\nTo center the content of the VBox, you can set the justifyContent property to “Center”, as seen in the figure below. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHBox and VBox: alignItems and justifyContent \n\nIn an HBox context, the alignItems property controls vertical alignment of content, while the justifyContent property controls horizontal alignment within the HBox.\n\nIn a VBox context, the e alignItems property controls horizontal alignment of content, while the justifyContent property controls vertical alignment within the HBox.\n\nEssentially, they are the same but just opposite!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApp Builder layout properties comparison\n\nWithin the App Builder, the alignItems property of a VBox is referred to as \"Place content horizontally\", while the justifyContent property is referred to as \"Place content vertically\".\nWhereas in the context of an HBox, in the App Builder, the alignItems property is referred to as \"Place content vertically\", while the justifyContent property is referred to as \"Place content horizontally\".\nFor instance, in the example below, a VBox is used with alignItems set to center, which horizontally centers the content. The justifyContent is set to end, so the content is displayed at the bottom of the VBox. The outcome of these properties is the same in both the App Designer and App Builder as seen in the following figure. \n\n\n\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App Designer Sample App Setup and Demo",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "\n\nVisit the Marketplace, search for and install the 'UI5 Application Samples' product.\n\n\nThis package contains 100+ examples of common components in use, each within its own independant application:\n\nThe value of having these samples installed in your own instance, is to enable you to easily reference them, by opening them and inspecting your desired component(s) running with several different property configurations.\n\nFor example, you might want to implement a slider within your App. You can find and open the ‘SAMPLE_SLIDER’ sample application, which contains a range of the same UI5 Slider component configured with different properties. Such as with a label, or with steps, in this example:\n\nYou can then simply copy and paste the component (with its configured properties) into your own application to utilise.\nThis promotes reusability, and is encouraged throughout the development process – you should aim to re-use and reference examples where possible!\n\nFor reference, the GitHub repo where the apps are stored is found here: https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-sampleapps\nMore information around GitHub CI/CD is available later in the course.\n \nIt is worth highlighting the sample apps included in this package are also the same ones running within the Portal resources:\nhttps://portal.neptune-software.com/launchpad/portal#p9Sample-display\n "
    }
]