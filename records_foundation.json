[
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54722648-cockpit-tool-overview-blog",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54722648-cockpit-tool-overview-blog",
    "sourceType": "text",
    "content": "In the following linked blog, you can find a high-level overview of a range of the most commonly used tools within the platform.\nIt highlights some key links between the tools - when they are likely to be used together. Such as integration APIs within Applications and Server Scripts, and how Server Scripts integrate with the platform tables, connectivity tooling, and Workflows.\n\nIt initially highlights the Development Package concept, then it explains information about the applications that are created within the platform - the development tools, the connectivity tools, the database and scripting tools, the workflow, and the user management tools that are used to do this. Finally, the administration and deployment tools are introduced.\n\nhttps://community.neptune-software.com/topics/planet-9/blogs/updated--video--neptune--software----open--edition--dev\nGive the video (embedded in the blog) a watch-through!\n\nSupplementary documentation is available here:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/cockpit-components.html"
  },
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54722861-runtime-overview-video",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54722861-runtime-overview-video",
    "sourceType": "video",
    "content": "first it's important to note that the entire platform is a node J's runtime no J's is an open source cross platform back-end JavaScript Runtime Environment because of this the platform can benefit from npm packages npm is an online repository for open source no J's projects and libraries having this in place makes it really easy to extend the functionality of the open edition platform with the choice of over 1 million different packages for managing connections to Legacy databases to handling authentication tokens within this runtime you have the choice of four different supported databases by default the platform comes with an embedded sqlite database which can be used straight away for database tables the platform also uses this database for its own configuration tables alternatively you can easily swap to a postgres SQL Microsoft SQL server or sap Hana database all these databases can utilise the power of typo an ORM or a object relational mapping is a technique that lets you query and manipulate data from a database using an object orientated paradigm this just means that you can use type Orme statements instead of traditional SQL statements to interact with the database layer now we know about the Foundation of the open edition we can contextualise this alongside the SAP edition module to see how it differs here you can see the SAP edition utilises the abap runtime ICF node each module has its own hosting methods to the SAP edition is embedded within the SAP system so runs within the netweaver stack whilst the open edition can be hosted anywhere on Google Cloud platform to AWS or azure or even on premise alongside sap and it's easy to deploy as a docker container that can be orchestrated with Cloud foundry you can even run the open edition on a Raspberry Pi even though both modules utilise these different foundations they both share a number of similar tools both modules have the Neptune launch pad available both modules also have the application designer the open edition has the API designer whilst the SAP edition has the API factory which makes it possible to automate the rest API generation of sap artefacts the open edition has the Script editor and the workflow engine whilst both modules can benefit from the application building blocks"
  },
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54722916-runtime-overview",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54722916-runtime-overview",
    "sourceType": "text",
    "content": "Introduction to the runtime environment of the Open Edition:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/getting-started-guide/overview-runtime.html\nLearn about the database setup and the support for various other standalone databases.\n\nComparison between SAP Edition and Open Edition, highlighting hosting methods and shared tools.\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/getting-started-guide/overview-comparing.html\n\nNote:\n\nNeptune DXP - SAP Edition applications can run natively in a Neptune DXP - Open Edition launchpad. This means when both modules are used, it is possible to connect the SAP Edition to the Open Edition as a remote system, so applications can be called and loaded at runtime and run embedded into the Open Edition."
  },
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54722949-the-open-ui5-framework-video",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54722949-the-open-ui5-framework-video",
    "sourceType": "video",
    "content": "open UI 5 is used as the foundation for all the UI components and their functionalities for example here we can see the name of the component sap dot em dot date picker which in the application designer will be named oh date picker by default on the page this component is an input field that when clicked or tapped on will open a calendar that allows the user to select a date we can build on this example by adding a shell app and Paige as parent components to the date picker and now we see the date picker inside of an app this shell app page structure is the most common foundation for apps within the app designer and this brings us onto learning about aggregations this is a relationship between two UI elements a parent child relationship so the shell app page structure represents an aggregation where you can put as many child components within the page as you want there are aggregations that don't work and will cause errors for example putting a slider component directly within a list will cause an error stating that a slider is not a valid aggregation for a list however a list can contain a number of children such as a standard list item and this won't cause any problems let's have a look at a few more examples of these ui5 components and their aggregations here we have a icon tab bar with three icon tab filters one of which contains a text component in this example we have a menu button which contains a menu component as a child and then within that there are five menu item children even with two of them as sub children to a parent menu item this produces this menu button which reflects the same structure finally here is an example of a table which is built using a sap or m dot table as a parent with a sap dot m.com components as children alongside a column list item which contains 5 text components this structure might be hard to remember but that isn't a problem as lots of these patterns are available at samples or can even be generated automatically using wizards such as with this table next let's Learn about events lots of the components within the ui5 library have events for example a button component has a press event and within the event you can write any JavaScript functionality that you want that will be run every time the button is pressed in this example the button sends the app to the next page sets a lists visibility property to true and then shows a message on the screen a second example is with a search field component which has a live change event and this event will be triggered every time A Change Is Made in the field such as a key being pressed in this event I've implemented a search on a list so each key press updates the list with the search results based on what is typed you can always click on the properties of the components to view information about them so here you can see a description of each event and when it's triggered finally let's Learn about bindings Binding is the ability to link data to specific parts of the UI components so for example we have a list with an object list item child component we can send an array of objects to the lists underlying data model and then within the object list item we combined properties so here we have bound the intro and title properties to the name and customer number keys of Our Data set this results in a list that automatically generates the same number of rows as there are objects in our array with each row showing the values based on the keys that we've bound to having these binding setup means you're components will always reflect the data automatically so here only two objects are Returned instead and you can see the list reflects only these two rows"
  },
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54722971-the-open-ui5-framework",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54722971-the-open-ui5-framework",
    "sourceType": "text",
    "content": "Here is the documentation reference for the Open UI5 framework implementation within the Open Edition:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/getting-started-guide/overview-openui5.html\n\nSome additional information about the Open UI5 framework worth noting - is that it is a subset of the full SAP UI5 library that is available.Â \n\n\n\n\n\n\n\nThe Open UI5 collection is more than enough to build comprehensive applications, however, a few additional components exist only within the context of the full SAP UI5 library.\n\nYou can read more about the difference between the two here:\nhttps://sapui5.hana.ondemand.com/sdk/#/topic/5982a9734748474aa8d4af9c3d8f31c0.html\n\nThis fact means it is not directly possible to export an SAP Edition App Designer application into the Open Edition App Designer, as they may be utilizing different library components.\n\n\n\n\n\n"
  },
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54723324-the-neptune-ecosystem",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54723324-the-neptune-ecosystem",
    "sourceType": "text",
    "content": "Familiarise yourself with these key ecosystem resources:\nWe recommend saving them to your favorites/bookmarks!\n\nCommunity - https://community.neptune-software.com\nBlogs from Neptune\nPosts from community developers\nMonthly âNeptune Herosâ\n\nNeptune Portal - https://portal.neptune-software.com/launchpad/portal\nProduct Download + Installation Guide\nMarketplace\nApp Builder\nMobile Build Service (MBS)\nSample Applications\nPartner resources\n\nDXP Demo - https://dxpdemo.neptune-software.cloud/launchpad/DXP\nExample applications based on real use cases\n\nNeptune Documentation - https://docs.neptune-software.com\nOpenUI5 Documentation - https://openui5.org/documentation\n(Open UI5 is the framework of components, used to build the user interface of the applications within the platform)\n\n\n\n\n\n\n"
  },
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54723338-community-blogs-and-posts",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54723338-community-blogs-and-posts",
    "sourceType": "text",
    "content": "The Neptune community is an essential component within the developer ecosystem. It contains useful information, announcements, updates, tutorials, and more.\n\nTwo of the key categories are Blogs and Posts:\n\nBlogs - Structured, informative - Created by Neptune (+ other partners)\nPosts - Questions and answers from all community members\n\nTo stay up to date, it is recommended to check in with the Blogs in the community regularly.\nFeel free to post your questions (or feature requests) within the Posts section.\nHowever, we recommend using the built-in search (or using Google search for \"Neptune Software [your question]\") to see if someone if the question has already been answered!"
  },
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54723380-users-dxp-developers-compared-to-end-users",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54723380-users-dxp-developers-compared-to-end-users",
    "sourceType": "text",
    "content": "DXP Personas:\nThe Cockpit developer perspective, vs the end user Launchpad perspective.\n\nBoth are the same underlying \"user\" within the platform, just with different roles, permissions, and authorization.Â \n\nEnd Users will log in via a Launchpad, and use the applications available to them there.Â \n\nDevelopers will log in and access the Cockpit, alongside the end user Launchpads.\n\nThe number of users in the trial version is set by default to 2. Adding a license to the platform increases the number of users that can be created.\nUsers can be created manually using the Cockpit tools, or automatically when the platform is integrated with an SSO provider. More information about these processes is covered later in the course."
  },
  {
    "chapterName": "Welcome to Neptune DXP",
    "lessonTitle": "54723646-extra-details-evaluation-guides",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54723646-extra-details-evaluation-guides",
    "sourceType": "text",
    "content": "Whilst learning more about the platform - you may find it useful to understand more details around high-level topic areas that the platform addresses:\n\nhttps://docs.neptune-software.com/neptune-dxp-evaluation-guide/All/evaluation-guide/overview.html\n\nThe evaluation guide has the purpose of explaining the Neptune DXP in the context of the enterprise.Â \n\nThe following topics are addressed:\n\nIntegration\n\nArchitecture\n\nSecurity\n\nDevelopment\n\nApplications\n\nNeptune Mobile Build Service"
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54723923-platform-versioning",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54723923-platform-versioning",
    "sourceType": "text",
    "content": "Here you can see a diagram explaining the version numbers for the platform.Â \n\nPlease ensure you are downloading and running the latest version and patch when starting this course.Â \n\nKeep an eye on the Community for blog posts announcing updates to the platform.\n\nWithin an annual release cycle, this is how the version numbers update:\n\n\n"
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54749929-first-look-how-to-navigate-the-developer-cockpit",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54749929-first-look-how-to-navigate-the-developer-cockpit",
    "sourceType": "text",
    "content": "There is a search bar at the top of the cockpit -Â This searchesÂ forÂ tools andÂ artifacts by default, so anything that has been created within the system.Â You can click into the search bar and search for any tool or artifact.Â \n\nÂ Â \nÂ \nHere âTool\" is being searched for:Â \nÂ \n\nÂ \n\nNote only the following categories are searched through:Â \nÂ \n\nThere is a switch to change to search the Documentation website instead.Â \nHere you can see the results when the Document Search is enabled:Â \n\nÂ \n\nTiles can be marked with a star to be saved into the 'Favourites' group in the cockpitÂ (they also appear in the drop down of the search results!):Â \n\nÂ \n\nOpen apps appear on the left bar, the menu can be expanded and collapsed to view the names of the tools:Â \n\nÂ Â \nÂ \nÂ \n\nÂ Â \n\nRecommendations will be presented in the bottom left of the cockpit when similar tools might be useful to complete your current development process:Â \n\nÂ Â \n\nIt isÂ possibleÂ to change your user settings in the top right - to adjust the position of the action buttons for example, from defaulting to the right had side of the screen, to the left instead! Useful when working on a larger screen. You can also swap between Light and Dark mode:Â \n\nÂ \n\nEnhancement: There is now an option in the user settings menu to change how editors are opened, i.e. tab or window.Â \n\nThis effects the behaviour of the App Designer, Adaptive Designer, Script Editor (and others), which open in their own browser instance.Â \n\nÂ "
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54724044-development-package-introduction",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54724044-development-package-introduction",
    "sourceType": "text",
    "content": "Here is a link to the Development Package documentation - give it a read-over:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/latest/cockpit-overview/development-package.html\n\nYou will now understand that packages are a way of organizing everything you develop within the platform. It is important to utilize packages to keep your projects organized.\nEnsure you start the practice of creating logical packages to collect artifacts that function together.\nA development package is simple to create - simply give one a name.\n\n\nWhat is the value of having a Development Package?\nEasy deployment and better organization of projects. It is possible to deploy individual artifacts from system to system - however, it is likely a number of artifacts power your processes. They should be deployed together, and so should be included in the same package.\n\nDependencies / Requirements\nAn individual artifact can only be assigned to one package at a time. There are a number of packages that rely on the logic provided within other \"common\" artifacts, such as the Launchpad app, Adaptive Framework apps, and Workflow Inbox app. These are shown within the \"Product Requirements\" section on the product pages in the Marketplace. Artifacts such as these, or any you develop yourself, that will be utilized across a number of other packages - should be within their own individual package.\n\nGitHub CI/CD\nIt is possible to integrate development packages with GitHub, to utilise a Continuous Integration/Continuous Development process. Each package can link 1:1 with a GitHub repo. More details on this integration will be covered later in the course, within the chapter \"Deployment Mastery\""
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54724308-creating-and-adding-artifacts-to-a-development-package",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54724308-creating-and-adding-artifacts-to-a-development-package",
    "sourceType": "text",
    "content": "When each component is created, it can be assigned to a package.\nThis is an optional property, and at any time you can assign or remove artifacts to and from packages.\nThere is a 1:1 link between an artifact (EG: an API, an Application, a Tile...) and a package.\n\nHere you can see the three above-mentioned tools, each of which has opened a specific artifact, that is assigned to a package.\n\n\n"
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54724312-cockpit-buttons-add-edit-display-save-delete",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54724312-cockpit-buttons-add-edit-display-save-delete",
    "sourceType": "text",
    "content": "Here you can see a couple of examples of the common tool action buttons within the Cockpit. Note that each tool can put any artifact into 'Edit' mode. This locks the record to your user, so only you can make changes. The lock must be manually removed for others to edit the artifact. When you return to 'Display' mode, the artifact is unlocked again and you can't edit it further."
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54724365-marketplace-introduction",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54724365-marketplace-introduction",
    "sourceType": "text",
    "content": "Read through the Marketplace documentation:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/latest/cockpit-overview/marketplace.html\n\n\nYou should now know about:\n\nMarketplace overview and architecture\nTypes of items available in the Marketplace\nAccess points for Marketplace items within Neptune DXP"
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54724373-downloading-products-from-the-marketpalce-inspecting-the-packages",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54724373-downloading-products-from-the-marketpalce-inspecting-the-packages",
    "sourceType": "text",
    "content": "Â \n\nThe Marketplace hosts a range of products, most of which you can install directly into your system.Â \n\nHere is an example of a product you can install:Â \n\nÂ \n\nÂ \n\nÂ  Â There is a connection betweenÂ Development PackagesÂ andÂ MarketplaceÂ items you install.Â \n\nÂ  When you install a product, you are installing a package, which canÂ containÂ one or more artifacts. Within the Marketplace, after installing, you can click \"Open Package\" to open the Development Package tool straight into the installed packageÂ \n\nHere you can view the artifacts and utilise the shortcut to open them directly within their respective tools.Â \n\nÂ \n\nÂ Â \n\nÂ Press âOpenâ within the product to view the Neptune hosted repository, which integrates with the package via the CI/CD configuration.Â \n\nFor the example above:Â Â \n\nhttps://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-uploadtomedialibraryÂ \n\nNote, Neptune published items will be contained within this GitHub organisation.Â \n\nÂ \n\nIf a product is installed, a re-install button will be visible:Â \nÂ \nÂ \n\nIt is important to re-install carefully when updates are available. Here you can see an example of the messaging available when your currently installed versionÂ doesnâtÂ match the latest version linked to the Marketplace product:Â \nÂ \n\nÂ \n\nThe best practice is to copy / export the development item(s) included in the package you wish to re-install, so if there are critical issues, you can restore the original copy.Â \n\nÂ "
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54724733-download-update-required-products-from-the-marketplace",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54724733-download-update-required-products-from-the-marketplace",
    "sourceType": "text",
    "content": "A range of applications are included by default when you set up the Open Edition. These are the Adaptive Framework Applications and the Launchpad Application.\n\nThis is to enable functionality out of the box, however, it is highly recommended at this point to download and update these products via the Marketplace, so you are working with the latest stable functionality.\n\n\nPlease visit the Marketplace and Install:\nNeptune DXP - Open Edition Launchpad\nAdaptive Framework Templates\n\nThis will update the following applications:\n\n\nTo replace the provided applications with their latest copies.\nWhen updates are made to these products when you re-visit the product page in the Marketplace at any time, where you will be able to re-install to the latest version."
  },
  {
    "chapterName": "Setup, Overview, Development Package & Marketplace Essentials",
    "lessonTitle": "54755671-top-tip-action-button-placement",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54755671-top-tip-action-button-placement",
    "sourceType": "text",
    "content": "\n\n\nRemember to adjust the action buttons to the left, within your profile customizations - as when working on a larger screen, you may prefer the more user-friendly option of having them closer to the other common cockpit actions."
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54755712-launchpad-documentation",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54755712-launchpad-documentation",
    "sourceType": "text",
    "content": "Launchpad Documentation Link - Please read through this documentation page to learn about the concept of the Launchpad:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/launchpad-concept.html\n\nSecurity and Roles will be covered later in the course."
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54755750-what-is-a-launchpad",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54755750-what-is-a-launchpad",
    "sourceType": "video",
    "content": "the launch pad is a tool within the developer cockpit and also the end user access point it's key to understand and learn what configurations are available as it's very powerful when deployed to it's full potential launchpads are configured within the developer cockpit and then access directly via URL by end users later in this chapter will learn how to configure a launch pad using the copic tools however first let's see what the Launchpad is like from an end user's perspective a Launchpad can run on desktop tablet or mobile and it's browser based so it can support all of these features and more with mobile and desktop where available Launchpad allows you to apply themes giving you complete control over the look and feel of your end user experience even including more consumer grade looks One launch pad becomes the same access point across all devices by default this is a URL but you can also build a hybrid native mobile client for IOS Android or Windows if required the Launchpad requires users to login to access the tiles tiles organised into tile groups and everything has role-based access control so you have granular control over what each user or persona can see it's possible to run applications within the tiles on the launch pad to create dashboards here's an example with some additional theming applied the Launchpad tiles are fully responsive depending on the screen size and all the apps are loaded when you open them so any changes are available straight away for end users the Launchpad is where you login to view all the tiles and apps the login process can be customised and integrates with the number of standard providers such as azure along with offering one click biometric and PIN code security configurations the Launchpad also offers multilingual support users can quickly change between any configured language within the Launchpad the Launchpad sits here within the overall landscape of the dxp"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54755901-launchpad-update-cycle",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54755901-launchpad-update-cycle",
    "sourceType": "text",
    "content": "The Launchpad is anÂ ApplicationÂ that is created by Neptune, downloaded from theÂ MarketplaceÂ and is regularlyÂ updatedÂ with new functionalities and bug fixes.Â \n\nÂ Â \n\nThe Launchpad application name is 'planet9_launchpad_standard'.Â \n\nWhen you configure a Launchpad within the developer cockpit, this is the application you choose within this âLaunchpad Applicationâ field:Â \nÂ \n\nÂ Â \n\nIt is always recommended to be running the latest version of the Launchpad. You can check at any time, the Marketplace product, to view the version running within your instance, compared to the version available to download.Â \n\nEG: When running the latest version, you will see this message:Â \nÂ \n\nWhen you are running a different version, you will see this message:Â \n\nÂ Â \n\nIt is possible toÂ make adjustments toÂ the Launchpad application itself, like any other, but this is not recommended. For this purpose, there are 'Launchpad Enhancements' that cover this which will be explained in the expert level of this course.Â \n\nIf youÂ attemptÂ to use a different Launchpad application â you will see this warning:Â \n\nÂ "
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54755929-what-are-tiles-and-tile-groups",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54755929-what-are-tiles-and-tile-groups",
    "sourceType": "text",
    "content": "Overview of the Tile, Tile Group, and Launchpad Relationship:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/launchpad-concept.html#_launchpad_objects\n\nApps are assigned to Tiles.\nTiles are assigned to Tile Groups.\nTile Groups are assigned to Launchpads.\n\nTile Groups can also be included within other Tile Groups.\nTiles can also be configured, to open other Tile Groups.\n\nRoles, that can be created and assigned to users - can then be applied against Tile Groups or individual tiles - to enable full role-based access control for your Launchpad. This enables different users to see different tiles and tile groups.\n\nPlease read the overview pages for Tiles:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/tiles.html\n\nAnd for Tile Groups:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/tile-groups.html"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54755965-dxp-demo-launchpad-example",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54755965-dxp-demo-launchpad-example",
    "sourceType": "video",
    "content": "let's visit the DSP demo we can sign in as this demo visitor this is a user and password that's pre-populated here so you can log in straight away here we have a range of applications for different use cases each of these have been built by different people within Neptune and added here into a central Launchpad this is the classic E-Learning example with the demo video here in bedded the sales operation portal is an adaptive framework demo these are applications running on top of tiles with applications that you can action as well opening the sales orders shows you a different type of application that incorporates a side panel the executive dashboard is another launch pad that loads inside of the container the logistics delivery management is a single application with an integrated map as you can see on the left here all the applications we've opened so far are stacking up you press this button you can see all the active apps and all the other apps within the page the production quality management group opens here and we can see that there's a concern razor this allows you to select a number of pieces of data scanning a barcode to create a concern which can then be viewed within the concerned viewer this time has live statistics about the number of concerns within the system have a look around to see all the different demos in here there's documentation built in to each tile"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54755973-dxp-demo-advantages",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54755973-dxp-demo-advantages",
    "sourceType": "text",
    "content": "The DXP Demo is a useful example to understand the look and feel of applications built using the UI5 framework when running within the Neptune context.\n\nThese demos have specifically been built to utilize a range of common components and are based on real-life use cases.\n\nAll the DXP Demo examples are available for download within the Marketplace, so you can run the applications and processes yourself, adjusting and re-using to your convenience.\n\nThe UI5 documentation and library contains many other examples that are useful to familiarise yourself with, and to understand the capabilities and limitations of the framework. EG:\nhttps://sapui5.hana.ondemand.com/test-resources/sap/m/demokit/cart/webapp/index.html?sap-ui-theme=sap_horizon_dark"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54756041-exercise-creating-your-own-basic-launchpad-with-a-tile-group-and-two-tiles",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54756041-exercise-creating-your-own-basic-launchpad-with-a-tile-group-and-two-tiles",
    "sourceType": "video",
    "content": "now let's Create our first Launchpad and add some tiles to it this is very simple to do we just need the launch pad tool press add or give it a name please ensure you select the Launchpad standard application we can save that and put it in display mode let's open the tile tool and create a couple of tiles now we've made our two tiles let's create a tile group once we've given our tile group a name we can also give it a title now we can add the two tiles we just created to this group we can save the tile group and revisit the launch pad here we can run the launch pad as you can see currently it's just empty the default functionality includes the ability to edit the screen to see your settings and log out the menu on the left shows no applications if we add our tile group to this launch pads and save simply refresh the launch pads and will then see the group with the two tiles the Tarzan empty as we haven't added any titles to them but we can see the title for our tile group let's revisit the tiles and add their titles if we refresh the launch pad again we'll see those titles appearing currently these tiles have no actions so let's assign an action we can edit ensure the type is application and then choose the application we want to open if we save and refresh the launch pad again we'll see a button appears on our first time which allows us to open the application remember you have lots of layout options for your tiles you can choose the colours from a set of defaults or of course you can add custom theming later in the course you can change the width or the height of the Tar and you can add an icon or an image to the tower here let's add an icon you can also add a background image for the tile you can choose to hide the tile on any form Factor if we choose to hide the tile on phone and tablet for example we can see the effect of that Let's save the tile and refresh the Launchpad we'll see now or icon has been applied now if we change the size of the view to that of a mobile device or a tablet and refresh the launch pad we'll see that the tile is hidden on this form Factor"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54808062-highlight-tile-button-setting",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54808062-highlight-tile-button-setting",
    "sourceType": "text",
    "content": "\"Hide buttons and make tile clickable\" is a key setting that changes the way users will open the action set for the tile. Observe the difference here:"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54808169-changing-the-name-of-your-launchpad-implications",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54808169-changing-the-name-of-your-launchpad-implications",
    "sourceType": "text",
    "content": "Changing the 'Name' property of your launchpad directly impacts the URL to access it.\nKeep this in mind if you have shared the Launchpad with others, that the name of the launchpad stays the same.\n\n%20 is a URL-encoded character.\n\nNote: You can learn more about URL encoding here: https://www.w3schools.com/tags/ref_urlencode.ASP"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54808363-configuring-tiles-general-type-and-action-type-example",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54808363-configuring-tiles-general-type-and-action-type-example",
    "sourceType": "video",
    "content": "when you're configuring tiles is important to understand that there's two types there's the general type of your tile and there's the action type of your tile the general type depicts how the tile should look on your Launchpad for example this is a default type if I open a Launchpad that contains this tile will see that it's just a title it's description and an image as configured within the tile layout if we have a look at a different tile we can see that this type is Adaptive framework this means that an adaptive framework app will be running on top of the tile here is that tile running in the Launchpad you can see that there's an interactive application running on top of the Tar both of these tiles of the same action the type is application let's look at the original tile we can see hear application as well you can configure what applications should open when the user presses the tile here this will open this app and then our other tile you will open this app if we see this in Action both tiles have this action to open their own individual application"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54808492-end-users-customising-a-launchpad-tile-layout",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54808492-end-users-customising-a-launchpad-tile-layout",
    "sourceType": "video",
    "content": "end users can customise how they're launch pad looks you can right-click on any tile to open the menu here you can go into edit screen mode this allows you to rearrange the order of your tiles or even move them between tile groups the top right you can add multiple screens to a Launchpad here I've created a new screen and I can add tiles to it my second screen now appears up here if you press done you can open the second screen simply go back into edit screen mode where you can manage your screens such as renaming them or deleting them you can also change the size of tiles by clicking on the corner and dragging you can remove apps from your screen to get them back simply right click on another tile press edit screen and here you can add apps back in you can also visit the settings these are the same settings that you can access via the user panel here if you open the settings you can clear customisations for the user now the Launchpad will refresh and the standard configuration will reappear notes that if end users have edited their screen for example move tiles into different groups if you add new tiles to the existing groups they will still be displayed here I can open this tile group add a few additional tiles in and press save this maintenance manager group when I refresh will now have the three additional tiles I can then continue to adjust this as I desire"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54808586-disabling-customisations-setting-customisations-for-individual-devices",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54808586-disabling-customisations-setting-customisations-for-individual-devices",
    "sourceType": "text",
    "content": "It Is possible to disable customizations at the launchpad level, for all users, using this setting.\nThis prevents the right-click menu for tiles from being opened, and the 'Edit Screen\" menu item will be removed.\n\nAlso note the following setting bellow \"Configure customizations for each individual device e.g. Mobile, Tablet, and Desktop separately.\".\n\n\n"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54808854-download-the-elearning-example-from-the-marketplace",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54808854-download-the-elearning-example-from-the-marketplace",
    "sourceType": "text",
    "content": "If you have not already, you can download the eLearning 2022 Demo product from the Marketplace.\n\nThis product will serve as an example for the next exercise in this chapter as well as within other exercises throughout the rest of this course."
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54808865-exercise-re-organising-tile-groups-from-one-group-to-two-sub-groups-and-moving-tiles-between-tabs",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54808865-exercise-re-organising-tile-groups-from-one-group-to-two-sub-groups-and-moving-tiles-between-tabs",
    "sourceType": "video",
    "content": "in this exercise will rearrange the tile groups within this example currently all of the tiles are within two tile groups and both of these groups are assigned to this main all apps group if we visit the launch pads we can see only one tile group is assigned to the Launchpad this tile group contains two additional tile groups if we edits we can remove the main group and add in the two subgroups if we then save and refresh our launch pads we can see the change notes the first tile group becomes the default screen and the second tile group becomes a tab which can be switched back and forth remember all the apps can be seen on the left menu remember any applications that the user has access to can be organised by the user so here we have access to both these groups with all the tiles within but let's say for example I want the maintenance inbox to be available within this first page if I right click on any tile and say edit screen we can press the Plus button and we see the two apps or the two tiles within the other target here we can just add the maintenance inbox straight into this group"
  },
  {
    "chapterName": "Launchpad, Tile and Tile Group Basics",
    "lessonTitle": "54808876-launchpad-layouts",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54808876-launchpad-layouts",
    "sourceType": "video",
    "content": "if we have another look at the E-Learning example Launchpad we can see some of the layout that's been applied to it here we can see there are two themes assigned to this Launchpad the first one is called E-Learning layout here you can see all the settings which have been configured such as the background image the top menu colours and the drop down colours and more if we go into edit mode we can change any of these here for example if we change the background colour to a lighter blue that will apply immediately it is also possible to apply custom CSS within this layout more on this will be covered later in the course feel free to experiment by building your own layout or use the suggested colour palettes if you're not happy with your choice simply go back to display mode all the Themes that you have set to active within the Launchpad will be available for the user to choose the active switch can be found here for example there's two themes available in this launch pad if the user comes into their settings they can choose which theme they'd like to see"
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54830854-introduction",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54830854-introduction",
    "sourceType": "text",
    "content": "Familiarise yourself with the Table Definition and Browser documentation:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/table-definition.html\n\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/table-browser.html\n\nTables are where we can store and persist data to be utilized across the platform. Tables consist of Properties (rows) and entries (columns).\n\nIt is possible to use one large table to power an application or a combination of smaller ones. There is no one-size-fits-all approach - but in general, you will want to separate your data logically.\n\nEach entry created within a Table within the platform will have 5 automatically populated properties.\nCreatedBy\nCreatedAt\nUpdatedBy\nUpdatedAt\nA unique ID (GUID)\n\nWhen a new record is created, these properties are created and stored automatically, and can't be edited. Only the UpdatedAt and UpdatedBy properties are adjusted to reflect any changes made to the rest of the record."
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54830875-table-definition-and-browser",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54830875-table-definition-and-browser",
    "sourceType": "video",
    "content": "creating a table could not be simpler press add give your table a name and ensure you assign it to a package within the properties tab you can add any number of properties to your table hey you can define the column names on the right hand side you can set the type for each of your properties are you you ID is a unique identifier you can choose other data types suitable to your property some data times will adjust the way that you interact with the default value let's add a default value to check how this works you can set any property to be unique or nullable assuming it's not a text type in this case we can say the uuid will be unique and the phone number will be unique let's say that the street and the country and nullable fields this means that no value has to be provided here once we saved we can see some additional options here you can quickly generate a connector or an API to this table let's visit this table within the table browser here we can run and see our empty table if we press edit we can add some new records now if we save we can see that we have a not null constraint on the is partner field this is because by default if I haven't provided a value this will be null if I set this to true and disable it the value will not be false here we see one more unique constraint failure for the phone number now we can save and display and here we can see our data if I add another record a note that we provided a default value for the name I fill in the other properties when we press save we'll see that the default value populates here"
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54831985-understanding-data-types",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54831985-understanding-data-types",
    "sourceType": "text",
    "content": "Letâs now look at the properties you can select for your definition:\n\n\nÂ \n\nIn the context of SQL (Structured Query Language), which is used for managing and manipulating relational databases, these data types represent the kind of data that can be stored in a column of a database table:\n\nText: A data type for storing long-form text strings. It can hold a string with a maximum length that is dependent on the database system (often very large, up to GBs of text).\nUUIDÂ (Universally Unique Identifier): Used to store unique identifiers across a database. UUIDs are 128-bit values that are globally unique. They are used in various software applications to ensure a higher level of uniqueness than traditional incrementing IDs.\nDecimal: A fixed-point number where the number of digits before and after the decimal point is fixed, based on the specified precision and scale. It's used to store exact numeric data values, often for financial calculations where rounding errors of floating-point numbers are unacceptable.\nBoolean: A simple binary data type that can store true or false values. It is used to store truth values, often in flags that indicate a condition, such as is_active or has_logged_in.\nSmallint: A small-range integer data type that is used to store a numeric value without a decimal. It generally has a smaller range and storage size than a standard integer, often from -32768 to 32767.\nInteger: The standard data type for numerical values that don't require a fraction. It's used to store whole numbers, typically with a range from -2,147,483,648 to 2,147,483,647.\nBigint: An extended-size integer data type that can store very large numbers, usually with a range from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807. It's used when the range of integers is insufficient.\nSmalltext: This isn't a standard SQL data type, but based on its naming, it's likely a text string with a smaller limit on its size than a full 'Text' data type. Specific details would depend on the SQL database system in use.\nMediumtext: Similar to the 'Text' data type, but usually with a smaller maximum size. The exact limit can vary by the database system.\nTimestamp With Time Zone: Stores a date and time with an associated time zone offset from UTC. It is used when you need to record the exact time an event occurs and maintain the correct time relative to the time zone.\nTimestamp Without Time Zone: Similar to the above but does not store any time zone data. It represents a specific point in time and is usually considered as being in the local time zone of the database server.\nJSONÂ (JavaScript Object Notation): A data type for storing JSON documents. It allows the storage of structured data in a text format that can be easily parsed and generated by many programming languages."
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54832003-default-database-configuration",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54832003-default-database-configuration",
    "sourceType": "text",
    "content": "By default, the platform will be running on its embedded SQLite database.\n\nThe platform can and should be configured with different databases for productive purposes. Â This still utilizes the same Table Tools.\n\nThis is not required for this training course, however, if you wish to learn more, you can read about the settings to configure within the Documentation:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/installation-guide/configuring-database.html"
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54832010-exercise-create-your-own-table-based-on-this-example-specification-and-add-data",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54832010-exercise-create-your-own-table-based-on-this-example-specification-and-add-data",
    "sourceType": "text",
    "content": "To define an example customer table with properties, data types, and unique and nullable properties, you can follow these steps:\n\nÂ  Â  Open Neptune Cockpit and go to \"Tools\" and click on \"Table Definition\".\nÂ  Â  Open your desired database table.\nÂ  Â  Navigate to the \"Properties\" tab.\nÂ  Â  Click on \"+ Add\" to add a new column to the table.\nÂ  Â  Enter a column name for each property, such as \"name\", \"age\", \"email\", \"address\", and \"phone_number\".\nÂ  Â  Select the appropriate data type for each column, such as \"text\" for email and address, and \"Integer\" for age and phone_number.\nÂ  Â  Optionally, you can enter a description and default value for each column.\nÂ  Â  If a column should only have unique values, activate the \"Unique\" option.\nÂ  Â  If a column can have no value, activate the \"Nullable\" option.\n\n\nHere's an example of how the customer table properties could look like:\n\nColumn Name Â  Â | Data Type Â  Â | Unique Â  Â | Nullable\n---------------------------------------------------\nname Â  Â  Â  Â  Â  | text Â  Â  Â  Â  | Â  Â  Â  Â | No\nage Â  Â  Â  Â  Â  Â | Integer Â  Â  Â | No Â  Â  Â  Â | No\nemail Â  Â  Â  Â  Â | text Â  Â  Â  Â  | Yes Â  Â  Â  | No\naddress Â  Â  Â  Â | text Â  Â  Â  Â  | No Â  Â  Â  Â | Yes\nphone_number Â  | Integer Â  Â  Â | Yes | Yes"
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54832093-understanding-data-concepts-objects-arrays-json",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54832093-understanding-data-concepts-objects-arrays-json",
    "sourceType": "text",
    "content": "Array vs Object Diagram\n\nAn Array =\nA Table, or List, repeating information\n\nAn Object =\nA single record, such as what is displayed in a form.\nOften many objects are contained within an array\n\nWithin an object, there are Key-Value pairs.This is where the column name and data are stored within the structure.\n\n\nWhat is JSON?\n\nData is stored within the tables as JSON. This is just the name of the structure of the data in its raw form. In the case of the Tables within the platform, this is an array of objects.\n\n\n\n\n\n"
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54832309-null-vs-false",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54832309-null-vs-false",
    "sourceType": "text",
    "content": "Note the difference between a null value and a false value, particularly around assigning booleans.\n\nIn JSON, null and false are two different values with distinct meanings.\n\nÂ  Â  null: It represents the absence of a value or the intentional lack of a value. When a property or variable is assigned the value null, it means that there is no value present. It is often used to indicate that a particular property or field is intentionally empty or has no assigned value.\n\nExample:\n\n{\nÂ  \"name\": \"John\",\nÂ  \"age\": null,\nÂ  \"isActive\": true\n}\n\nIn this example, the age property is set to null, indicating that the age of the person is not known or not applicable.\n\nÂ  Â  false: It represents a boolean value that is logically false. It is used to indicate that a condition or statement is not true. A value of false indicates that the statement or condition is false or not valid.\n\nExample:\n\n{\nÂ  \"name\": \"John\",\nÂ  \"isStudent\": false,\nÂ  \"isActive\": true\n}\n\nIn this example, the isStudent property is set to false, indicating that the person is not a student.\n\nTo summarize, null represents the absence or lack of a value, while false represents a boolean value that is logically false.\n\nYou can use logic like this if in your scenario, both Null and False are logically the same:\nÂ  Â  if (value === null || value === false) {}"
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54832341-including-table-data-when-deploying",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54832341-including-table-data-when-deploying",
    "sourceType": "text",
    "content": "Within the table configuration, there is a setting - \"Include Table Data in Development Package (when pushing to git)\"\n\n\n\nThis ties in with the Development Package CI/CD process - when this setting is enabled, and the package is deployed to GitHub - a separate JSON containing the table data will be included.\nThis results in the table data being added to the definition when it is installed via the Development Package import from Git, or installed via the Marketplace (which installs from Git in the background).\n\nMore information about the Git CI/CD process is available within the Advanced course, within the Deployment Mastery chapter."
  },
  {
    "chapterName": "Data Management Fundamentals: Tables",
    "lessonTitle": "54833511-table-browser-form-viewer",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54833511-table-browser-form-viewer",
    "sourceType": "text",
    "content": "A form viewer is available within the Table Browser (23.10.3+), allowing you to view and edit individual line items within a dedicated dialog."
  },
  {
    "chapterName": "Introduction to the different ways to build apps (No-Code vs Low-Code vs Pro-Code)",
    "lessonTitle": "54833683-summary-of-progress-so-far",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54833683-summary-of-progress-so-far",
    "sourceType": "text",
    "content": "Summary of course progress so far:\n\n\nThe fundamentals of the platform have been introduced.\nYou understand that Development packages are used to organize all the components you create within the platform.\nYou know there are a range of 'Application Building Blocks' within the Marketplace to download, explore, and integrate across your platform.\n\nYou understand a Launchpad is a responsive Desktop and mobile-ready container, with Tile Groups and Tiles. Later in this course, you will learn how the addition of Roles enables different users to have different levels of access to these Tiles and Groups and the applications and integrations they utilize.\nYou have accessed some pre-made examples and created your own first simple Launchpad.\n\nYou understand what tables are, how to create them with the Table Definition tool, and how to view and edit the data with the Table Browser.\nYou understand that table records are arrays of objects, each object containing key-value pairs, where the key is in the table property name, and the value is the unique value for that row.\nYou know that local instances will be configured with a lightweight SQLite database layer by default - but for productive use, it is recommended to deploy a scalable separate database layer, and configure the platform to connect to this. This will be covered in the Expert training level.\n\n\n\n"
  },
  {
    "chapterName": "Introduction to the different ways to build apps (No-Code vs Low-Code vs Pro-Code)",
    "lessonTitle": "54834128-understanding-the-no-code-low-code-and-pro-code-concept",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54834128-understanding-the-no-code-low-code-and-pro-code-concept",
    "sourceType": "text",
    "content": "Next up it is recommended to read through this blog post:\n\nNo-Code, Low-Code & Pro-Code Tooling Integration Diagrams\nhttps://community.neptune-software.com/topics/neptune-dxp/blogs/no--code--low--code---pro--code--tooling--integration--d\n\nThis blog post introduces the next set of tools we will discover in this course - and how their output will feed into the Launchpad for end users to utilize:\n\nThe App Builder (No-Code Designer)\nThe Adaptive Framework (No-Code Designer)\nConnectors\nThe App Designer (Low-Code Designer)\nThe Script Editor (Pro-Code Editor)\n\nAdditional information about the Add-Ons mentioned in this blog post will be available in the Expert level of this course."
  },
  {
    "chapterName": "Introduction to the different ways to build apps (No-Code vs Low-Code vs Pro-Code)",
    "lessonTitle": "54834573-next-up",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54834573-next-up",
    "sourceType": "text",
    "content": "Over the next few chapters of the course, you will start building your own applications using the new tools you have just learned about. The focus will start with the no-code tools, which are optimized for designing and building the front-end (interfaces) of applications.\n\nThe App Builder - Released 2022 - Allows you to use drag and drop to assemble multi-screen applications, using different components. There are a number of handy features that will be covered in the dedicated chapter about this tool.\nCurrently, the App Builder allows you to add 'mock', or 'test' data, which is static and can be used to generate responsive Tables and Lists.\nThe apps built using this tool should be exported when they reach the end of their design process, to then be imported and integrated into your own instance of the platform.\n\nThe Adaptive Framework - Is data-driven and relies on Templates combined with a data source (connector) to create the front end of the apps. These applications work off live database tables."
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864367-app-builder-introduction",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54864367-app-builder-introduction",
    "sourceType": "text",
    "content": "Welcome to the App Builder - this is a unique tool as it is hosted and used within the Neptune Portal.\nYou can access it via the cockpit (opens in a new tab), or via this link:\nhttps://portal.neptune-software.com/app/appbuilder\nYou will need to login to the Neptune Portal to use the App Builder. Please register for an account if you have not already.\n\nThis chapter will be based on an existing comprehensive tutorial, available on YouTube.\nThe full video here is available as a reference, however, this chapter will focus only on the relevant parts for this stage of the eLearning course. The full video shows a full deployment process via the Marketplace, into your Open Edition instance.\n\nhttps://www.youtube.com/watch?v=MKGKVn6e6DE\n\n\n\nIt is important to understand that the Apps being built with the App Builder - use the same underlying components and functionality as the rest of the toolset within the platform. This means that the apps built here, are forward compatible with the App Designer. The same UI5 framework components are used."
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864573-building-the-functional-foundation",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864573-building-the-functional-foundation",
    "sourceType": "video",
    "content": "let's Get Started we'll kick things off by opening the portal as soon as you open up the portal you'll be able to see the app builder directly here within the developer tools you can create a new project or open an existing one straight from this interface the app builder is also available as a link within both the open and sap edition cockpits what's the open the app builder you'll be presented with your recently edited applications that you can jump straight back into you can open a full list of applications available or of course you can create a new one each application is associated with an account you can either choose to add your application to an account so then everyone else within the account can see it as well or you can choose to use your own sandbox which is your own private area within the app Builder here I'll make an application within my sandbox will select the tablet preview type and hit next step you can choose to start with a template straight from a data source or even from A Sketch that you can upload however for this example we'll start with the blank screen you can see all the screens of your app on the Left the main interface in the middle and all of your building blocks are available on the right hand side there are hundreds of building blocks available so feel free to look all the way through and see what suits your use case at the top is a search bar here we can search for an attendance card or of course we can select a filter and apply that against the list of building blocks to see all of the building blocks within a particular category you can hover over any of them to see a Live preview of what it would look like within the interface here let's add the attendance card into our app by just dragging and dropping it they'll be a popover suggesting the most popular next components that you may want to add in feel free to give these ago you can always undo at the top of the interface we'll add one more building block hear a news card and then we'll select our attendance card and duplicate it now if we clear our search and clear our filter we can search for a layout building blocks these are great for aligning content within our application free drag a horizontal box into our app we can then select our card and move it inside of the box let's do the same for the other one no I can see that they're both inside of this one layout container let's remove the static height of this container so it fits whatever is inside and now we can see on a larger screen size how that horizontal box is behaving we can then start to align our content within either to the end so that they're separated out or for example let's stick with space between we'll add one more horizontal box underneath and then we'll move our main news card inside before selecting the box remember it has a static height so let's remove that and then we can place the content to the centre of the box to move items around simply click and drag them it's easier to move multiple items when they live inside the same container you can click once to select an entire component and then after a second wait you can click again to select a component within it's then simple to adjust properties such as different styles or the text contained within a component is always handy to know that you can double click on a component to go to the parent let's change our buttons on the first card and then let's change the width hear of the second card how quickly speed through adding a few more building blocks to the application including an income card some contact details and then this task manager which I'll arranged to the end of the layout box so then in a smaller screen size everything will wrap and stack nicely you can also add a header to the page and then we can use the right click to bring back the recommendations and in this case we'll add a title in managing the images within your app builder application is easy any image component you can select and then choose the image property to bring up the media library Neptune provides some default images for you to use however you can always import your own into your own root folder then simply select it to replace the component image on the page you can always access the media library with the button on the toolbar here you can delete anything from the media library as well as being able to set page backgrounds"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864580-new-lessonintegrating-data-and-wizard-development",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864580-new-lessonintegrating-data-and-wizard-development",
    "sourceType": "video",
    "content": "back inside the app Builder we can hit the managed data button on the toolbar we can see that Neptune also provides some test data sets for you to utilise within each time you can see the actual data sets as well as all of the properties that are passed from that data set we can add our own custom test data either by manually pasting it or an importing from an Excel document in this case we'll create a new one manually we'll just give it a name and then we can paste into the data tab this will then be automatically passed so we can see all of the properties hear that we can utilise within our app Let's save it and then simply ticking the box will add it to our application we can then hit the next arrow here and actually begin to generate some interface components based on this data let's choose the generator table in a new screen here we just simply need to select the array within our data set to bind to the table and then we can automatically generate some components for the interface by just selecting which properties we want to create from here now that's been added to a second screen we can see the table here along with the connected data inside you can always change the connected data source by clicking this button and selecting any other test data associated with your app within each column we can see the bindings to the test data and then to the property you can also adjust these by clicking this binding button and selecting any other property in your test data with this all set up we can then jump into run mode we can see that this will then generate based on that test data a full table showing all of the data based on the bindings"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864717-buttons-and-events",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864717-buttons-and-events",
    "sourceType": "video",
    "content": "no we can jump back and forth between our two screens and we can even demonstrate how when you add a second screen to your app the navigation button will automatically be configured to send you back to the previous screen but we do want to set up a button to take us to our second screen so let's choose this button on the header and we have this go to Screen action where we can simply select the name of the screen we wish to navigate to and now that's going to be configured if we jump back into rum mode we can select this button and we'll be able to navigate to our page with the table and back to our homepage"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864724-sharing-options",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864724-sharing-options",
    "sourceType": "video",
    "content": "up on the top here we have all of our sharing options the Direct link will share a link directly to another person to edit your app builder application and the share button will generate a QR code which you can distribute or alternatively you can copy the link using the buttons on the header which will enable people to see a Live preview of the run mode of your application this preview will automatically capture heat map data and allow you to also capture user feedback"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864761-using-advanced-mode-in-app-builder",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864761-using-advanced-mode-in-app-builder",
    "sourceType": "video",
    "content": "within the top right of the app builder as well we have the advanced mode switch if you switch this on you'll have access to all of the basic components which are used to create the building blocks and you'll also have visibility of the component tree on the left-hand side of the application you can select any of these components to highlight them within your application"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864772-app-settings-moving-from-sandbox-to-account",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864772-app-settings-moving-from-sandbox-to-account",
    "sourceType": "video",
    "content": "also up here you can find your application settings as well as the ability to export your app to the open edition or the SAP edition as a far which you can then import if we select app settings will be able to switch our application from our sandbox to one of our assigned accounts by running through this change wizard we can choose to move or copy the application along with choosing what we wish to do with the test data associated with this app in this case will create a new copy inside of our main account"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864801-exporting-the-app-to-a-file-to-import-into-the-app-designer",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864801-exporting-the-app-to-a-file-to-import-into-the-app-designer",
    "sourceType": "video",
    "content": "once you've finished developing your application within the app builder it's time to export it to a file so then you can import it into the app designer within the platform simply select the settings button and press export to open edition this will then download the application as a file which we can import into the app designer"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864551-achievements",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54864551-achievements",
    "sourceType": "text",
    "content": "The App Builder has Achievements!\n\nUse this as a guide to help learn all the aspects of the tool. Each achievement has a built-in helper that shows you how to achieve it. Aim for 100%!"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54864832-explore-then-download",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54864832-explore-then-download",
    "sourceType": "text",
    "content": "Note: The App Builder doesn't follow the same update lifecycle as the Open Edition platform, since the App Builder is running within the DXP Portal. This means new functionality can be available next time you use the App Builder. Feel free to leave your own feedback for us, as it helps us improve the App Builder!\n\n\nFun fact:Â This feedback framework is available to download and use within your own applications, from the Marketplace!\n\n\n\n\nOnce you have finished exploring the capabilities of the App Builder, remember to export the app to an Open Edition file, as it will be used in the App Designer Pt1 chapter!"
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54865294-deeper-understanding-of-the-layouts-and-responsive-design-principle-wrap",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54865294-deeper-understanding-of-the-layouts-and-responsive-design-principle-wrap",
    "sourceType": "text",
    "content": "Remember to build your applications with their intended users in mind - will they only be used on a Mobile or Tablet, or Desktop, or all three scenarios?\n\nYou can easily change the layout of your application within the App Builder, to see how your components respond to different sizes and orientations.\n\n\n\n\nNot every interface component is optimised to fit on a smaller screen. Controlling how users navigate through your applications interface can help design different screens for different screen sizes. You can show or hide components depending on the size of the viewport too.\n\n\n\n\nA range of Layout components are available to help you organize components within your interface:\n\n\nIn particular, the Horizontal Box and Vertical box are the most commonly used.\n\nThese are standard HTML containers, and when understood, can be utilised to achieve most layouts. Here is a more complex example with nested containers:\n\n\n\n\n\nThese containers, along with other components such as Text, have a \"wrap\" property, which impacts their behavior when there is not enough room on the screen.\n\nThis a standard web development practice, where lots of information and examples are available, and the possibilities of combinations are nearly endless:\n\n\nMuch more detailed information and examples are available in the App Builder chapters of this course."
  },
  {
    "chapterName": "Creating Your First App: App BuilderÂ ",
    "lessonTitle": "54865858-headers-and-footers-bar-bar-content",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54865858-headers-and-footers-bar-bar-content",
    "sourceType": "text",
    "content": "There are pre-made building blocks for Header and Footer implementations.\n\nHeaders, subheaders and footers are sticky the page, so are always visible.\n\nIn advanced mode, you can find the \"Bar\" component, which functions as a Header, Sub Header or Footer component.\nWhen you drag and drop this component into your app, it will ask where you would like to aggregate it:\n\ncustomHeader will replace the default screen header so you can add your own components.\n\nWhen you continue to add more components to the bar, it will ask what position you wish to place it in:\n\n\n"
  },
  {
    "chapterName": "(Table) Connectors",
    "lessonTitle": "54835055-connectors-and-tables",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54835055-connectors-and-tables",
    "sourceType": "text",
    "content": "Familiarise yourself with the Connector tool Documentation:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/connectors.html\n\nTable connector setup\nA connector can be used to facilitate quick and easy communication with tables you have defined.\n\nIt is possible to generate a connector based on a table.\nWithin the Table Definition tool, select a table, click Edit, click Generate, then click Connector. You can use the default name, and assign a package.\nThis will then create the connector, and open the Connector tool to display it.\n\nYou can also create the connector manually within the Connector tool.\nSimply configure the 'Data Source' as Table, and select your table within the 'Table Definition'.\n\nConnectors can be used within the Adaptive Designer, and App Designer, to provide communication with the table, within the applications you build.\n\nBoth the Adaptive Designer and App Designer tools will be covered later in this foundation course.\n\nConnectors can be used for more purposes than just communicating with Tables.\nMore information about advanced use of the Connectors will be in the Advanced level of the course."
  },
  {
    "chapterName": "(Table) Connectors",
    "lessonTitle": "54835129-exercise-generate-a-connector",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54835129-exercise-generate-a-connector",
    "sourceType": "text",
    "content": "Exercise:\nGenerate a connector based on a table you have defined, by opening the Table Definition tool, and using the \"Generate\" feature, available when the table definition is in edit mode.\n\nThese will be used later in the course."
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835201-foreword",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54835201-foreword",
    "sourceType": "text",
    "content": "This chapter of the eLearning integrates an existing course dedicated to the Adaptive Framework - released in 2023.\nhttps://community.neptune-software.com/topics/planet-9/blogs/adaptive-framework-add-on\n\nThe cockpit and designer interface in the videos may be using an older theme, but the same underlying functionality is available."
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835463-promotional-overview-video",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54835463-promotional-overview-video",
    "sourceType": "text",
    "content": "https://www.youtube.com/watch?v=9MVEtnRieIQ\n\nYou can watch this short promotional video around the Adaptive Framework, to give yourself an idea of what the Adaptive Framework is, and what templates are available to use with it!Â \n\nA full introduction is coming up next."
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835475-introduction-presentation",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835475-introduction-presentation",
    "sourceType": "video",
    "content": "Neptune software currently supports two kinds of no code tools we have front end Focus tools allowing much more customisation of the interface and we have back-end data Focus tools which have less UI configuration and more focus on being able to interact with data the adaptive framework is part of the core of the open edition so it runs inside the cockpit this is unlike the app builder which is hosted and available within the Neptune portal the adaptive framework consists of two key components the adaptive designer and adaptive templates together they form the framework the adaptive designer allows you to create adaptive applications the adaptive designer combines adaptive templates and connectors these adapted templates a preconfigured adjustable application foundations and Neptune provides these connectors provide a reusable way to communicate with tables or scripts and you can configure these so together templates plus connectors = adaptive applications Neptune currently provides 4 key types of templates the most commonly used ones are the detail and list templates and these are great for showing a table of data and allowing easy editing of that data there's also the business intelligence and tile based templates for creating graphs and charts one connector can feed any number of adaptive applications so here we have our account data table going to one connector and disconnector then feeds both the list and the detail adaptive applications we can then reuse this connector to also talk to a tile adaptive app to show the underlying data in a chart the list and the detail apps are perfect to link together this is very easy to configure that allows you to click and item in the list to open that data within the detail app so why use the adaptive framework provides dragon drop configuration of applications with lots of customisable settings that can be turned on and off and what does adaptive mean in this context it means you can easily adapt the app to your needs by configuring and the end user can adapt during the runtime of the application so easy to set up filters searching grouping and with the adaptive the eye template it's easy to adjust different data showing in different visual formats a great use case is to create functional applications that work together quickly for managing data so creating updating and deleting records you can create these easy customisable analytical apps great for viewing data so creating tables dashboards and charts it's super fast to set up it reduces your development time so your time to value is minimised the adaptive framework integrates with the rest of the platform so adaptive apps run in the launch pad just like other low code apps so here we can see a launch pad with a low code app alongside two adaptive no code apps One running within the tile as a chart you can combine no code and low code apps so you can load adaptive apps into other loco apps you can also load loco apps into no code adaptive apps we'll have a look at this in the expert level of this no code training"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835510-adaptive-framework-setup-download-the-adaptive-framwork-applications-from-the-marketplace",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835510-adaptive-framework-setup-download-the-adaptive-framwork-applications-from-the-marketplace",
    "sourceType": "video",
    "content": "to get started with the adaptive framework course open the marketplace and you can either search for the adaptive framework templates here or you can open it if you can see it in the featured products simply hit install and then you can hit open package which will navigate you directly to the development package tool where you can see the artefacts that have been downloaded from the marketplace in this case you've downloaded 7 apps and these applications are the adaptive framework templates"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835584-1-list-app-with-multiselect-filter-and-date-formatting",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835584-1-list-app-with-multiselect-filter-and-date-formatting",
    "sourceType": "video",
    "content": "welcome to the foundation no code E-Learning where in this session we will build an employee's overview adaptive application I will show you how to download the pre-configured tables from the marketplace how to set up a connector to the table I will walk you through the process of building the adaptive app where I will showcase the multicellular filter as well as the date formatic in the cockpit we access the marketplace and open the E-Learning HR demo tables this building block provides you with all the information that you need as well as all the other items available in the marketplace we've got images in our case we can see how the tables looks like and in the about section we have some additional information about the item we click install and within seconds the Architects are available to use we can check that by accessing the development package tool and the tables that we have just installed are available great now let's move on to the second item in our list which is setting up a connector to a table to do so we search for the connector tool we click add we give the connector a name and on the data source tab we can select which table the connector will be pointed to ignore the second table because we will use it later in the course for now we want this connector to be set up to the E-Learning HR demo employees table we save display and the connector is ready to be used within the adaptive designer let's open the adaptive designer and create a new application we give it a name you learning HR employee list we select the template as you can see there are a few but we will cover them throughout the following videos for now we will use the planet adaptive list and in the data source we select the connector that we have just created we can save and we have all the properties of the table available on the bottom left we have input and output both sections having the same Fields you can use the fields from both sections since both can read and write data let's select the fuels that we want to display first name last name roll and higher date we direct them into the table and the fields are shown but no data is displayed this is because we need to update the app this can be done either by clicking the update button on the top right or from the settings we can enable the run at start which means the application will automatically refresh and load the data when the app is started and they run at Focus if the application is already open in a Launchpad but it is brought back as the currently in use app it will refresh the data now let's give the table a title employee a subtitle overview we can change the icon as well as the colour of the icon great we can now move on the third item in our list which is adding a multi select filter to do so we drag the role field under the filter and in the general section we change the type from input to multi select we save and now we can select multiple options and filter the employee list the last item for this session is date formatic at the moment the date format is not ideal for rating or displaying therefore to change its format we need to select the field and in the value section we select the formatter type that we want now the date is displayed in A more suitable format"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835586-2-edit-app",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835586-2-edit-app",
    "sourceType": "video",
    "content": "hi in today's session we will build an employee edit details adaptive application from the cockpit we open the adaptive designer we create a new application let's give it a name you learning HR employee edit we select the template which in our case is planet 9 adaptive edit we selected data source which is the connector that we used in the previous application and we press save being an idiot details application we will need all the fields from the table let's select them and drag them into the form press save great as you can see in the preview we have all the fields available now let's improve the layout of this form we select the form and we set the label span l and M 212 this configuration add spacing to the form and makes it look better in the settings we'll give the form a title on icon and we set a new colour for the icon the employee edit details adaptive application is built now in the following video we will connect the employee overview app to the employee edit details app that we just built to Showcase some more functionalities of the adaptive designer"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835590-3-combining-list-and-edit-apps-create-delete-export-import-and-rules-engine",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835590-3-combining-list-and-edit-apps-create-delete-export-import-and-rules-engine",
    "sourceType": "video",
    "content": "hi in today's session we will combine the two adaptive applications that we have built I will show you how to combine the two apps how to create new records as well as how to delete them I will cover the export import from Excel functionality and I will show you how to use the rules engine with the adaptive designer just jump into the cockpit and open the adaptive designer we open the employee list app we enable edit mode and now when we press on a list item in our case an employee we want to open the employee edit app where all the employee details will be displayed and can be edited in the settings under the item press event can make the configurations the type is Adaptive framework the target will be the employee edit app we will open the app in full screen but he also have the option to open the app in a dialogue or in a side panel we will leave the field mapping empty because the adaptive designer will use the ID as default we click use save and now when we select an employee the Edit app will open and will display all the employee details let's change the role we save and the list is automatically updated now let's move on to the second item from our list create and delete to create a new record in our case to add a new employee we need to enable create from the settings and now we have a new button on the top right of the app we use the same configuration on the press event of the button click use we save and now when we press on create we can add a new employee to the list let's fill in the form press save and the employee is added to the list no to delete the record we need to enable delete from the settings and we can delete records from the list please note that both create and delete actions are also reflected in the database table that being said we can now have a look at the export import from Excel to do that we need to enable export from the settings and the new button will become available on the top right of the app this button when pressed will export the data in a CSV file the same steps are applied when importing a CSV file we enable import and we can import a CSV file I've got a CSV file with some new employees let's import it now and as you can see the new employees have been imported and are reflected into the application the last item from today's session is using the rules engine with the adaptive designer let's open the rules engine tool the rules engine allows you to define Jason structured business rules in an easy to use no code UI this rules essentially take an input compare it against any number of conditions and return an output based on which conditions have been met let's have a new rule we give it a name we ignore the role for now under the interface tab we will add the department field because of the moment in the table departments are displayed as codes by defining the conditions we will convert the codes into department names we are the new group and now if department is equal to 100 then we want to display it and we will do the same for hr finance marketing and if the department feel these empty then we want to display on a sign we save display and now let's test one condition when the department is 100 Great the rule is found and the result is it let's use this row in the adaptive designer now we drag the department field into the table we save and at the moment we have the department codes let's apply the rule that we have just created we click on the department field undervalue we change the source to Rules engine and then we select the row that we have just created we save and now the department codes have been converted into readable department names"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835601-changing-one-of-the-inputs-to-a-date-picker",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835601-changing-one-of-the-inputs-to-a-date-picker",
    "sourceType": "video",
    "content": "it's also worth noting that each of the properties within your edit application has a input type you can change this type to reflect the data which correlates to the property so in this case we have a date time under our hire date and this makes sense to not be a text input in fact to be a date time picker or just a date picker if we don't need the time as well here we can see that changes within the application and now when creating a new employee you can simply select using the date picker rather than writing in the date manually"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835618-4-build-and-adaptive-tile-chart-and-add-it-to-the-launchpad",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835618-4-build-and-adaptive-tile-chart-and-add-it-to-the-launchpad",
    "sourceType": "video",
    "content": "hi in this session we will build a adaptive bar chart application in Google display it in a tile let's have a look at the end result we want a bar chart app displaying the roles of the employees as well as how many employees are in a specific role let's jump into the cockpit and open the adaptive designer we create a new app we give it a name a learning HR bar chart we will use the planet line adaptive tile chart template and we use the same connector as we used in the previous applications we save and now let's try the role filled into the chart we save in the chart has been automatically updated that's just the label under settings we increase the max number of items to 100 and save the chart a title roles let's increase the chart height to 280 and change the type to Bar received and the bar chart adaptive application is ready now let's create a tile group in a tile so we can add and display the app in the Launchpad we open the tile group click add we keep the tile group a name and the title Analytics we save and display now research for tile we click add give it a name and we change the type to adaptive framework since we want to display the app in the tile and of course we select the adaptive app that we have just built we save display and we move to the launch pad to add the tile group We select the HR Tower group and will add the analytics tile group inside therefore we will have both tile groups displayed on the same page then we add the bar chart tile which contains the adaptive application received display Android to see how the new tile looks like as you can see the adaptive app is displayed but the width of the tile is not ideal so let's adjust it we open the tile under layout you set the width to wide received display and refresh the Launchpad great tell the time looks much better and we can preview the roles and how many employees have that role"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835613-download-the-example-hr-launchpad",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54835613-download-the-example-hr-launchpad",
    "sourceType": "text",
    "content": "\n"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835598-5-launchpad-sidepanel-and-dynamic-title",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835598-5-launchpad-sidepanel-and-dynamic-title",
    "sourceType": "video",
    "content": "hi in this session I will show you how to run the adaptive apps that we have built into a Launchpad we will download the E-Learning Launchpad from the marketplace we will add the adaptive app to a tile and I will show you how the Edit app looks like when it is open inside panel with a dynamic title let's jump into the cockpit and open the marketplace we search for E-Learning we open the E-Learning HR demo Launchpad reinstall it and as we can see this product has a requirement to run this Launchpad we need the Neptune dxp open edition Launchpad so let's install this as well great no we open the Launchpad tool and access the HR demo Launchpad let's run it to see how it looks like as you can see this Launchpad is formed off one tile group which contains one tile let's set it the action of the tile so we can open the adaptive app that we have built we access the tile group we open the tile we go to Action we choose the type adaptive framework and then select the employee list adaptive app Let's save display and refresh the Launchpad now the tile can be opened and the employee overview app runs seamlessly but now let's see how the employee edit app looks like when opened in a side panel we access the adaptive designer and open the employee overview app in the item press event we change the how to open type from full screen to side panel and we also won the Edit details tab to dynamically display the name of the employee that will be selected we save and refreshed Launchpad now the Edit details app opens in a side panel and also dynamically displays the name of the selected employee"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835790-changing-one-of-the-inputs-to-a-lookup",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54835790-changing-one-of-the-inputs-to-a-lookup",
    "sourceType": "video",
    "content": "at this point we can come back to our edit application and change one of the input types the employment type so instead of just being a input but we need to then write the employment type based on the information within our table we can actually change this to a look up so we change the field type to be a single select lookup and then we need to define the data source for this lookup to be populated from in this case we can select our employee status table we can select the key field as the status number and the text field as the means this will then save in the database when we create a new record the key which is 1 2 or 3 but it will show in the interface the means which is full-time part-time or contractor if we save this and we check the drop down we can see that both of those values are here currently we can always hide the key field say it again and now just on the front end you only see the text values which makes it much easier to input the underlying ID"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835826-try-out-the-adaptive-framework-in-the-dxp-demo-system",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54835826-try-out-the-adaptive-framework-in-the-dxp-demo-system",
    "sourceType": "text",
    "content": "The entire Sales CRM demo is built using the Adaptive Framework!\n\nTry it out here:\n\nhttps://dxpdemo.neptune-software.cloud/launchpad/DXP#sales-CRM"
  },
  {
    "chapterName": "Adaptive Designer (and Rules Engine) Introduction",
    "lessonTitle": "54835906-install-the-crm-sales-operation-portal-demo-from-the-marketplace",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54835906-install-the-crm-sales-operation-portal-demo-from-the-marketplace",
    "sourceType": "text",
    "content": "Get hands on with the CRM Demo within your own instance!\n\n\n"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54836115-basics-of-the-app-designer",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54836115-basics-of-the-app-designer",
    "sourceType": "video",
    "content": "hello and welcome to this learning video during this session I will guide you through the app designer covering its basic functionality and will also explore a pre-built application together from the cockpit I will open the dxp marketplace and search for E-Learning I will select the E-Learning 2022 demo and install it once the installation is complete I will open the app designer and select the first application one create new equipment from the top part of the middle panel I will click on the play button and choose run in designer enabling the application to run within the panel then I will click on the edit button in the top bar of the app designer to switch the application to edit mode once you know this mode the same button can be used to switch the application back to display mode the top panel on the left represents the application 3 which contains all the components used in the application clicking on the app in the previous tab automatically selects the respective component within the tree making it easier to customise his properties the bottom panel on the left contains all the resources available for developing an application including sap opening i5 components bootstrap components hi charts and more this components can be dragged and dropped within the component tree above to develop your application you can search for a component using the search bar and then drag and drop it into the component tree when a component is selected the components we highlights areas in green where aggregation is permitted and in red where it is not the aggregation helper assist in developing the application by preventing components from being placed where it is not permitted for example you cannot drag and drop on input field inside the label or within another input field however you can place the input field inside a simple form where aggregation is permitted in the top right panel you have the option to rename components and the original sappy 5 name of the component is displayed let's break it down let's take us an example a simple form the original technical name is sub. UI dot form dot simpler form where sub is the namespace prefix used by sap Wi-Fi to avoid naming conflicts with other libraries UI indicates that this is a user interface related module layout specifies that this control belongs to the layout module of SVU i5 which deals with arranging and organising UI elements form is the specific control or class name indicating that this is a form controlled used for organising and structuring form elements and the simple form part of the name clarifies its purpose which is the facilitate the creation and layout of forms such as those used for data entry or display the same applies for an input component stop is the name space prefix for sappu i5 m stands for mobile indicating that this control is part of the mobile specific UI controls provided by sappy 5 and input is the specific control name indicating that this is an input control used for receiving user input in the bottom right panel all the attributes properties and events of each selected component are displayed and available for configuration for instance within a label component you can add text to prompt the user about the expected information to be entered in an input field you can set it's editable property to false preventing the entry or you can add a placeholder to guide the user on the expected input after finishing the configuration of any attributes properties or events of a component you will need to save and activate the application to save button stores all changes while the activate button activates the application displaying all changes within the preview panel you can easily change any of the properties within a few clicks and activate to preview the changes in the other designer right clicking on any component in a componentry will bring up a context menu with various options you can copy paste components easily delete them and multi select components to duplicate them components can be rearranged within the component tree by dragging and dropping additionally you can disable components which means they won't be rendered but will still be present in the componentry the episode of first two modes run mode which we've been using requires activation after making any changes to the application on the other hand build mode allows for instant preview of Visual changes made to the application for example I have a second tab with a simple application running in build mode here I can modify the title of the page and the change is immediately visible in the previous tab without the need to activate the application the main difference between run mode and build mode is that build mode renders UI changes without activation meaning functional changes to the application won't be applied until activation therefore you can use build mode when designing the user interface of the application and switch to run mode when starting to develop the functional side of the application finally within the application context menu you can open another application create a new application export or import an application or copy the application to copy an application click on copy within the dialogue specify a name for the application and click save then a copy of the application is available for you to use well done now you know the basics of the app designer see you in the next lessons where we will further explore the functionality of the app designer goodbye"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54836445-find-download-and-install-the-sample-applications",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54836445-find-download-and-install-the-sample-applications",
    "sourceType": "text",
    "content": "Visit the Marketplace, search for and install the 'UI5 Application Samples' product.\n\nÂ \n\nThis package contains 100+ examples of common components in use, each within its own independant application:\n\nThe value of having these samples installed in your own instance, is to enable you to easily reference them, by opening them and inspecting your desired component(s) running with several different property configurations.\n\nÂ \n\nFor example, you might want to implement a slider within your App. You can find and open the âSAMPLE_SLIDERâ sample application, which contains a range of the same UI5 Slider component configured with different properties. Such as with a label, or with steps, in this example:\n\nYou can then simply copy and paste the component (with its configured properties) into your own application to utilise.\n\nThis promotes reusability, and is encouraged throughout the development process â you should aim to re-use and reference examples where possible!\n\nÂ \n\nFor reference, the GitHub repo where the apps are stored is found here:Â https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-sampleapps\n\nMore information around GitHub CI/CD is available later in the course.\n\nÂ \n\nIt is worth highlighting the sample apps included in this package are also the same ones running within the Portal resources:\n\nhttps://portal.neptune-software.com/launchpad/portal#p9Sample-display\n\nÂ "
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54836549-building-your-first-new-app-with-common-components-using-navigation-events",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54836549-building-your-first-new-app-with-common-components-using-navigation-events",
    "sourceType": "video",
    "content": "hello and welcome to the sea learning video in this session I'll walk you through the process of building a simple application in the app designer using some common components from the cockpit open the app designer and press new to create a new application give it a name and save from the resources we drag and drop an app component and the page save activate and press run in designers to preview the changes now let's give this page of title on the properties of the page scroll down and locate the title where you can type the preferred title for this page and then press activate the preview the change to change the title position locate the title alignment property and set it to center no let's have a footer to the page again from the resources we drag and drop a bar component into the page and set its position to footer then we add a bar content to the filter and set its position to Middle so the content that we will add in this component will be displayed in the middle of the footer activate and the form page now has a footer let's continue by adding a form to the page from the resources with drag and drop a simple form component into the page followed by adding a label and an input field into the simple form an input field needs a label to provide context and guidance to users regarding the information expected to be entered in this case we set the text of the label to first name so the users will be expected to type their first name into the input field then we set the form editable property to true so the labels will be aligned within the four now let's rename the components to keep everything organised since we will be adding some more labels and input Fields which component has attributes properties and events or a combination of these when you click on them you will be presented with a popover offering additional information about the functionality of it additionally next to the components name the reason I can which redirects you to the documentation page of the component coming back to the application if we set the required property of the input to true and then activate the input field will be marked as a required you can make use of the placeholder to give hints on what data should be entered for example insert your first name activate and now you can preview the change now let's add another two fields to capture the age but this time I will duplicate the two fields and rename them to speed up development select the components right click and Press duplicate now rename them and adjust the text and placeholder activate and now we have a page with a form to capture the user's name and the age if you make a mistake for example I drag an input field into the form which I don't need you can easily revert this by using the undo button let's move on and add a submit button into the footer of the page we drag and drop a button from the resources into the middle content of the footer and rename it the button has the president which is fired when the user clicks it will make his of this event in a few moments but for now let's select an icon for this button give it a text to display and we can also select a type from the list activate and the button is available now this page is completed the next step is to use the submit button to navigate to another page to do so we drag a second page into the app and rename it to page success from the president of the bottom we select JavaScript and I will use the app.to and the name of the page that we want to navigate to which in our case is page success this enables the navigation to new page activate and now when the button is clicked the press event will be triggered and the app will navigate to the new page let's give this page a title page success and activate you can now go to the page success but there is no button to return to the first page to fix this just set the Shauna button property to true this property will render a back button on the top left of the page and then you can use the nav button press event to go back to the previous page with app back to page and the name of the page activate and then you can fill out the form press submit and you'll be taken to the next page with an easy way to go back to the first one well done you have built your first application in the app designer see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54836475-exercise-clear-the-form-on-submit",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54836475-exercise-clear-the-form-on-submit",
    "sourceType": "text",
    "content": "Time to test your knowledge.\n\nNotice when you add data to the input fields, and press 'Submit' to navigate to the next page - and then press back to return to the first page - the data remains in the Inputs.\nTo clear the data, add to the Submit buttons press event:\n\nInputFirstName.setValue(\"\")\nInputAge.setValue(\"\")\n\n\nThis sets the value to an empty string.\nNow activate and test the process again - and note the input fields are reset after submitting."
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54836613-selecting-the-correct-components-from-the-component-library",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54836613-selecting-the-correct-components-from-the-component-library",
    "sourceType": "text",
    "content": "Pay attention to the components you are selecting from the component tree!\n\nFor many components there are both the UI5 version, and the Bootstrap version available to use. Bootstrap components are covered later in the course. They have most of the same functionality as the UI5 component, however have some differences, including their styling.\n\n\nHighchart components, utilising the Highchart library, are also available and will be covered in a dedicated chapter later in the course."
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54836764-layout-components",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54836764-layout-components",
    "sourceType": "video",
    "content": "hello and welcome to the sea learning video in this session you will learn about the vertical and horizontal layout boxes what are they then how to use them in the development of applications from the app designer I will open the sample age box vs v box application within this application I've added a third tab featuring a custom list item this example will highlight the usage of layout boxes in a more complex scenario and we'll explore it in more detail shortly the first tab is formed of a v-bucks which contains three components a calendar the legend of the calendar and the list when components are added to the v-bucks they are displayed vertically by default this means that each component will be stacked on top of the other in a vertical layout when it comes to aligning the items within the vbox there are two main properties that can be used justify content which allows you to vertically align the content in the line items which allows you to horizontally align the content for example if I set the alarm items property to center and activate the content within the vbox will be horizontally centered the second tab is formed of an age box containing the same three components a calendar the legend of the calendar and the list when components are added to the age box they are displayed horizontally by default this means that each component will be positioned next to each other in a horizontal layout when it comes to aligning the items within the hbox the same two properties can be used but within the age of ox context the alliance items property allows you to vertical align the content and the justify content property allows you to horizontally align the content for example if I set the justify content property to center and activate the content within the age box will be horizontally centered moving on to the third tab we have a list with a custom list item which contains the combination of age boxes and V boxes which helps to align the components within the customised item as you can see in the preview from the previous settings I will enable outline UI 5 elements this settings outlines all the elements within the application and now we have a better view of all the components within the list item the least item is formed of a parent age box which contains two individual age boxes the Xbox on the left contains the product image and the v-bucks which contains the product description product number and a panel displaying more information about the product in this context the age box is used to display the image and the product information horizontally while the v-bucks is used to display the product information vertically this arrangement ensures a clear and organised layout for both the image and the details of the product the 8 box on the right side contains the v-bucks and an hbox within the age box the price amount and currency of the product are displayed horizontally this setup ensures a compact display of the products pricing details within the list item the layout boxes can serve various purposes for the line and components within applications whether it's for organising content or achieving specific layouts the age box and v-bucks are versatile components the best way to understand their capabilities is to experiment with them so feel free to give them a try see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54836919-responsive-design-principles",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54836919-responsive-design-principles",
    "sourceType": "text",
    "content": "Foundation eLearning â Responsive Design Principles\n\nÂ Â \n\nThis document describes the responsive design principles within the App Designer.\n\nTo showcase the responsive design principles, the SAMPLE_HBOXVSVBOX application from the UI5 Application Samples package has been used.Â \n\nÂ \n\nDownload the UI5 Application Samples from the Marketplace and open the SAMPLE_ HBOXVSVBOX application in the App Designer.Â \n\nÂ \n\nÂ \n\nÂ \n\nLetâs have a look at the more comprehensive example within the third tab of the application.\n\nSAMPLE_ HBOXVSVBOX â third tab\n\nÂ \n\nÂ \n\nYou can adjust the size of the view port to mimic the size of different screens when running the application.\n\nAdjust the view port\n\nÂ \n\nOne of the most important properties to consider when using layout boxes is the Wrap property.Â \n\nThe wrap property in layout boxes like HBox and VBox directly affects how the elements behave when the available space changes, which is crucial for responsiveness:\n\nWhen the wrap property is set to wrap, the items will wrap onto the next line or column as the container's size decreases, ensuring that all items remain visible and arranged even on smaller screens. This is ideal for creating responsive layouts.\n\nWhen the wrap property is set to NoWrap, the items will try to maintain their position in a single line or column. If there isn't enough space, they may overflow the container, potentially causing a horizontal scrollbar or cutting off content.\n\nÂ \n\nÂ \n\n\n\n\nÂ \n\nAnother property that aids when building responsive applications is the styleClassVisibility. This property allows you to dynamically control the visibility of the components within your application.\n\nThe styleClassVisibilityÂ has multiple options to choose from:\n\nsapUiHideOnDesktop: Hides the component on desktop devices.\nsapUiHideOnPhone: Hides the component on mobile devices.\nsapUiHideOnTablet: Hides the component on tablet devices.\nsapUiVisibleOnlyOnDesktop: Makes the component visible only on desktop devices.\nsapUiVisibleOnlyOnPhone: Makes the component visible only on mobile devices.\nsapUiVisibleOnlyOnTablet: Makes the component visible only on tablet devices.\nÂ \n\nIn the following example the HBox3, which contains the price information of the product, has the styleClassVisibility set to sapUiHideOnPhone, therefore the panel will be visible on Desktop and Tablet devices, but hidden on Mobile devices.\n\nstyleClassVisibility example\n\nÂ \n\nÂ \n\nÂ \n\nIt is important to consider the design of your interface, and to implement layout components to account for your different use cases. Most components are responsive by default, however when combining mutliple components, it is your responsibility to decide the behaviour of how these components should be arranged when the application runs on different devices and screen sizes.\n\nÂ "
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54836983-layout-revsion",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54836983-layout-revsion",
    "sourceType": "text",
    "content": "Layout Boxes â Revision\n\nÂ \n\nThis document offers additional insights into Layout boxes. Layout boxes in OpenUI5, such as HBox and VBox, essentially function as HTML <divs> designed for layout purposes within the application. They provide a structured way to organize and position UI elements.\n\nÂ \n\nHBox â Horizontal Box\n\nIf you wish to display content on the right side within an HBox, you can achieve this by setting the justifyContent property to âEndâ, as demonstrated in the figure below\n\nÂ \n\nÂ \n\nTo create space around the content within the HBox, you can set the justifyContent property to \"SpaceAround,\" as demonstrated in the figure below.\n\nÂ \n\nÂ \n\nÂ \n\nTo create space between the content within the HBox, you can set the justifyContent property to \"SpaceBetween,\" as demonstrated in the figure below.\n\nÂ Â \n\nÂ \n\nÂ \n\nTo center the content of the HBox, you can set the justifyContent property to âCenterâ, as seen in the figure below.Â \n\nÂ Â \n\nÂ \n\nVBox â Vertical Box\n\nThe height of a VBox in OpenUI5 adjusts automatically based on the number of components added to it. However, if you want the VBox to take up the full height of the page, you'll need to set the height property to 100%.\n\nIf you wish to display content on the bottom within an VBox, you can achieve this by setting the justifyContent property to âEndâ, as demonstrated in the figure below\n\nÂ \n\nÂ \n\nTo create space around the content within the VBox, you can set the justifyContent property to \"SpaceAround,\" as demonstrated in the figure below.\n\nÂ \n\nÂ \n\nTo create space between the content within the VBox, you can set the justifyContent property to \"SpaceBetween,\" as demonstrated in the figure below.\n\nÂ \n\nÂ \n\nTo center the content of the VBox, you can set the justifyContent property to âCenterâ, as seen in the figure below.Â \n\nÂ \n\nÂ Â \n\nÂ \n\nHBox and VBox: alignItems and justifyContentÂ \n\nÂ \n\nIn an HBox context, the alignItems property controls vertical alignment of content, while the justifyContent property controls horizontal alignment within the HBox.\n\nÂ \n\nIn a VBox context, the e alignItems property controls horizontal alignment of content, while the justifyContent property controls vertical alignment within the HBox.\n\nÂ \n\nEssentially, they are the same but just opposite!\n\nÂ \n\nÂ \n\n\n\n\nÂ \n\nApp Builder layout properties comparison\n\nÂ \n\nWithin the App Builder, the alignItems property of a VBox is referred to as \"Place content horizontally\", while the justifyContent property is referred to as \"Place content vertically\".\n\nWhereas in the context of an HBox, in the App Builder, the alignItems property is referred to as \"Place content vertically\", while the justifyContent property is referred to as \"Place content horizontally\".\n\nFor instance, in the example below, a VBox is used with alignItems set to center, which horizontally centers the content. The justifyContent is set to end, so the content is displayed at the bottom of the VBox. The outcome of these properties is the same in both the App Designer and App Builder as seen in the following figure.Â \n\nÂ \n\nÂ \n\nÂ "
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54838405-adding-bars-and-barcontents-to-an-application-add-basic-component-to-the-barcontents",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54838405-adding-bars-and-barcontents-to-an-application-add-basic-component-to-the-barcontents",
    "sourceType": "video",
    "content": "hello and welcome to the sea learning video in this session I will walk you through the process of adding custom headers and footers to your application from the cockpit open the app designer and press new to create a new application give it a name and save from the resources drag and drop on app component and the page give the page a title and align the title to the center save activate and press running designer to preview the changes again from the resources drag and drop a bark component into the page the bar component is designed to create stop or bottom bars for pages it offers a straightforward way to structure and display essential elements like titles buttons and other interactive items once dropped into the page it will prompt you to select the position the custom header is used to add a custom header to the page subheader is used for displaying additional information or controls below the main header add content is used when you want to dynamically add controls to the bar and the filter is used for adding a bar at the bottom of the page for now I will select the subheader position to highlight the difference between the subheader and the header of the page then add 3 bar content components to the subheader each one with a different position left middle and right this arrangement provides flexibility in designing the layout of the bar by placing components in the specific positions you can control where additional content appears within the bar save activate and now the page has a sub header I will continue by adding a menu button to the left corner of the bar and assign it and menu icon I will add a text component into the middle content of the bar and give it a text in the Nikon to the right content of the bar with the source set to an information icon save activate and now you can preview the changes the page now has two headers the standard header and the subheader that I added if I change the position of the bar from subheader to custom header and activate the custom header will replace the standard header of the page let's continue by adding a second bar component to the page but this time with this position is set to footer and again add three bar content components to the footer each one with a different position left middle and right then add the button to the left content of the footer and I will copy paste this button into the middle and right content as well now let's adjust the properties of this buttons to have a refresh button on the left a submit button in the middle and a next button on the right or the last button selector refresh icon and we set the text to refresh for the middle button set the text to submit and type to accept and for the right button set the text to Next and select the right arrow icon to display save activate and now you have a page with a custom header which contains the menu button on the left a text component in the middle and I can on the right and the footer which contains three buttons refresh submit and next well done now you know how to use custom headers and fitters in your application see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54838597-inspecting-the-developer-console-f12",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54838597-inspecting-the-developer-console-f12",
    "sourceType": "video",
    "content": "hello and welcome to the sea learning video in this session I'll walk you through the process of using the developer console to view Castle Largs and identify errors in your application from the cockpit open the app designer and press new to create a new application give it a name and save on the resources drug and drop an app component and a page give the page a title and align the title to center save activate and press run in designer to preview the changes again from the resources drag and drop a bark component into the page set its position to footer and within the filter drag and drop a bar content with its position set the middle therefore the content will be displayed in the middle of the footer in the middle content of the footer I will add a bottom and set the text to submit and type to accept save activate and now the page has a footer with a submit button in the middle in a few moments I will use the press event of this button to capture the first name of the user and console lock it but first I need a simple form with a label and input field to capture the first name of the user from the resources drag and drop a simple form into the page followed by adding a label and an input field into the form set the text of the label to first name and rename the input field to input first name then set the editable property of the form to true so the label will be aligned within the form activate and the page now has a form to capture the first name of the user we can now move on to capture the first name of the user locate the buttons press event and select JavaScript within the press event I will declare a variable called first name which is equal to the name of the input field not get text then I will cancel out the variable so we can capture the text from the input field and displayed within the developer console when the button is pressed save activate open the console log by pressing F12 on a Windows space machines or the function key and F12 on Mac OS now populate the input field press submit and immediately we can see in the developer console that we have an error the error message p dot get text is not a function is not very descriptive as it does not provide the variable name associated with the error this can make troubleshooting harder especially with complex logic making it challenging to identify the source of the error to fix this go to application settings and under the properties tab untick minify Source Code save activate and let's populate the input field again to see the difference now the error message points out that the input first name that get text is not a function so we know that the get text from the input field is causing an issue and that is because the input field does not have a text property instead it has a value to fix this we go back to the press event and swap the get text width get value save activate open the developer console and now when we populate the input field and press submit no error is thrown and the console log displays the value captured from the input field which is the first name of the user well done now you know how to use the developer console to identify errors in your application see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54839368-minify-source-code-related-error",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54839368-minify-source-code-related-error",
    "sourceType": "text",
    "content": "Uncaught (in promise) TypeError: e is undefined\n\n\nIf you see this error, you can untick \"Minify Source Code\" in the application settings, to view the true name of the variable.\n\nAfter changing the setting:"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54839945-message-toast-inform-end-users",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54839945-message-toast-inform-end-users",
    "sourceType": "video",
    "content": "hello and welcome to the Silverlink video in this session I will walk you through the process of informing and users when actions are performed using the message toast from the cockpit open the app designer and press new to create a new application give it a name and save in this video I will utilise the build mode to have a Live preview of the components added to the application click on the build mode button then from the resources drug and drop an app component and the page after adding the page give it a title and the line title to the center I will continue bad and get v-bucks into the page and the button give the button a text and set the type to emphasised in this example the v-bucks is utilised the center of the button in the middle of the page so within the properties of the view box adjust the height to 100% then set the justify content to center the vertically centered the button and set the alarm items property to center to horizontally Center the bottom now we can add the logic AND depressive end of the button to trigger the message toast and inform the user when the button is clicked on the press event of the button select JavaScript and right click to access the code snippets search for masters toast and you will have two options to choose from message toast all options where you can customise the duration with an other properties of the message toast and message those simple what is example I will use the message to Simple click on copy and adjust the text to inform the user that the button is clicked save activate and press running designer to test the logic that we added when the button is pressed a master's toes appears notifying the user that the button has been clicked it's essential to keep end users informed about actions within the application the message those can serve multiple purposes and can be utilised in various scenarios throughout your application logic for instance it can inform users of successful actions or alert them when an error occurs well done now you know how to use the message toast in an application to inform the user's when actions are performed see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840055-writing-good-error-messages",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54840055-writing-good-error-messages",
    "sourceType": "text",
    "content": "Writing good error messages can be the difference between a useable application, and something that confuses and frustrates end users.\n\nHere is some guidance on how to write a good error message for your users.\n\n\n\n\nÂ \n\n\n"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840078-searching-within-the-app-designer",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54840078-searching-within-the-app-designer",
    "sourceType": "text",
    "content": "As you start to build more comprehensive applications, searching for what you need within the App Designer becomes a vital skill. Here are a few of the search processes available:\n\nÂ \n\nÂ \n\nÂ \n\nOpen some example applications and test each of these search processes to become familiar with their capabilities!"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840151-app-builder-import-to-app-designer",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54840151-app-builder-import-to-app-designer",
    "sourceType": "text",
    "content": "Foundation eLearning â Import App Builder application in App Designer\n\nÂ \n\nÂ \n\nÂ \n\nÂ \n\nThis document describes the process of importing an App Builder application in the App Designer.Â \n\nÂ \n\nTo showcase this functionality, the âMy First App!â application from the Marketplace has been used, but you can also use the application built in the App Builder chapter.\n\nÂ \n\nDownload the âMy First App!â from the Marketplace and open the application in the App Designer.\n\nÂ \n\nÂ \n\nIf you've opted to use the application built in the App Builder chapter, click on the âExport to Open Editionâ button within the App Builder, and the application file will be downloaded. Â \n\nÂ \n\nÂ \n\nOnce the file has been downloaded, open the App Designer, click on \"New From File,\" and select the application file from your machine.\n\nÂ \n\nApp Designer - Import application from file\n\nÂ \n\nOnce you've opened the application in the App Designer or imported it from a file, the application will be available for editing in the App Designer.\n\nNote: The application imported into the App Designer remains unchanged, so it will look the same as it did in the App Builder.\n\nÂ \n\nApp Builder application in the App Designer\n\nÂ \n\nÂ \n\nÂ \n\nTest data\n\nThe import functionality also includes any test data assigned to your application within the App Builder. Bindings are preserved, and the data is added to the models of the components at runtime. Therefore, you can easily continue developing the application within the Low-Code environment of the App Designer. It is then possible to swap (disable) the static (hardcoded) test data and integrate an API to request the data at runtime.Â \n\nÂ \n\nMore information about Models and Bindings, along with API integration, is covered in the Foundation - App Designer Part 2 chapter.\n\nÂ \n\nApp Builder Test Data\n\nÂ \n\nAbove we can focus on two files that will be present within your imported App Builder application if you have assigned test data to it. The first is a MultiModel component called âTestDataâ, and the second is a JavaScript file, that runs when the application starts, that sets the data to the MultiModel âTestDataâ. You can see the JSON stored within the JavaScript file.\n\nAny components, such as the Table in the above example â that point to the model, will utilise their bindings to display the data, just as in âRun Modeâ within the App Builder.\n\nÂ \n\nConclusion\n\nÂ \n\nIn conclusion, the import functionality bridges the gap between the No-Code environment of the App Builder and the Low-Code environment of the App Designer. It enables you to design your application in the App Builder as per your requirements, then seamlessly import it into the App Designer to further enhance it with additional functionality, logic, APIs, server scripts, and more.\n\nÂ "
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840178-javascript-introduction",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54840178-javascript-introduction",
    "sourceType": "text",
    "content": "From here on, small sections of code will be implemented to perform a number of functional tasks within your application. From showing and hiding components to getting and setting data, everything should be simple and self-explanatory at this stage.\n\nIf you are familiar with JavaScript, great! If this is the first time you have seen code, don't worry - just follow along and see what patterns you can observe. You only need to know and understand a little to go a long way!\n\nJavaScript will be utilized more later in the course, in the Pro-Code tooling (Script Editor).\n\n\n\n\nYou can learn a lot very quickly about JavaScript by utilising resources online.\n\nhttps://www.w3schools.com/js/js_statements.asp\n\nFor example, here is a recommended site where you can click next to cycle through many topics to learn all of the basics around JavaScript if you are not familiar with it."
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840471-programatically-interacting-with-components",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54840471-programatically-interacting-with-components",
    "sourceType": "video",
    "content": "hello and welcome to this learning video in this session I will guide you through the process of interacting with components programmatically this includes retrieving user input and displaying it in a text component as well as setting titles visibilities and more for this example I've built a basic application consisting of a page with a simple form the form includes two labels and input field for collecting the user's first name and a text component to display the user's name at the bottom of the page there is a footer with a refresh button on the left and a submit button in the middle within the app designer all the properties of the components can be set programmatically for instance the page currently doesn't have a title or a title alignment so let's set these programmatically drug and drop a JavaScript file into the resources of your application within this file we can begin writing the logic whenever you start typing a context menu will pop up aiding you in selecting components functions and methods the title we first need to reference the name of the page which in our case is Paige. And then we will use the set title method inside the parenthesis and quotes we enter the title for the page the same process applies will setting the title alignment reference the name of the page dart set title alignment method in the position will be Center save activate and within the preview tab we can see that the logic has been applied and the page now has centered title now let's proceed by capturing the user's first name from the input and displaying it within the text preview component however when the application is activated it's a necessary to have the preview label and an empty text displayed on the screen so let's set the visibility of these two components to false and we will revert this in our logic when displaying the user's name activate and now within the JavaScript file define a function called summit in this function will declare a constant called first name which is equal to the value of the input field in our case input first name dot get value and this constant will contain the user's first name next set visibility of the label preview and text preview components to true this is done by referencing the component names and using the set visible method such as label preview dot set visible true and text preview not set visible true with a preview no visible we can display the user's name using the text preview component to do this reference the text preview component and use the set text method within the parenthesis and quotes type your name is + the constant first name which contains the user's first name then within the press event of the submit button we can call the submit function save activite and now when the user types their first name and presses the submit button the submit function is called dysfunction captures the user's name sets the preview components to be visible and displace the user's name to continue we will utilise the refresh button to reset the application to it's initial state within the press event of the refresh button we set the value of the input first name to an empty string to clear the input field following this we set the label previous visibility to false then set the text preview to an empty string and finally set its visibility to false as well next we can include a message toast to notify the user that form has been cleared to do this right click and choose code snippets the goat snippets are reusable blocks of code designed to accelerate the development process they save time by providing ready-made segments of code for common tasks such as for Loops switch cases 4 matters and more this helps developers streamline their workflow and the way writing code from scratch for frequently used functionalities now search for message toast and copy paste the simple message toes code then we modify the text to indicate the action save activate and now after the user's first name is displayed and refresh button is clicked the form is cleared returning the up to it's initial state great but what if we want to clear the form a few seconds after the submit button is clicked so the user doesn't need to click the refresh button to do so we go back to the JavaScript file and within the submit function we can open the code snippets and search for a timeout function then we'll paste this function into our code within the timeout function will reference the bottom refresh and use the dart fire press method this method will simulate the click of the refresh button event without requiring the user to manually click it finally we adjust the delay time to 3000 milliseconds which is equivalent to 3 seconds save activite and now after the submit button is pressed the bottom refresh is automatically triggered after 3 seconds using the fire press method within the timeout function this automates the form clearing process without requiring the user to manually click the refresh button well done now you know how to programmatically interact with components feel free to experiment other components yourself within the application see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840669-how-to-perform-good-data-validation",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54840669-how-to-perform-good-data-validation",
    "sourceType": "video",
    "content": "hello and welcome to the sea learning video in this session you will learn how to perform data validation in the app designer for this example I have used a simple application with a form with two labels and input Fields utilised in capturing the first and last name of the user and the submit button located in the footer of the page in the context of a forum such as the one presented in this example it is important to identify which Fields are required for the user to fill and then set the required property to true in this case since we aim to collect both the first name and last name of the user I will set the required property to true for both input Fields then I will drag and drop a JavaScript file into the resources of the application and in this file we can start writing the data validation logic I will begin by defining a function called submit form details and in this function I will use an if statement to check if the value of the input first name is an empty string if the value is empty I will use the set value state method to set the values state of the input field to error causing it to be highlighted in red to enhance the user experience and offer more insight into any issues let's have a message to provide more details right-click select go snippets search for Master's toes and copy the message though simple code snippet then I will adjust the message to display please provide a first name then I will use a return statement which means if the first name is not provided the function stops it's execution at this point and does not proceed further I will copy paste the if statement and swap the name of the input first name with the inputs last name so perform the same check on the last name as well then after the checks have been made I will use another message those to inform the user that the form has been successfully submitted finally we can now call the submit form details function from the press event of the submit button save activate unless the logic we can see that both input Fields are required but let's just type the first name and press submit instantly we are informed that we need to provide a last name and the input field is highlighted in red it's activated again to bring the app back to its initial state and now I will fill in both input fields and press submit this time we're informed that the form was successfully submitted now let's clear the form after the Chuck's have been done and the form is submitted to do so we go back to the JavaScript file and define a second function called clear form within this function I will set the value of the two input fields to an empty string and then call the function of the checks have been made save activate and now on the submit button is pressed and the checks have been made the form is cleared here is a comparison of two possible methods of data validation on the left we have client side data validation as demonstrated in this example here validation occurs within the JavaScript file on the client side if an error is detected the user is promptly informed on the right side we have server side data validation where a service script containing validation logic such as checking for existing email addresses is called via an API after the server side validation any errors are returned to the user in both brooches if the data passes validation without errors the process continues and the data is submitted data validation is important because it ensures that the collected information meets the required guidelines which helps in maintaining accurate data and prevents any potential errors feel free to experiment with data validation on various components throughout your application development process to ensure that the collected information meets your requirements see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840807-understanding-the-different-application-types",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54840807-understanding-the-different-application-types",
    "sourceType": "text",
    "content": "Application, Adaptive Template, Building Block, Launchpad, Custom Component.\nThese flags exist for Applications created or installed within the platform.\n\nAt this stage, it is only important to understand the difference between an application of type: Application and type: Building Block.\n\nApplication is the default type and represents the main place for your logic. It is what your users access and use.\n\nBuilding Block type is fundamentally the same as a normal application - however, it will be visible within the right-click menu of the App Designer component tree. These types of applications are designed to be \"copied\" into other apps, to help speed up the development process.\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/app-designer-application-building-blocks.html\n\nAdaptive Template type applications are used exclusively by the Adaptive Designer. These are complex and follow a specific structure. It is recommended to just use the Neptune provided templates downloaded from the Marketplace.\n\nLaunchpadÂ type applications follow a similar approach - these are specifically used within the Launchpad tool when creating a launchpad. The 'planet9_launchpad_standard' provided by Neptune, which is downloaded from the Marketplace, is the one recommended for use. It is important to know the launchpad is just like a normal application under the hood.\n\nCustom Components will be covered in more detail in the Expert level of the course.\n\n\n"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840882-fiori-design-guidelines",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54840882-fiori-design-guidelines",
    "sourceType": "text",
    "content": "Links to these resources are included in the previous lessons, it is important to understand the importance of learning about the guidelines for implementation of the components you are utilizing within your applications. There are best-case components for different scenarios - you should account for optimizing the experience for your end users, using your applications, based on the guidelines here:\n\nhttps://experience.sap.com/fiori-design-web/"
  },
  {
    "chapterName": "App Designer Pt.1 Introduction",
    "lessonTitle": "54840956-autogenerated-versions",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54840956-autogenerated-versions",
    "sourceType": "text",
    "content": "Foundation eLearning â Generate Application VersionsÂ \n\nÂ \n\nÂ \n\nÂ \n\nThis document describes the process of generating versions of your application in the App Designer. This feature offers you the ability to save previous versions of your application, allowing you to effectively track changes and maintain a history of your appâs previous iterations.\n\nIn the App Designer, you have the option to manually generate versions or enable the autogenerated versions of your application.\n\nÂ \n\nÂ \n\nManual Version GenerationÂ \n\nÂ \n\nTo manually create versions of your application, click on the Application, then choose \"Generate Version\" from the dropdown menu. In the description field of the dialog, provide a name for the version and click on \"Create.\"\n\nÂ \n\nÂ \n\nÂ \n\nTo preview the generated version click on the Version Management from the left side menu of the App Designer. Within this tab, the right pane displays the previous version of the application, while the left pane displays the current version (V1).\n\nÂ \n\nÂ \n\nVersion Management also provides the option to export the previous version of the application by clicking the \"Export\" button.\n\nÂ \n\nAutogenerated VersionsÂ \n\nÂ \n\nAutogenerated versions allow you to generate application versions automatically upon activation. To enable this feature, go to the application settings, navigate to the properties tab, and enable \"Autogenerated Versions.\" You can then specify the number of versions to keep in history upon activation.\n\nÂ \n\nÂ \n\nÂ \n\nOnce Autogenerated Versions is enabled, the App Designer will generate a new version of the application every time it is activated. These versions can be previewed within the Version Management tab. In this tab, the right pane shows the previous version of the application, while the left pane displays the current version. The right panel contains all the autogenerated versions of the application, each of which can be exported using the \"Export\" button.\n\nÂ \n\nÂ \n\nÂ \n\nÂ \n\nRevert Changes to applications\n\nÂ \n\nTo revert changes made to an application, you have two options. You can export a previous version and then import it back into the App Designer, restoring the application to its earlier state. Alternatively, in Neptune DXP â Open Edition LTS23, the undo button history is now preserved even after saving or activating the application. This means you can simply use the undo button to revert the app to its previous version without the need to export and import.\n\nÂ \n\n\n"
  },
  {
    "chapterName": "Naia Introduction",
    "lessonTitle": "54841152-what-who-is-naia",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54841152-what-who-is-naia",
    "sourceType": "text",
    "content": "Naia is the Neptune AI Assistant. It is embedded within version 23 onwards. It is designed to help with many tasks across the platform. You can open the Naia chat window within the Cockpit, App Designer, Script Editor, and more. Naia buttons are also integrated into several tools within the Cockpit, to help generate code, data, and color schemes.\n\nYou can chat with Naia, asking questions about the platform, both technically and at a high level. Naia has access to data from the Neptune Documentation, a history of community blog posts and solutions from our Support portal, that it uses to help formulate answers.\n\n\nNaia can help you create applications with several automations, that can generate UI components and charts - or help you configure or change components and their properties more easily.\nGenerating or refining code is simple with Naia.\nNaia can also help you across the Cockpit, by generating email templates for example!\n\nWe recommend reading through the documentation page for Naia.\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/naia.html\n\nJust like the App Builder, Naia is hosted within the DXP Portal - but runs within your instance. This means that each time you load your instance there can be new functionality!"
  },
  {
    "chapterName": "Naia Introduction",
    "lessonTitle": "54841162-naia-blog",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54841162-naia-blog",
    "sourceType": "text",
    "content": "This blog post is designed to help you understand more about Naia, with more screenshots, videos, and examples of it in use:\n\nhttps://community.neptune-software.com/topics/news/blogs/introducing-naia\n\nGive it read over, and particularly understand the \"What can Naia do?\" button - which provides access to the built-in documentation within Naia - along with the change log - so you can take full advantage of the capabilities!\n\nNaia can be particularly powerful when combined with the right prompts. Always ensure you are as detailed as possible with the questions or prompts you provide."
  },
  {
    "chapterName": "Naia Introduction",
    "lessonTitle": "54841179-disclaimer",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54841179-disclaimer",
    "sourceType": "text",
    "content": "Like most current AI models, there are possibilities for responses to contain inaccuracies. Naia might for example, suggest using tools or components that don't exist. Naia can make mistakes. Consider checking important information."
  },
  {
    "chapterName": "API Designer Introduction",
    "lessonTitle": "54841230-what-are-apis",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54841230-what-are-apis",
    "sourceType": "text",
    "content": "Before you start this module,Â it'sÂ important that you have a basic understanding of APIs, with a particular focus on REST APIs.Â \n\nÂ \n\nWhat are APIs?Â \n\nÂ \n\nAn API (Application Programming Interface) is a set of rules that allows different software applications to communicate with each other. It acts like a bridge between a website or app and a user, enabling them to send and receive information. For example, when you search for a TV on a web shop,Â you'reÂ using an API to tell the server whatÂ you'reÂ looking for. The server then uses the API to understand your request, find the information about TVs that match your search, and send this information back to you.Â \n\nÂ \n\nÂ \n\nÂ \n\nÂ \n\nWhen you browse through a web shop and search for a specific product, such as a TV, you areÂ essentially requestingÂ from the server. The server processes your request and returns a response based on the parameters of your request, which could include TVs made from brands A and B,Â withÂ a size of 32 inches, and so on.Â You can also make requests without parameters, to get all theÂ TVâsÂ for example!Â \n\nÂ \n\nAPIs: Not the Server or DatabaseÂ \n\nÂ \n\nIt'sÂ important to remember that an API is not the database that stores the information, nor is it the server that houses the database. Instead, think of an API as a messenger that takes your request, tells the server, waits for the server's response, and then brings that response back to you.Â \n\nÂ \n\nIntroduction to REST APIsÂ \n\nÂ \n\nAmong theÂ various typesÂ of APIs, such as SOAP,Â GraphQL, and WebSocket, REST APIs are the most common. They work over the internet using HTTP requests to perform operations on data. These operations include creating, reading, updating, andÂ deletingÂ recordsâa set often referred to as CRUD.Â Â \nÂ \nREST APIs use specific HTTP methods to handle these operationsÂ (more are available, ):Â \n\nÂ \n\nÂ  Â  GET: Retrieves data from the server. Like when you read information about a product on a website.Â \n\nÂ  Â  POST: Sends data to the server to createÂ a new item. Like when you sign up on a website, creating a new user profile.Â \n\nÂ  Â  PUT: Updates existing data on the server.Â It'sÂ like editing your profile information.Â \n\nÂ  Â  DELETE: Removes data from the server.Â LikeÂ deletingÂ a post or a comment.Â \nÂ \n\nWhy REST APIs Are Special: Stateless CommunicationÂ \n\nÂ \n\nOne key principle of REST APIs is statelessness. This means that every request from your application to the server must include all the information the server needs to understand and fulfill the request. The serverÂ doesn'tÂ remember anything fromÂ previousÂ requests. This makes the system more reliable and scalable because the serverÂ doesn'tÂ need to keep track of any state or session information.Â \n\nÂ \n\nIn SummaryÂ \n\nÂ \n\nUnderstanding APIs, especially REST APIs, is crucial for developing applications that interact with the web. APIs are the communication layer that enables you to perform actions on the web, like searching for products, signing up for services, or posting messages. By mastering APIs, youÂ openÂ a world of possibilities for what your applications can do.Â "
  },
  {
    "chapterName": "API Designer Introduction",
    "lessonTitle": "54863684-api-designer-introduction-configuring-apis-understanding-operations-and-definitions-generating-a-table-api",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54863684-api-designer-introduction-configuring-apis-understanding-operations-and-definitions-generating-a-table-api",
    "sourceType": "video",
    "content": "hello everyone and welcome back to the Learning in this lesson will introduce the API designer walk you through the tool and demonstrate how to set up a table based API the API designer is used for defining rest apis that can be integrated into your applications and service scripts it plays a crucial role in establishing connections with your internal data resources external resources and other services it is a keto you will use frequently when defining an API you have three main types to choose from external table definition and server script external apis are used to connect with web services outside of Neptune dxp table definition apis are used for accessing and managing tables defined by the table definition tool and servers Group apis provide a way to interact with your server scripts in essence table definition apis handle internal tables while external piss manage interactions with external resources let's now see how to use a tool once we press add will be navigated to the main settings of an API in API format we can select the format and name we can name our API in group we can assign the group to connectivity group which is a way of grouping apis in development package we can assign the API to development package you can add the description to the API which will provide to developers essential documentation you can also specify version this will help you manage changes and track a probability and by enabling trace you'll be able to monitor your API through the API trace store the rest will be covered in a more advanced topic and let's continue exploring essential parts of the API designer for this reason we'll start by creating a table definition API later we'll dive into more difficult topics in the advanced and expert modules for this reason will select the type table definition click import press that will definition and select the table save and display and we have here our API created there's also a quick way to do this explain what operations and definitions are in the operation tab you can establish methods for interacting with your resource you can add multiple operations with different methods headers and parameters for table definition apis the tool automatically generates these for you however for other API types you will need to define these operations from scratch now let's move to the definitions tab and clarify what definitions are definitions are Jason objects that can be utilised in the request and response body of an operation there are quite useful since they provide developers with a clear understanding of what each method requires as a payload and what each method Returns additionally using a definition enables you to utilise convenient functions in the Script editor and in the app designer such as wizards data models data code snippets and more essentially the speed up your development processes again for table definition apis the tool automatically generates these objects however for other API types you'll need to define these objects from scratch and lastly to fully understand how definitions and operations work together let's view this API setup will start with the get operation in the request tab we can see that we have fire parameters that will allow us to query in any way we want our internal table we can create responses for each status code and define response headers for each response we can also add a response body and select the definition in this case the definition that we're selecting is employees if we head over to the definitions tab we can see the structure of the return body in the post operation there is one parameter and a body the body is employees which is the same definition as we showed before in this case there's only one parameter since the post operation will update a given entity based on the parameter in the response tab we have two responses if everything is successful will get this party Returned if we fail will get this party Returned and if we had again to the definition Saab and go to error we can see that this body will return a status and a message and that's it now you know the basics of the API designer and how to set up a table definition API"
  },
  {
    "chapterName": "API Designer Introduction",
    "lessonTitle": "54864014-api-testing-using-the-platform-tools-api-client-and-swagger-ui",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864014-api-testing-using-the-platform-tools-api-client-and-swagger-ui",
    "sourceType": "video",
    "content": "hello and welcome back to the Learning in this video will introduce you tools meant for testing apis and by the end of the video you learn how to conveniently test your API before you use them in other areas let's start with the API client once you open the tool you will see a list of all apis with a respective operations let's select a get operation of a table definition API as we can see we start in the request tab and we're presented with the Endpoint parameters and headers in this tab we can modify add or remove both parameters and headers if you head back to the API designer you will see that the operation setup is reflected in the API client this means that if you add a request body and additional parameter or a header it will be available in the API client as we can see the main tab has changed as quickly reset the API now let's click send to trigger the API since we did not include any parameters the results we get are all entries of the table we can confirm this by opening the table browser and selecting the corresponding table now let's execute a straightforward query if we enter retrieve all entries with a specific age and display only the name an ID here's what we do we return to the request tab then in the word parameter we indicate the field for age along with the desired value in the select parameter we list the fields we want to obtain from the table in this case name an ID if we had back to the table browser and select our table will notice that the correct entry has been Returned if you want to preserve the changes made in the request tab consider creating a variant this allows you to reuse your modifications when never needed for a given operation now let's explore another API testing tool the swagger UI similar to the API client we use swagger to test our apis here we presented with the list of all apis when we select the specific API we can view its operations the base URL with its swagger config all definitions headers and parameters note that this tool is also available within the app designer it assists in testing the API you wish to use before integrating it into your application that's it for this lesson see you next time"
  },
  {
    "chapterName": "API Designer Introduction",
    "lessonTitle": "54864169-configure-an-external-api",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864169-configure-an-external-api",
    "sourceType": "video",
    "content": "hello welcome back to the E-Learning in this lesson you will learn how to set up an external API create operations and definitions we explain what operations and definitions are in the previous lesson so make sure you have completed that lesson before continuing with this one now let's Create the external API click on add on type select external and for the Endpoint we will have to specify the URL in this example we'll use the Star Wars API which does not require an API key this API offers a few get operations I will copy the API routes and paste it in the Endpoint without the last slash and I will create in the operation Saab to operations and paste the Paths now click on save and the name of course analysis API in the API client I'll select the first method present and as we can see with accountant an error let's open up the console and investigator issue it seems that we have encountered some Chords issues these errors are cured because browsers restrict Direct request between different domains due to security roles known as the same Origin policy to access resources from another domain like the Star Wars API without violating the same Origin policy you need to use a server side proxy the proxy x like a Middleman foreign request from your client side code to the remote server and relaying responses back this way the proxy enables cross the main communication whilst thinking to the browser security restrictions in our case we have to use the platforms proxy and all we have to do is enable proxy if we had back to the API in the main settings if we scroll down we'll find enable proxy prevent cores and add API authentication let's enable this click save and display let's head back to the API client I'll close an update and select the first method click send and as we can see the API now worked not that everything is working let's create a definition for this operation I'll copy the response and create a new definition I'll paste the object head imports and as we can see the API designer has generated the structure for us let's do the same thing for the other operation lastly we had a niche operation it's definition in the response who select definition as the type and choose a definition this is the operation planets thus will select the planet definition and will do the same thing for the other method and that's it now you know how to define an external API and create definitions"
  },
  {
    "chapterName": "API Designer Introduction",
    "lessonTitle": "54864200-comparing-a-table-and-external-api-url",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54864200-comparing-a-table-and-external-api-url",
    "sourceType": "text",
    "content": "Table Definition and External APIs\n\nTable Definition and External APIs serve similar purposes, both operating under REST API principles. However, Table Definition APIs enable you to create, update, list, and delete your internal data (tables generated from the Table Definition tool). On the other hand, external APIs facilitate connections to external resources such as weather APIs, stock market APIs, and others.\n\nÂ \n\nIt's important to note that you can develop an external API to interact with your internal tables. However, this process requires specifying endpoints, parameters, definitions, and more. This is precisely why the Table Definition API tool generates these elements for you when selected.\n\nHere we can see how the endpoint for a Table API is configured automatically, running against the domain of the environment, with the endpoints using the table name. Compared to an external API, which is configured manually:\n\nÂ \n\nÂ "
  },
  {
    "chapterName": "API Designer Introduction",
    "lessonTitle": "54864316-api-inspecting-using-the-developer-tools",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54864316-api-inspecting-using-the-developer-tools",
    "sourceType": "video",
    "content": "hi and welcome back to the E-Learning in this video we'll revisit the API client and explore testing apis while observing the network and utilising the developer console tools as we interact with the apis using the API client it's crucial to understand how resources are processed and how data flows back and forth between our application and the server additionally you'll need to learn and feel comfortable with the developer console since it is essential for debugging network inspection and other tasks let's start by viewing Our Data we have a table containing some employee information we've set up an API for this table so let's head to the API client and perform some queries will select the get method as we can see the parameters are also reflected in the request tab of this operation so let's open the developer tools go to the network and click send we're presenting with some tabs here but will only explain the essentials in the header tab we can see the method the URL the response and the request headers the headers serve information helping clients and servers communicate and process the data effectively and the request tab you can view the data that is being sent with the operation in our case the body and in the response you can view what the server will return as we can see this operation returned the whole table let's now say that we want to fetch the name and the ID based on a specific age will add the following parameters if we expect the network again we'll see the parameter has been added at the end of the URL and in the response tab the fields that are Returned Are name an ID knowledge use the put operation to create a new entry on the table and expect again the network there's no need to pass in the id the created at created by updated at and updated by values since the server will fill in that information for us we click send and in the request tab we can see the body that we provided and the response will see the body that the method returns when the status is 200 and that's it with a developer tools now you have a better understanding of how requests are processed and displayed in the technical way from the browser thanks for watching and see you in the next lesson"
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54841277-introduction-to-pt2",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54841277-introduction-to-pt2",
    "sourceType": "text",
    "content": "Over the next chapter, you will learn more about integrating and displaying data within applications.Â \n\nYou will learn how to manipulate and save data, work with APIs, and store data within models.Â \n\nThe more confident and optimized you are with the data flow within your applications, the better they will perform, the easier they will be to use and they will be simpler to develop, maintain and improve.\n\nStay committed to watching all the content and following along with the examples. Once you have learned all the foundational parts of the App Designer, you can begin to create fully featured applications for a variety of use cases."
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54841620-api-integration-displaying-table-data-via-api-using-the-wizard",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54841620-api-integration-displaying-table-data-via-api-using-the-wizard",
    "sourceType": "video",
    "content": "hello and welcome to this learning video in this session I will show you how to integrate an API in your application and display the data in a table using the wizard in this example we have a table containing various products each with four properties product name description serial number and quantity I've created an API based on this table called products allowing us to integrate it into our application we can now open the app designer and create a new application give it a name and press save drug and drop a map component in a page into the componentry give the page a title products table and set the title alignment to center save activate and Run the app in designer to preview the changes next will have the table to the page drag and drop a table component from the resources onto the page then activates tablespoon lists are array of objects meaning that tables and lists which are often used to organise and store data can be thought of as a collection of objects each element or entry in a table or list is an object with its own set of attributes whereas the forms which are used to collect user input can be thought of as objects after that dragon drop a rest API component from the resources of the application will then connect the rest API component to the get operation of the product API followed by setting the API response to the table then set the model source of the table to the API definition as you can see the source shows all the properties from the table now we can use the wizard to generate the columns for the table right click on the table find the wizard option and choose whether the generate fills in edit mode as input Fields or display mode as text components for this example I will use the display option since I want to display the products within the table next in the Wizard dialog choose the field you wish to display in the table for this example I will select the product name and serial number clicked create then save and activate the changes in addition to automatically generated columns for the table the wizard also creates the necessary bindings this means that each field selected in the Wizard dialog will have a component bound to that specific property for instance the product name text component is bound to the product name while the serial number component is bound to the product serial number you will see that the table and columns are generated but currently there is no data to display the result is we need to set the innit load property of the API to online this setting will trigger the API after the page is fully initiated ensuring that the data is loaded into the table save activate and now the table is populated with all the products using the API well done now you know how to integrate an API and use the wizard in an application see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54841722-creating-and-displaying-data-in-a-form-using-the-wizard-and-binding-context",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54841722-creating-and-displaying-data-in-a-form-using-the-wizard-and-binding-context",
    "sourceType": "video",
    "content": "hello and welcome to DC learning video in this session I will show you how to get the Binding context from a table and display the data in a form using the wizard I will open the app designer and select the application that we worked on in the previous video the aim is to click on a product from the table in the navigate to a second page where all the product details will be displayed within a form switch the application to edit mode and run it in designer from the resources drug and drop a page component in the application then I will rename the first page to page product and the second page to product details I will also give the second page title then set the title alignment to center next I'll drag and drop a simple form into the second page and set its model source to the API definition this will allow us to use the wizard to generate the necessary Fields right click on the simple form locate the Wizard and select insert fields in display since we want to display the additional product information select the product name description serial number then quantity then press create and The Wizard generated the labels and text components as well as all the necessary bindings next will enable the rows of the table to be clickable allowing us to perform an action when each row is clicked to do so we set the time property of the column list item to active the type active is used to indicate that the item is interactive allowing us to perform a custom action when the item is clicked activate the changes then now all the items within the table are interactive with this setup we can now write the logic within the press event of the columnist item first we need to get the Binding context to get a binding context right click open the code snippets search for contact and then copy paste the first three lines of code from the get binding context into the press event this code retrieves the Binding context of the event source in our case a clicked item in the table it then allows you to get the value of a specific field from the context or to obtain the entire data model associated with the clicked item in the table I will delete the second part of the code since we want to get the entire model and then using the model simple form dot set data we will set the entire model of the clicked item to the model of the simple form finally we can use the app page product details to navigate to the product details page save activate and now when an item from the table is clicked the application will navigate to the second page for a form displays all the relevant details of the selected product to complete the flow of the application with set the show nav button of the product details page to true and within the nav button press event we use the app back to page to navigate back to the products page save an activate the changes the application Now features an interactive data process allowing the user to click on the product from the table navigate to preview the details of the product and easily return to the products page well done now you know how to get the Binding context from a table display the data in a form using the Wizard and create a data process see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54841748-api-definitions-integration-with-the-app-designer",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54841748-api-definitions-integration-with-the-app-designer",
    "sourceType": "text",
    "content": "Understanding the importance of definitions within the App Designer context.\n\nÂ \n\nThis diagram higlights the Defintion Properties within an API, in the API Designer. It links to the right, where within the App Designer, the Wizard generation tool (within the right-click context menu) is used.\n\nThe Tables configured âModel Sourceâ or âModel Pathâ, can choose any operations of any APIs configured within the application\nÂ \n\nEG:\n\n\nThis then enables the wizard to access the properties associated with that operation, so it can then generate the required components and bindings automatically.\n\nÂ \n\nÂ "
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54841969-highlight-the-full-binding-data-flow",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54841969-highlight-the-full-binding-data-flow",
    "sourceType": "text",
    "content": "Here we can see the full data binding flow. It is similar to the Wizard generation process, which creates both the components and bindings automatically.\n\nIt highlights a table APIâs definition. This API definition has been assigned to an API component within the App Designer.\n\nA List component has then utilised the API operation as its Model Source, and within the List is a ObjectListItem, which is bound to one of the properties from the definition - {assigned_for_checking}\n\nThe API has its response body defined â so can be configured within the API component to set the data to the model of the List. This then populates the list with data when the API is called."
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54842188-revision-apis-in-the-application-inspecting-the-network-data",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54842188-revision-apis-in-the-application-inspecting-the-network-data",
    "sourceType": "video",
    "content": "now let's Learn about the developer tools and the network log which is available to help you understand that API requests being made within the browser since the application is running within the browser context we can inspect it with the developer tools here we can use an example application which has some API calls in already here I have two apis that are triggered when my application starts this one triggers on the internet load so we'll run when the page is loaded for the first time and on its success event it will call the second API which retrieves the data pressing F12 opens the developer tools and you can select the network tab at the top here you can see the console if we activate we can see a number of requests are made by the API designer and then finally we can see the two requests that I've added into my app first is the calculate days until check API Endpoint and seconds is to get equipment API Endpoint we can see the order that they're called in the size of the request this one's very small and this one has more data we can see the request and the response body here as well and in the response body we can see the data which is populating our list it's an array of objects each object can be expanded and you can see all of the data as it matches with the bindings in the list here it's easy to see the status of the API request 200 is ok and 400 is an error it's very useful to check the responses of arid apis as often they include information about what's gone wrong the two events for the API a triggered when there's either a success or error from the API success is anything that starts with the number 2 and error is anything that starts with the number 4 so 200 in this case triggers are message toast which tells us the equipment list is updated it's also possible to run the application and inspect it in this context as well if we refresh the page we can see all the API requests that are required to generate the application bring in the required libraries and then here at the end are the two API calls"
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54842213-highlighting-a-common-mistake-understanding-the-underlying-data-format-of-your-response-object-vs-array-response",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54842213-highlighting-a-common-mistake-understanding-the-underlying-data-format-of-your-response-object-vs-array-response",
    "sourceType": "video",
    "content": "now let's have a look at a common mistake which can happen when configuring your API definition we can use an example application in this case with a list that shows an array of objects there are two apis here this one triggers when the app is loaded and unsuccess will trigger this this API pulls the data and populates the list this is the API equipment with the get operation this is a table based API that was generated automatically we can see the get operation here in the API designer and the response is an array with the definition equipment which matches the properties in our table if we edit this and change the response body to an object but we use the same definition if we save revisit our application and reload you'll see the response appears to be here but the bindings are not correct this is because this model is now attempting to apply a single object to the list so it's just one item within our array this means each list item here is being generated based on each individual property within the table since lists and tables expect an array as their response you may encounter this issue when the response is set to an object you can simply swap the response body definition to an array so then the application will know that it expects a number of objects with all these properties reloading the application shows all the bindings showing the correct data has now each object is represented by a line not each property"
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54842288-api-ajax-response-events",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54842288-api-ajax-response-events",
    "sourceType": "text",
    "content": "The AjaxSuccess and AjaxError events are available for every API within your App Designer.\nThey are used for running JavaScript logic when the API completes.\nSuccess events are triggered when a 2xx response codes are received.\nError events are triggered when 4xx response codes are received.\n\nIt is possible to handle different success or error situations within each respective event.\n\n\n\nThis is covered in the Advanced - Data Models, Bindings & Responses chapter of this course."
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54842470-models-and-bindings",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54842470-models-and-bindings",
    "sourceType": "text",
    "content": "Models are based on API definitions, utilizing their definition properties to handle bindings â but can also just be âGenericâ - which just lacks the binding metadata.\n\nA model must be configured with one of these two sources to hold data or be interacted with programmatically.\n\nÂ \n\nYou have already been working with models!\n\nModels are present on most components, and there are specific model components too.\n\nWhen the wizard creates a List or a Table, the model is set automatically to the List or Table component. Other examples are Pages and Panels which have their model source configuration, and so their own model, and can store data.\n\nThe model gives the component the ability to store data, plus the context of the properties of the dataset.\n\nÂ \n\nFor any data stored within a component, the children components of that parent can utilize the data with bindings.\n\nÂ \n\nUnderstanding a MultiModel, ModelArray, and ModelObject\n\nThese are centralized containers for data within your app, so data doesn't have to live within List or Table, or another component.\n\n\n\n\nAll three a very similar. They are called âneptune.mode.arrayâ, âneptune.model.objectâ & âneptune.modelâ, and are all underling a UI JSON component:\nhttps://openui5.hana.ondemand.com/api/sap.ui.model.json.JSONModel\n\nThe intended use is to store Arrays of data in the ModelArray, a single object at a time in the ModelObject and the MultiModel can handle nested data.\n\nÂ \n\nInteracting with models â Model Data Object\n\nÂ In any JavaScript editor, right-click and you will get JavaScript helpers. Â \n\nFor Model Data objects all methods are documented as comments.\n\nYou can easily find read, update, and delete methods.\nÂ \n\n\nÂ \n\nGeneric Data Model bindings will be covered in more detail in Advanced - Bindings, Responses & Data Models"
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54842618-editing-updating-and-saving-data-via-a-form-api",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54842618-editing-updating-and-saving-data-via-a-form-api",
    "sourceType": "video",
    "content": "hello and welcome to desi learning video in this session I will show you how to update a table record from an application using an API I will use the data integration application and the same API that we have used in the previous videos switch the app to edit mode and run it in designer currently the application is getting the data from the table using an API and displays the additional information about a selected product within a second page in this session we want to edit the probability and update the record in the table using an API first within the product details page we need to replace the text components within the form with input fields to do so I will delete the current components within the form and use the wizard but this time I will insert the fields in edit mode select the fields and press create then I will set the editable property of the form to true so the labels will be aligned with the input Fields within the 4 activate and now all the product details can be edited next I will drag and drop a bar content into the product details page and set its position to footer followed by a bar content with its position set the middle now that the page has a footer I can drag and drop a button which will be used to update the product details give it a name and set this type to accept activate to preview the changes I will now rename the existing API to rest API get products which is used to get the data from the table then I will drag and drop another API rename it to rest API update product and connect it to the Post operation of the product API so we can post the new product details now we can drag and drop a JavaScript file and start writing the logic I will start by defining a function called update product details and within this function I will create an empty object which will store the updated product information then the final data dot I'd will retrieve the product ID from the model of the simple form I will then use the final data dot product name which is the corresponding property name in the table and assign it the value of the product name input field the same logic is applied to the description serial number and quantity next I will create an options object with the data properties set to final data the options will be used as the payload for the API call to update the product details finally we call the API rest update product details and passing the options activate and within the press event of the bottom we can call the update product details function to trigger the logic save activate a list of the logic open the first product and let's edit the product name press the update details button navigate back to the products page and activate the app as you can see the product name has been successfully updated now let's go step further and enhance the user experience to inform the user about the success event and automatically update the table when the user navigates back to the product page wise the Ajax success event of the update product API using the message dose from the code snippets I will notify the user that the product details have been successfully updated therefore when the API call is successful the user will be informed to a master's toast to automatically reflect the changes within the products table within the nav button press event of the product details page before the navigation I will call the get products API so it will retrieve the records again and update the table with the latest changes save activate and now when any of the product details are changed the user is informed and the table reflects the latest update of the product well done now you know how to update a table record from an application using an API see you in the next lesson goodbye"
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54842688-connectors-in-the-app-designer",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54842688-connectors-in-the-app-designer",
    "sourceType": "text",
    "content": "Connectors can be used within the App Designer too. There is a dedicated Connector component that can be assigned to a configured connector.Â \n\nThis blog post highlights the details of setting this up:\n\nhttps://community.neptune-software.com/topics/planet-9/blogs/neptune--d-x-p----open--edition--connectors-in-the--app-"
  },
  {
    "chapterName": "App Designer Pt.2 Integrate and validate data",
    "lessonTitle": "54842713-top-tip-looping-through-a-form",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54842713-top-tip-looping-through-a-form",
    "sourceType": "text",
    "content": "Looping through a formÂ \n\nTo loop through all input fields on a form and set a specific value without specifying the input field names, you can use the following code snippet:Â \n\nletÂ simpleFormContentÂ =Â simpleForm.getContent();Â \nfor (let a = 0; a <Â simpleFormContent.length; a++) {Â \nÂ  Â  if (simpleFormContent[a].getValue) {Â \nÂ  Â  Â  Â  console.log(simpleFormContent[a].getValue());Â \nÂ  Â  Â  Â  //Â simpleFormContent[a].setValue(\"new value\");Â \nÂ  Â  }Â \n}Â \nÂ \n\nIn this code snippet, we first retrieve the content of theÂ simpleFormÂ using theÂ getContent() method. This will give us an array-like objectÂ containingÂ all the elements within the form.Â \n\nWe then use a for loop to iterate over each element in theÂ simpleFormContentÂ array. Within the loop, we check if the current element has aÂ getValue() method. This is to ensure that we are only considering input fields.Â \n\nIf the current element has aÂ getValue() method, we can retrieve its value usingÂ getValue() and perform any necessary logic based on the value. In the example code, we simply log the value to the console usingÂ console.log().Â \n\nYou can uncomment theÂ simpleFormContent[a].setValue(\"new value\") line and replace \"new value\" with the desired value to set the input field value programmatically.Â \n\nBy using this approach, you can loop through all input fields on a form without explicitly specifying their names, making the solution more flexible as the input field names may change over time.Â \n\nÂ "
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54843138-introduction-to-the-script-editor-and-javascript",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54843138-introduction-to-the-script-editor-and-javascript",
    "sourceType": "text",
    "content": "\nThe Script Editor in Neptune DXP Open Edition is a powerful tool for creating server-side scripts.\nThis is a Pro-Code editor, with drag-and-drop capabilities.\n\nIt allows you to write JavaScript or TypesScript code, add resources to scripts, give direct access to tables, NPM Modules, and APIs, use automatically generated code snippets, and benefit from AI assistance. It's a handy tool for extending Neptune's functionality, with self-contained logic running on the Server, rather than within Applications on users' devices.\n\nNot familiar with JavaScript or TypeScript?\nIt is recommended at this point to spend time becoming familiar with Javascript.\n\nWhy Study JavaScript?\nJavaScript is one of the 3 languages all web developers must learn:\n\nÂ  Â 1. HTML to define the content of web pages\nNeptune handles the creation of the HTML structure of your Applications!\nÂ  Â 2. CSS to specify the layout of web pages\nNeptune allows you to write custom CSS styles on top of your Applications!\nÂ  Â 3. JavaScript to program the behavior of web pages\nNeptune helps you by generating automatically or providing standard code where possible.\n\nNeptune recommended resources:\nW3 Schools provides detailed comprehensive documentation for all of JavaScript functionalities - however does also focuses on how to \"traditionally\" implement them in the browser - not all of this knowledge is required, as Neptune handles the execution of Server Scripts on the server side.\nhttps://www.w3schools.com/js/\n\nOther video tutorials are available:\nhttps://www.youtube.com/watch?v=BKxLrQYQ_2I\n\nThe more confident you are with JavaScript, the more empowered you will be within the Script Editor tool. You do not need to know a lot, to do a lot. Remember Neptune has drag-and-drop capabilities and Code Snippets that enable you to create logic, without coding everything from scratch.\n\nFamiliarise yourself with the Script Editor tool Documentation:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/script-editor.html\n\nSciprts are organised by being grouped into Projects, within the Script Editor. You can view one project at a time. It is possible to set the script to be Global, so logic can be re-used across other scripts, even in different projects. Global scripts are covered later in the course.\n\nIt is easy to trigger scripts to run as Jobs (sequences of scripts) on schedules, or on demand via API calls."
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54843143-server-scripts-setup",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54843143-server-scripts-setup",
    "sourceType": "video",
    "content": "let's start by opening up the Script editor within the cockpit this will open it in a new tab in your browser here you'll be able to see all of the projects to search for projects and filter them down to your own filter by any packages and of course to create a new project here we'll start by calling it my first project you should also assign your package at this stage here we have the Script editor interface in the top right you can search through our documentation you can open to The Script editor documentation and you can adjust the layout of the interface components here you can toggle to stack or to have side by side the two panels on the left everything is fully adjustable within the interface so you can adjust it to your specific screen size and you can toggle the console to show and hide on the left you can see your project and the scripts it contains right click and press new scripts to add a new scripts you can then choose whether you want it to be a JavaScript or a typescript language you've created your scripts you'll see it in the middle of the interface you can right click the scripts to put it back into display mode and as well as change any properties of the Script such as it's language it's name or it's description if we right click and place the Script into display mode you won't be able to edit it so always ensure that you're an edit mode here if we paste in an example function in Javascript we can then right click to run this function you'll then see the output of the function on the right hand side in the console so here we can see the sum of the numbers from 1 to 10 is 55 you can also run the script from the right click menu on the left-hand side of the interface let's add another script to our project this one will be to check for odd and even numbers you can switch between any open scripts with the tabs here you can add comments to any scripts with two forward slashes and to save the Script at any time simply right click within the Script interface and you'll see the saved message at the bottom of the screen let's add another function in here as you can see this one includes a full loop we can run this one and it will print 10 times to the console whether the number is odd or even let's play both of our scripts back into display mode and add a new script except this time let's change the language to typescript this is to show that typescript and JavaScript files can run alongside each other within the same project if you put the scripts and display mode you can see the type let's paste in a typescript function and we can right click and run this in just the same way as JavaScript"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54843146-server-scripts-resources",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54843146-server-scripts-resources",
    "sourceType": "video",
    "content": "let's add another script to a project this one will utilise the resources you can close all the open scripts with this button and simply select the Script that you want to open again on the left-hand side of the interface you can see all the resources available to include within your scripts is include the tables that have been defined within your system we can drag and drop the table onto a script click the drop down to view the table properties and you can also right-click the table to have a look at the data within the Script editor interface if we right-click within our script we can access the code snippets there are lots of useful code snippets available from standard JavaScript functions to specific functions for the Open edition have a look around for anything you might find useful and this example will be playing with the entities code snippets a range of code snippets exist here for different operations there are basic ones which utilise internal open edition functions here you can see an example but for this example let's use an advanced code snippet to select the data from our equipment table we can simply highlight the Kobe one and press copy to add it into our script here we can see the code snippet is customised for our resource so entities dot equipment and equipment is the name of our table this code snippet comes with a wear clause which we can comment out and then we can just run this script in order to see the output will console log The Entity here we can see the full response from our table if we adjust our function we can take one of the IDS of our records to return only one specific record in this case we'll uncommon the where clause within our query and will swap the ID which defaults to 1 to the ID of our record this needs to be a string so we'll just add the quotes and then if we run the same script again will receive an array with a single object which matches the ID within our wear clause"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54843452-advanced-table-functions-typeorm-integration",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54843452-advanced-table-functions-typeorm-integration",
    "sourceType": "text",
    "content": "TypeORM integration\n\nNeptune DXP â Open Edition uses TypeORM, which is an Object-Relational Mapping (ORM) tool used to create a \"bridge\" between object-oriented programs and relational databases. Â \n\nWhen Tables are added as resources to Scripts, code snippets are automatically generated to enable you to quickly interact with them via the TypeORM syntax.\n\nUnder 'entities' -> 'advanced' you can find the code snippets that utilise the TypeORM library.\n\nLink to TypeORM documentation: https://typeorm.io/\n\nYou will likely mainly be working with the QueryBuilder functionality:\nhttps://typeorm.io/select-query-builder\n\nThis then creates the structure:\n\nentities.[tableName].createQueryBuilder()\n\nfollowed by a method, such as .select or .delete\n\n\n\n\nHere we can see the similarities between an automatically generated code snippet for a table resource, compared to the code within the TypeORM documentation:\n\n\n"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54843595-basic-internal-table-functions",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54843595-basic-internal-table-functions",
    "sourceType": "text",
    "content": "Remember: 'entities' is referring to the database tables associated with the currently selected script.\n\nWithin the 'entities' -> 'basic' code snippets, you can find a range of other ways of communicating with the table resources associated with your script.\n\n\nThese code snippets provide the following structure:\n\"entities.[tableName]\" followed by the method, such as .create or .delete\n\nThis is utilizing the platform's built-in logic to complete the operation, compared to the TypeORM integration as seen previously, which utilizes the library functionality.\n\nUltimately, there is no rule as to which entity operations are best to use - have a look at what is available and choose what you are familiar with creating and maintaining!"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54843685-script-logging-to-the-system-logs",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54843685-script-logging-to-the-system-logs",
    "sourceType": "text",
    "content": "Understanding Logging Â \n\nIt is possible to log information from a Server Script to the System Logs. This is useful for when you need to see information within the script context, but you are not running the script directly within the Script Editor where you have the console and can use console.log to see your data.\n\nExamples of this could include when the script is running as a Job or is triggered by a Workflow or API. These scenarios will be covered later in the course. (Note: Console logs are recorded when running as a job, within the Job Log tool, however, best practice is to utilize the log.XXXX statements.)\n\nSimply use \"log.\" followed by the level of log you wish to assign.\nIt is up to you to decide based on the context which level you should use.\nÂ  Â  log.info(\"info message\");\nÂ  Â  log.error(\"error message\");\nÂ  Â  log.warn(\"warning message\");\nÂ  Â  log.verbose(\"verbose message\");\nÂ  Â  log.debug(\"debug message\");\nÂ  Â  log.crit(\"critical message\");\nÂ  Â  log.silly(\"silly message\");\n\nRemember you can find these methods within the Code Snippets, just search for \"log\" in the cockpit.\n\n\nWithin the System Log tool, you can see the logs for each day within the \"Server Script\" menu item on the left:\n\n"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859377-use-cases-for-server-scripts",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859377-use-cases-for-server-scripts",
    "sourceType": "text",
    "content": "When should I use a Server Script?\nIt is common to use APIs to communicate with server scripts from applications you build. You can pass data into scripts, to effect the processing logic, and choose what information to return, along with a success or error status. Unless specified, if a script completes without error it will be \"successful\" as code 200 Â if there is an issue, an error will occur and will be returned via the API as code 400.\n\nServer Scripts are also excellent for sensitive data processing. For example - you can retrieve data from a number of sources, compare and/or calculate before returning a response - without any of the sensitive data being sent to the client for processing. Server Scripts run on the Server.\n\nFor user-specific operations. Scripts have a \"req.user\" property, which identifies the authenticated user attempting to communicate with the script. This can be used, for example to only access and return information for the user who is making the request to the script. This applies to scripts when being run within the Script Editor context, or when being called via API.\n\nFor process-heavy tasks. Server Scripts utilize the power of the server and can run asynchronously, meaning large complex calculations or requests can run separately from users' devices, making them more performant."
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859385-find-search-and-replace",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54859385-find-search-and-replace",
    "sourceType": "video",
    "content": "now let's Learn about the search and replace functionality if we put our script into edit mode and click the binoculars on the left menu it opens the search and replace panel here you can search for a specific term highlight them within your script and replace it with another term pressing enter move the replace term into the search term so then you can see the updated records within your list please note that the search and replace only works within the context of your current project it's worth noting that the replace functionality only applies to scripts which are currently in edit mode so here multiple records were found across two scripts within this project however since only one is an edit mode when I apply you will only change within this script using control or command f it's possible to search within your single current open script as well you can match case you can match a whole word or you can use advanced rejects searches here"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859420-global-search",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54859420-global-search",
    "sourceType": "video",
    "content": "we can now learn about the global search functionality this allows you to find script content across all of your service scripts across all of your projects here I search a part number and you can see the project and the name of the Script clicking this button opens a preview of The Script and clicking this button takes you to the Script so you can edit it"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859426-right-click-context-menu",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859426-right-click-context-menu",
    "sourceType": "text",
    "content": "If we have a more detailed look at the right click context menu, there are a few other features you might find useful when using the Script Editor.\n\n\"Split Horrizontally\" and \"Split Vertically\" allow you to have multiple scripts open at the same time within your one Script Editor context.\n\n\n\nCheck the \"Command Palette\" menu item, which opens a panel with more advanced features that can be useful."
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859430-naia",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859430-naia",
    "sourceType": "text",
    "content": "Remember to utilise Naia within the Script Editor! Here it is best to ask Naia about code - you can ask it to generate examples for your use cases, or refactor exisiting code (you need to copy and paste the code into the chat window).\n\nRemember Naia doesn't have context of your scripts within the Script Editor, nor does it know what resources are available within your instance."
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859517-exercise-a-look-at-a-example-scripts",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859517-exercise-a-look-at-a-example-scripts",
    "sourceType": "text",
    "content": "Within the 'eLearning 2022 Demo' package available within the Marketplace, is a Script Project called 'EquipmentCheckupScripts' and a script called 'Calculate days_until_check'.\nYou can run this script and view its logs in the console. It updates data within the 'inspections' table.\n\nNow look at the 'CreateInspectionStats' script.\nNote that it performs a count on three status proeprties, and assignes \"result = inspection_ct\".\n\n\nAny data set to the 'result' key word within your script, will be returned when the script is called via API."
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859520-understanding-the-result-variable",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859520-understanding-the-result-variable",
    "sourceType": "text",
    "content": "You can understand the 'result' vairable by reading the code snippet. You can observe other properties you can set as part of the result.\n\nÂ \n\nresult.data = \"Server script response data\"; This line assigns a string (\"Server script response data\") to the data property of the result object. The data property is intended to hold the actual content or data you want to return to the client. In a real scenario, this might be a JSON object, HTML content, or any other data format depending on the application's requirements.\n\nÂ \n\nThe snippet comments shows that you can also set additional properties on the result object to further customize the response. These are not explicitly set in the provided code but are mentioned as possibilities:\n\nstatusCodeÂ is typically used to set the HTTP status code of the response. Common status codes include 200 for a successful request, 404 for not found, 500 for a server error, etc.\n\ncontentTypeÂ specifies the MIME type of the response data, indicating to the client how the data should be interpreted or processed. Common content types include application/json for JSON data, text/html for HTML content, etc.\n\nfilenameÂ might be used when the response is intended to prompt the client to download a file, specifying the name of the file for download.\n\nheadersÂ would allow you to set any additional HTTP headers needed for the response, such as caching controls, content encoding, etc.\n\nÂ \n\nÂ \n\nNote -\n\nresult.data = XYZ; modifies or adds the data property on the existing result object without affecting its other properties.\nresult = { data: XYZ }; creates a new object with only the data property and assigns it to result, replacing any existing object and its properties.\n\nSo, the first method is used to update or add to an existing object, while the second method resets the object to only contain the data property.\n\nÂ "
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859543-script-editor-understanding-erorrs-and-using-naia-to-fix-them",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54859543-script-editor-understanding-erorrs-and-using-naia-to-fix-them",
    "sourceType": "video",
    "content": "here we can see a service script that's being used within a workflow if we scroll down we can see everything looks ok but if you look closely you can see there are a few errors with this section is errors are highlighted with red boxes Harry on the right hand side you can also see the underlines of the errors within the code you can identify these errors and fix them yourself or you can ask Naya to help if you see this error copy the code open now and ask what's wrong as you can see now highlights a couple of issues with the code we have a semicolon at the end of our line which shouldn't be there and we have a comma instead of a colon within the rest of our object we can copy the code to replace it in this case we can ignore the module import suggestion as that is already declared at the top of the Script"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859547-what-are-node-package-modules-npm-how-do-they-relate-to-server-scripts",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859547-what-are-node-package-modules-npm-how-do-they-relate-to-server-scripts",
    "sourceType": "text",
    "content": "Node Package Modules (NPM) are a collection of JavaScript libraries and tools that can be easily installed and managed using the Node Package Manager (npm). NPM modules are reusable code packages that provide specific functionality, such as date parsing, file handling, or API integration.\n\nIn the context of Server Scripts in Neptune DXP, NPM modules can be used to extend the functionality of your server-side scripts. You can import and utilize these modules within your scripts to leverage their capabilities. For example, you can use the moment.js module for date parsing or the axios module for making HTTP requests.\n\nTo use NPM modules in your Server Scripts, you need to install them first. In Neptune DXP, you can install NPM modules directly from the Cockpit within the 'NPM Modules' tool."
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859560-configure-npm-custom-setting-path",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859560-configure-npm-custom-setting-path",
    "sourceType": "text",
    "content": "As stated within the installation guide:\nTo be able to install and use NPM modules in the Open Edition, you have to make sure that NPM is installed\non your machine.\nhttps://www.npmjs.com/get-npm\n\nIf you attempt to install an NPM module within the 'NPM Modules' tool, without configuring the path - you will see an error:\n\n\nWithin the platforms Custom Settings, you can define the path for the NPM modules to be installed:\n\nAfter configuring the path, you need to refresh the browser.\nYou can then search for, inspect, and install NPM modules directly into the platform. These can then be referenced within Server Scripts.\n\nFor more informations see here:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/npm_add.html"
  },
  {
    "chapterName": "Script Editor Introduction",
    "lessonTitle": "54859564-npm-module-integration-example",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859564-npm-module-integration-example",
    "sourceType": "text",
    "content": "\nAs well as being able to use any custom installed NPM module, the platform ships with a set of internally installed NPM modules, ready to use.\n\nWithin the 'eLearning 2022 Demo' product package (download from the Marketplace) you can find the 'EquipmentCheckup' scripts project, which contains a script 'Calculate days_until_check' which includes one of the internal modules 'moment'. You can see how it is referrenced at the start of the script, then used further for logic."
  },
  {
    "chapterName": "User, Group and Role Security Setup",
    "lessonTitle": "54859588-foundation-user-security-and-role-knowledge",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54859588-foundation-user-security-and-role-knowledge",
    "sourceType": "video",
    "content": "now let's Learn about the user security group and roll tools within the cockpit user allows you to view all of the current users within your system by default you'll be running on the trial version which allows two users in total this is the only limitation within the platform with a licence key you can upgrade to any number of users here you always be provided with the admin user this is what you've logged in as the first time you can create one other user on the trial here I've created a field worker you can click any user to edit the details you can choose it's language as well as provide a user-friendly name you can provide an email mobile phone number of validity for the user if you set this then the user will become inactive which is locked after the end time or you can choose if the user should reset their password the next time they log in here within the user tool it's also easy to change the password of any given user down here in the recommendations we can see the role tool the role tool allows you to control and use access to system artefacts this applies to both the tools within the cockpit and any tiles or tile groups within your launch pads here I've created two rows a role is very simple give it a name a description and assign it to a package and then the access control list defines the permissions within the cockpit as you can see the administrator role I've configured has edit access on all of the individual tools it's possible to configure any role with any level of access to any tool display will only allow users to view information and not edit it and none gives no permission to view any data or subsequently change anything the field worker has no permissions if I log in with the field worker I won't be able to use any of the tools within the cockpit they won't be visible now that we've learnt about the roles we can assign a role to our user here I filled worker user with added the fieldworker roll you can remove roles by clicking the cross in the right hand side and you can add roles by hitting this add button and selecting one or more rows security groups is the other Concepts here to learn about a group is a collection of users and roles any user that I add to this group will inherit this role here this field worker will now inherit this field workers role this applies alongside with any roles configured for the individual user here I'll remove the role from the user since the user is added to the group with that role when you're configuring tiles or tile groups you can assign these roles to the groups or to the tiles here for example this tile group we can say only those assigned to the field worker role should be able to see this tile group I'm currently logged in as the admin so let's open the E-Learning launch pads and here we can see I don't currently have access to the main group where we've just assigned that role here in the tile group the main apps group has the field worker role and the admin does not have that field worker role if I visit the same Launchpad in a private browser we can log in with the fieldworker account the third workout is assigned to the group which has the same role as this tile group meaning the field worker can see these applications"
  },
  {
    "chapterName": "User, Group and Role Security Setup",
    "lessonTitle": "54859598-exercise-roles-within-the-launchpad-tiles-and-tile-groups",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859598-exercise-roles-within-the-launchpad-tiles-and-tile-groups",
    "sourceType": "text",
    "content": "Exercise: Configure a new user with a role, that is also assigned to a tile group, and that group is assigned to a Launchpad. View the Launchpad with both the user with, and another user without the role - to observe the different perspectives.\nRemember you can open another browser, or a private session of the same browser, to login with the second account."
  },
  {
    "chapterName": "User, Group and Role Security Setup",
    "lessonTitle": "54859630-roles-within-applications",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54859630-roles-within-applications",
    "sourceType": "video",
    "content": "note within the settings of your applications it's possible to assign a role this means that when running the application stand-alone using the run Button it will only be accessible by users with the role"
  },
  {
    "chapterName": "User, Group and Role Security Setup",
    "lessonTitle": "54859748-authentication-and-authorization",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54859748-authentication-and-authorization",
    "sourceType": "text",
    "content": "Please read through this additional information for this topic area:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/overview/authentication_authorization.html"
  },
  {
    "chapterName": "User, Group and Role Security Setup",
    "lessonTitle": "54862157-23-10-3-user-tool-update",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862157-23-10-3-user-tool-update",
    "sourceType": "text",
    "content": "There is now (as of 23.10.3) support for adding groups to a user from the User tool. Simply open a user and then you can assign the groups to the user from there!"
  },
  {
    "chapterName": "Media Library",
    "lessonTitle": "54862336-adding-an-image-to-the-media-library-as-a-subfolder",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54862336-adding-an-image-to-the-media-library-as-a-subfolder",
    "sourceType": "video",
    "content": "hello and welcome to the sea learning video in this session I will guide you through the media library where you will learn about the process of uploading organising importing exporting and deleting media files the media library access the storage hub for various file types such as images videos scripts and more it's main purpose is to store the files and have them ready to use it every stage of the development process with that being said let's jump into the cockpit and open the media library the root folder is on the left panel and it will contain all the folders and subfolders that will be created folder actions are located at the top such as delete edit create collapse and expand moving on to the centre panel where the files from the folders will be displayed and you can also interact with them on the top of the central panel you can filter search and update the files as well as having the option to exclude subfolders from search at the top right of the screen you can import files or zip files and you can export the files from the media library now let's select the root folder to add a new folder let's give it a name and save within this folder you can import One file at the time or you can import multiple files in one go clicking on the image will open the file in a new tab and the link button will copy the URL of the file in the clipboard so if I paste it in a new tab the file will be displayed to delete files click on the X button at the end of each row you can import files in one go as well as export the folder with all the media files as a zip the edit button allows you to change the name of the folder into a sign the folder to a development package select the folder and click add to create a subfolder you can browse through the media files using the search bar having the option to exclude subfolders from the search and finally to delete the folder you need to select it and press the delete button well done now you know how to use the media library see you in the next lesson goodbye"
  },
  {
    "chapterName": "Media Library",
    "lessonTitle": "54862383-referencing-media-library-files-within-applications",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/lessons/54862383-referencing-media-library-files-within-applications",
    "sourceType": "video",
    "content": "hello and welcome to the sea learning video throughout this session I will walk you through the process of utilising media library files within applications tiles and the Launchpad from the cockpit open the media library and in the media library demo folder I will import some of the files that will be used now we open the application from the package in the app designer where you can see that we have three empty custom tiles the goal is to link the image component within this tiles to an image that is stored in the media library to achieve this select the image component scroll down to source and from the dialog you can select the image from the media library save activate and the media library file is now used in the application now let's do the same for the other two components in the next page of the application there is a list with the products but no image is associated with any of the products so let's fix that we go to the media library and create a new folder where the product images will be stored select the folder and import the files for this example I have store d URL of the images in a table called products demo this table is connected to an API which is used in the application to get all the products and populate the products list now let's find the image components from the list item so each product will display a descriptive image from the source of the image click on the Binding icon and select the image property save activate and now each product displays its associated image great now we can move on to the Launchpad and Tiles to show you how media library files can be used within this tools open the Launchpad and run the media library demo Launchpad that comes within the package currently the Launchpad has no background image and the tiles are not displaying any images so let's adjust this in the layout tab of the Launchpad click on the background image and select the image that you want to utilise as a background from the media library click save as you can see the preview of the launch but has updated and now I will refresh the Launchpad in the image that I have selected from the media library is now applied as a background for the Launchpad let's continue by adding images to each tile from the Launchpad locate the tile within the solid group and under layout there is a panel called tile background image where you can choose an image from the middle library that will be displayed on the tile select the image click save and display now if I refresh the Launchpad the image will be displayed on the tile so let's do the same for the other tiles tile layout select the image and save refresh lunch but again and now all the tiles are displaying images which improves the look and feel of the Launchpad well done now you know how to use the media library files within applications tiles and the Launchpad see you in the next lesson goodbye"
  },
  {
    "chapterName": "Media Library",
    "lessonTitle": "54862502-use-case-knowledge-for-the-media-library",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862502-use-case-knowledge-for-the-media-library",
    "sourceType": "text",
    "content": "The Media Library is great for storing a range of files, of small to medium size. Pictures, GIFs, short videos, CSS or JavaScript libraries are great examples of when to utilise the Media Library\n\nThe Media Library is capable of storing larger files, however, the default SQLite database is not optimal for larger file storage and content delivery.\n\nIn the Expert section of this course, you can learn about the Azure Blob System Setting configuration, that enables the Media Library (along with other storage mechanisms, such as PDF Archive, to utilise the Azure service for optimal performance)."
  },
  {
    "chapterName": "Media Library",
    "lessonTitle": "54862543-upload-to-media-library-building-block",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862543-upload-to-media-library-building-block",
    "sourceType": "text",
    "content": "Check out this blog post, highlighting a custom component that is available to help enable you to add uploading to the Media Library capabilities to your applications:\nhttps://community.neptune-software.com/topics/planet-9/blogs/upload-to--media--library----custom--component---avail\n\nThe technical implementation of Custom Components will be covered in more detail in the Expert level of the course."
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54862667-reviewing-the-change-logs-release-notes",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862667-reviewing-the-change-logs-release-notes",
    "sourceType": "text",
    "content": "As you become more familiar with the platform and its tooling, you should pay additional attention to the release notes available within the documentation. Here you can stay up-to-date on all of the fixes and enhancements that are implemented across the platform for each patch.\n\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/release-notes/overview.html"
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54862671-mobile-build-service-overview",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862671-mobile-build-service-overview",
    "sourceType": "text",
    "content": "The Neptune Mobile Build Service is a service provided by Neptune that allows you to build hybrid mobile applications in a fully automated and online process. It is available for both SAP Edition Neptune DXP and Open Edition Neptune DXP. It is accessed from the Portal. https://portal.neptune-software.com/launchpad/portal#mbs-build\n\nBefore you can utilize the Mobile Build Service, you must create a mobile client. More information on this topic is covered later in the expert level of this course.\n\nTo use the Mobile Build Service, you need to provide certain files depending on the platform you are targeting. For all platforms, you need to provide the source mobile client build .zip file from Neptune, which includes all the necessary files for building the application. For iOS, you also need to provide the Provisioning Profile, .p12 file, and password for the .p12 file. For Android, you need to provide the Signing Certificate and password if you want to sign the app.\n\nThe Mobile Build Service is free to use and the installation files for the built application will be ready to download as soon as the automated build process is completed. You can access the Mobile Build Service through the Neptune DXP Portal.\nPlease contact your Neptune representative if you are not assigned to your organisation's account. Once configured, you can access the service and any appropriate files for your organization.\n\nThere are multiple options for generating and deploying development and release versions of hybrid native applications for their respective platforms. Each use case may require different configurations, so it is best to assess the needs of your users to see if this option is required."
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54862681-monitoring-logging-and-more",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862681-monitoring-logging-and-more",
    "sourceType": "text",
    "content": "Monitoring Tools in Neptune DXP\n\nÂ \n\nIn this lesson, we will explore the various monitoring tools available in Neptune DXP Open Edition and how they can help you in application development and management.\n\nTrace/Monitor/Audit Log: The Trace/Monitor/Audit Log tools in Neptune DXP Open Edition provide valuable insights into the changes made to tables, activities in the Cockpit, and application operations. These tools enhance transparency, accountability, and troubleshooting capabilities. Let's take a closer look at each of these tools:\nTable Audit: The Table Audit tool allows you to track changes made to tables in your application. It records information such as the user who made the change, the timestamp, and the old and new values. This tool is useful for auditing purposes and tracking data modifications.\nÂ \nThis setting is enabled for individual tables in the Table Definition tool:\nÂ \nAudit Log: The Audit Log tool captures activities performed in the Cockpit, such as user logins, application deployments, and configuration changes. It helps you keep track of who did what and when, ensuring accountability and facilitating troubleshooting.\nÂ \nApplication Log: The Application Log tool allows you to trace application operations and track important events. It records information such as error messages, warnings, and user actions. This tool is invaluable for troubleshooting and identifying issues in your application.\nÂ \nJob Log: The Job Log tool in Neptune DXP Open Edition helps you monitor and track the execution of background jobs. It provides valuable insights into job performance, execution times, and any errors or warnings encountered during the process.Â \nÂ \nSystem Logs: The System Logs tool in Neptune DXP Open Edition allows you to track system errors, warnings, process messages, and user locks. It provides different log levels for different types of log entries, allowing you to filter and analyse the logs based on your requirements. This tool helps you identify and resolve issues in your application effectively.\n\n\n\n\nSystem logs can be exported!\n\nÂ \n\nNeptune DXP Open Edition Monitoring Documentation:Â Link"
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54862705-jobs",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862705-jobs",
    "sourceType": "text",
    "content": "Job Manage is a tool in Neptune DXP Open Edition that allows you to create and manage background jobs that run server scripts. These jobs can be triggered by events, manually by a user, or by setting a schedule. By automating tasks behind the scenes, background jobs enhance efficiency by handling predefined actions without user interaction. They optimize resources and contribute to workflows, making processes like data processing and maintenance more efficient. You can define the scripts, order, error handling, start interval, status, and email notification for each job using the Job Manage tool.\n\nOn the other hand, Job Log is a tool in Neptune DXP Open Edition that allows you to view the history and status of background jobs. You can access the logs of all background jobs in a table format. The Job Log tool provides filters to define a time period, job, and job status to show specific logs. You can also click on the info icon in a log entry's row to get more details about that specific log.\n\nFor more information and detailed instructions on how to use Job Manage and Job Log in Neptune DXP Open Edition, you can refer to the following documentation links:\n\nJob Manage: Job Manage Documentation\nJob Log: Job Log Documentation\n\nAdditionally, if you are interested in learning more about jobs and their tools in Neptune DXP Open Edition, you can check out this blog post from the Neptune Software Developer Community: Jobs | Automate and break down tasks\n\nÂ "
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54862770-locks",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862770-locks",
    "sourceType": "text",
    "content": "It is good to know that Edit Mode = Locked, and the tool Lock Entries exists to facilitate the unlocking of any locked artifacts within the platform.\n\n\nUse this feature with caution - only unlock components that you know are safe to do so - as if you unlock someone else's work, and then edit and save, there can be potential for data loss.\n\nRead more about this toolset within the Documentation:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/lock-entries.html"
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54862922-system-settings-configuration",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54862922-system-settings-configuration",
    "sourceType": "text",
    "content": "Other useful things to configure within the System Settings tool - include the:\n\n\nGeneral\nProvide a Name, Description and Role for your instance.\n\nThe 'Role' in this context, could be \"Development\" or \"Production\" for example.\nThe System Role is like a global setting, and can be utilised with multiple definitions for single artifacts, to use the correct record for the correct system. Such as different endpoints for APIs, with running Development or Production.\nOr for different auehentications when pointing to the next system in the development landscape (Such as Dev -> QA -> Prod)\n\nSystem Timeout, and other system timing settings.\n\nLicense\nThis is a key area. It allows you to add a license key to unlock more users within your instance. For a license key, please contact your Neptune representative.\n\nCustom settings\nA place to set custom texts that display on the login page, such as Privacy Policy or Terms of Service"
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54863134-app-editor-awareness",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54863134-app-editor-awareness",
    "sourceType": "text",
    "content": "The App Editor is a specialized code editor in Neptune DXP that allows you to create applications using JavaScript frameworks like React.js and Vue.js. It follows a pro-code approach to application development. You can find more information about the App Editor in the Neptune DXP Open Edition documentation.\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/23/cockpit-overview/app-editor.html\n\nMore information about this will be available in the expert level of this course."
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54863211-code-snippets-create-your-own-download-from-the-marketplace",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54863211-code-snippets-create-your-own-download-from-the-marketplace",
    "sourceType": "text",
    "content": "The Marketplace offers a range of code snippets that you might find useful whilst developing. You are also encouraged to make your own ones that you find yourself using frequently. They will be available to all users with the allowed ACL permissions to the Code Snippets tool.\n\nMarketplace Product:\n\nWhen installed, they will be visible within the Code Snippet tool - and available within the right-click context menu within the App Designer or Script Editor:\n"
  },
  {
    "chapterName": "Other Cockpit, Platform and ecosystem information",
    "lessonTitle": "54863213-odata-knowledge",
    "sourceUrl": "https://neptune.thinkific.com/courses/take/open-edition-developer-training-foundation-2024/texts/54863213-odata-knowledge",
    "sourceType": "text",
    "content": "OData is a protocol that builds on core protocols like HTTP and commonly accepted methodologies like REST. It provides a standardized way to expose full-featured data APIs. Neptune DXP supports both OData v2 and v4 versions.\n\nIn Neptune DXP, you can consume data from an OData service using the OData Source component. This component allows you to add OData services and define parameters for authentication and communication with endpoints. You can find more information about using OData sources in the Neptune DXP Open Edition documentation here\n\nWithin the App Designer OData sources work in a similar way to API sources. You can call them with get[ODataComponentName] - tables and lists bind their sources to the OData (via the metadata), and the wizard can be used to generate the components and bindings.\n\n\n\n\nIf you want to simulate the behavior of real data in a controlled way, you can use OData Mock Data in Neptune DXP. With OData Mock Data, you can add mock metadata and datasets to test certain features of your application or use mock data while the OData resource is not set up yet. You can find more information about OData Mock Data in the Neptune DXP Open Edition documentation here.\n\nOnce you have created the mock data artifact, you can add metadata and datasets to it by following the steps outlined here.\n\nAn OData component is available within the App Designer and operates in a very similar way to an API component."
  }
]