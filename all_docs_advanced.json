[
    {
        "chapterName": "Data Models, Bindings & Responses",
        "lessonTitle": "Advanced Bindings, Responses & Data Models - Populate select based on the parent select",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Bindings, Responses & Data Models - Populate select based on the parent select\n\n\nThis document describes how to populate a select component based on the selection made in another parent select component.\n\nTo showcase this functionality two tables have been created: users table and countries table, and two table definition APIs have been generated based on these two tables. \n\nUsers and countries tables\nIn the App Designer, a basic application consisting of a SimpleForm containing two sap.m.Select components has been created. The resources of the application consists of two Javascript files: Initialize and GetCountriesList, and two RestAPIs: GetUsersList and GetCountriesList.\n\nApplication structure\nThen the table definition APIs have also been added to the application, both using the GET operations (/users-GET and /countries/GET).\nConnect the API response of GetUsersList to the sap.m.Select - selectUsers and the API GetCountriesList to the sap.m.Select - selectCountries.\n\nGetUsersList API response\n\nThen, bind the sap.ui.core.Items (itemSelectUsers and itemSelectCountries) key and text as shown in the below figure. \n\nItem’s binding\n\nIn the Initialize script call the GetUsersList API, to populate the the selectUsers component. \n\nInitialize script code\nIn the GetCountriesList script, a new function was defined (accepting userId as a parameter and retrieving the corresponding countries of the selected user). When using the options parameters, values were ensured to be passed as strings, as demonstrated by the usage of JSON.stringify.\n\nGetCountriesList script code\n\nThen in the ajaxSuccess of the GetUsersList API populate the second Select (selectCountries) based on the default selecon done by UI5.\n\najaxSuccess of GetUsersList API\n\nFinally, in the change event of the selectUsers retrieve the selected user's ID and then call the getCountriesList function with the selected user's ID as an argument.\n\nSelectUsers change event code\n\nResult: When a user is selected in the first dropdown (selectUsers), the second dropdown (selectCountries) dynamically displays the countries associated with the chosen user, based on the userId.\n\nResult\nNote: Instead of making two API calls, a more efficient approach would be to create a unified Server Script capable of reading data from both tables. Subsequently, within the change event of the first Select component (selectUsers), countries can be filtered accordingly.\n\nSelectUsers change event "
    },
    {
        "chapterName": "Data Models, Bindings & Responses",
        "lessonTitle": "Advanced Bindings, Responses & Data Models -  Generic Data Model bindings & importing definitions to models",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Bindings, Responses & Data Models - Generic Data Model bindings & importing definitions to models\n\n\nThis document provides an overview of the functionality of generic data model bindings and explains the process of importing definitions into models.\nTo showcase this functionality a simple application formed of a SimpleForm, label, combobox, and a list item has been utilized. Alongise a JSONData file which contains the JSON data and a MultiModel used to store the data.\n\nExample application\n\n \nJSONData file\n\n\nGeneric Data Model bindings - manually bind data to components\n\nTo accomplish this, set the JSON data to the MultiModel using the “modelMultiModel.setData();” method.\n\nSet jsonData to MultiModel\n\nFollowed by setting the Modle Source of the MultiModel to a Generic Array.\n\nMultiModel – Model Source\n\n\n\nNow, the data is stored in the MultiModel, allowing you to manually reference it within the ComboBox Model path. Include a salsh “/” for each nested key and end in the key containing the array.\n\nComboBox Model Path\n\nFinally, you can manually set the Item’s text property to the desired data. In this case, it is the “value” which holds the email address. \n\nItem’s text property\n\nSave, activate, and the ComboBox is now populated with the email addresses from the JSONData through a MultiModel and manual bindings.\n\nComboBox displaying email addresses from JSONData\nImporting definitions to models\n\nTo achieve this, copy the jsonData, and open the “Data Model” from the MultiModel.\n\njsonData and MultiModel\n\nWithin the Data Model dialog, you have the option to define properties manually or utilize the JSON Import feature. To do so, click on \"JSON Import\" and paste the selected jsonData, followed by pressing the “Import” button. \n\nData Model dialog\n\n\nBy setting the definition here, you will be able to use the Model Path dialog to bind attributes and properties to components without the need for manually typing the bindings.\n\nData Model after JSON Import\n\nAs a result, you can now utilize the bindings dialog to link the Model Path of the ComboBox to the desired data within the MultiModel.\n\nComboBox binding\nSimilarly, for the text property of the Item, by specifying the Data Model of the MultiModel, you can utilize the Binding Dialog to connect the \"value\" to the text property.\n\nItem’s text binding"
    },
    {
        "chapterName": "Data Models, Bindings & Responses",
        "lessonTitle": "Advanced Bindings, Responses & Data Models – XHR- Handling API success and error responses within Ajax Events",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Bindings, Responses & Data Models – XHR: Handling API success and error responses within Ajax Events\n\nThis document describes how you can make use of the XMLHttpRequest (xhr) status to handle API success and error responses and inform the users using Ajax events.\nTo showcase this, the “2VIEWANDEDITEQUIPMENT” application from the eLearning 2022 Demo package has been used. \n\n\n\nXHR status\nThe expression xhr.status retrieves the HTTP status code from the XMLHttpRequest object. By highlighting this, you can implement different logic based on the specific status codes returned by the API. For instance, status codes such as 200, 201, or 202 typically indicate successful responses from the server.\n\nRespose 200 - Request successful: Data retrieved from the server.\nRespose 201 - Resource created: Request fulfilled, new resource created.\nRespose 202 - Accepted: Request accepted for processing, but processing has not been completed.\n\n\n\n\nYou can utilize the ajaxSuccess event of the API to manage different success codes, providing users with necessary information about any actions required.\n\najaxSuccess event\n\nThe code used in the ajaxSuccess of the “getEquipmentInfo” API checks the apiStatus variable against each of the specified status codes (200, 201, and 202) and displays a relevant message using sap.m.MessageToast based on the matched code. If the apiStatus does not match any of these codes, it displays a generic message indicating an unexpected status code along with the actual code received.\n\nSimilarly, you can utilize the ajaxError event of the API to manage and inform users about any encountered error codes.\n\nRespose 403 - Forbidden: You do not have permission to access this resource.\nRespose 404 - Not Found: The requested resource could not be found on the server.\nRespose 500 - Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request.\n\n\najaxError event\nThe code used in the ajaxError of the “getEquipmentInfo” API checks the apiStatus variable against each of the specified error codes (403, 404, and 500) and displays a relevant message using sap.m.MessageToast based on the matched code. If the apiStatus does not match any of these error codes, it displays a generic error message along with the actual code received.\n\nXHR ResponseJSON\n\nThe xhr.responseJSON represents the JSON data received in the response to an XMLHttpRequest (xhr) request. It provides access to the JSON data in a structured format, allowing for easy manipulation and extraction of data within JavaScript code.\nUsing the xhr.responseJSON in the ajaxSuccess of the “getEquipmentInfo” API, you would have access to all the data coming from the API. For example, the code used counts the number of all, assigned and unassigned items from equipment data and updates the text of the segmentedButtonItems.\n\najaxSuccess event\n\nOnce the API is initialized, the segmentedButtonItems will be updated with the counts for all equipment categories: all, assigned, and unassigned.\n\nUpdated segmentedButtonItems"
    },
    {
        "chapterName": "Advanced Launchpad and Tiles",
        "lessonTitle": "Launchpad Vs Application Script Headers",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "This lesson highlights how the ‘Header’ data for the application and the launchpad, are different. Scripts included within the Application will enable functionality for that app, when it is running stand alone. Scripts included in the launchpad, will apply to all applications running within the launchpad.\nThis example shows running an application first standalone, missing a library in the header, then within the launchpad with the included library in the header.\n\nIf you have not already, install the “eLearning 2022 Demo” from the Marketplace:\n\n\nThis package contains an application ‘3fieldworkerinspect’ which contains a set of libraries within the Application Header:\n\n\nOpen the application, you can use the shortcut , and open the application Header:\n\n\nIf you run the application standalone: (/app/3fieldworkerinspect)\n\nSelect an inspection:\n\n\nAnd observe the mapping and barcode scanning functionality work as intended:\n\n\nHowever, the signature pad is not accepting any input. When attempting to draw in the square, no line appears:\n\nNote this is because the Signature pad library is missing from the application header.\nOpening the developer tools reveals the missing library error:\n\n\nCompare this to the ‘eLearning Launchpad’ header:\n\n\nHere you can see all 4 libraries are included.\n\nIf you ‘Run’ the launchpad to open it (/launchpad/eLearning Launchpad):\n\nOpen the Inspection Portal tile – which is assigned the action of opening the application ‘3fieldworkerinspect’:\n\n\nOpen one of the inspection items and then navigate to the Signature pad:\n\n\nObserve the functionality working as expected.\n"
    },
    {
        "chapterName": "Deployment Mastery",
        "lessonTitle": "Deployment Create, Approve, Transfer, Routes, & Log tools",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "The platform comes with a set of tools designed to give you complete control over the deployment (copying) of artifacts from one source system to another other system(s).\n The deployment tools gives you the ability to transfer individual artifacts, entire packages, or a number of packages simultaneously. \nIt is possible to deploy between systems directly over the network - when other Open Edition Remote Systems are configured, or via file (.planet9) that can be downloaded and imported into other systems.\nIt is also possible to deploy a package via GitHub with CI/CD integration. (Covered in more detail in its own lesson)\n\nThis diagram highlights the process of moving artifacts from one system, Development, to another, Production.\nThe Deployment Tools allow you to manage the entire process of creating, approving and transferring the artifacts between systems.\nYou can read all the documentation around the deployment tools here:\nhttps://docs.neptune-software.com/neptune-dxp-open-edition/latest/cockpit-overview/deployment.html\n\nNOTE:\nThe GitHub CI/CD works within the Development Package tool itself, and enables you to utilise GitHub’s features for branching, merging and reviewing – before “pulling” into the target system.\n\nCreate\nDeployment -> Create, tool is used to create the deployment package. It contains the master data for creating the deployment package, where you can select what you want to deploy from one system to another.\n\nApprove\nDeployment -> Approve tool allows the developer to approve the package to the transfer component(s).\n\nTransfer\nDeployment -> Transfer tool allows the developer to approve and transfer the package to other System, this tool shows the list of all requests, Errors generated in transfers, approved requests and Declined requests.\nHere you can trace the logs for a transfer package like\nStatus of the Package\nAny note for the package\nDate and time of the package creation\nUsername created the package\nPackage modification date\nUsername who modified the package\nDeployment Status\n#\nLog\nAllows importing a deployment file that has been exported, and maintains the log generated from transfers, this log tool allows understanding:\nWhen does the import happen?\nWho has performed the log?\nWhat was the object type?\nWhat was the object name?\nWhat was the version?\nWho has done change to import package?\n\n \n \n"
    },
    {
        "chapterName": "Deployment Mastery",
        "lessonTitle": "Merging with Git",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Working on the same repository and merging changes\n\nWhen several developers are working on the same repository from different application servers all commits should be made to a development/feature branch. Each developer should push changes to their own development/feature branch. Commits can be made to the master/main branch but should only be done so when the database has been synced with the most recent commit on the main/master branch. In general, a commit should not be pushed to a branch when the database is not synced with the most recent commit for that branch. Trying to commit to a branch when the database is not synced with the most recent commit for that branch will display a warning.\n\n\n\nIf the repository doesn’t contain a branch which is in sync with the database, you can create a new branch and base the branch of the last commit the database was synced with.\n\n\nChanges can then safely be pushed to the new branch.\n\nMerging\n\nWhen it is time to merge changes from a feature or development branch (referred to as dev/gunnar) with the master/main or other branch (referred to as master), it must be done outside of Neptune DXP using git. \nThis document will use git command line. First GIT must be installed (https://github.com/git-guides/install-git). You can also use other tools, such as the GitHub UI or other 3rd party tools.\n\nWhen git is installed open the command line and navigate to a folder where the project can be downloaded. Use “git clone” to download the contents of the repository, like below.\n\n\nThe repository has now been downloaded to a folder with the same name as the repository, navigate to that folder.\n\n\nAs the repository was just cloned everything should be up to date. However, the next time it is time to merge branches the repository must be updated. First update the master branch which the dev/gunnar branch should be merged with. To update the branch first use “git checkout master” and then “git pull –rebase”. This will update the branch with all commits from the remote repository.\n\n\nNow switch to dev/gunnar (git checkout dev/gunnar) and update that as well (git pull –rebase).\n\n\n\nThe next step is where we merge the two branches. Use “git rebase master”, this will add all commits from master then add all commits specific to the dev/gunnar branch on top of those commits. Here there might be conflicts if the same artifact has been changed in different branches.\n\n\n\nIn the above example there are conflicts with the application “testpackageapp”. There are conflicts with the definition file and the typescript object “oTypescript”. The conflicts must be resolved before we can continue. Open the two files in a text editor.\n\n\n \nThe only conflict in the definition file in this example is related to the “ver” property. This is a system generated version which is updated on each save. There will always be merge conflicts with the “ver” property when the same artifact has been changed in different branches, but this is easy to solve. Keep the most recent version, bump the number by plus one, and delete the rest. \n\n\nThe version number is bumped because when updating a development package from a repository branch the system checks the artifact version number. If the version number is the same as the version number for the artifact already in the system, the artifact will not be updated.\n\nMerge conflicts with “ver” is the most common merge conflict. If feature/development branches diverge significantly from the branch it will be merged with conflicts might be harder to solve as there might be conflicts in the application object tree definition. We recommend always keeping development/feature branches up to date with the branch they will eventually be merged with to avoid merge conflicts that are hard to solve.\n\nThe other merge conflict was in a script object, these are typically easy to solve.\n\n\n\nWhen all merge conflicts have been resolved and all files have been saved go back to the command line. To check that all merge conflicts have been resolved view the diff by using “git diff”.\n\n\nUse “git add .” to mark all merge conflicts as resolved. Then use “git rebase --continue” to continue merging. After resolving a merge conflict, a prompt to update the commit message is shown, update the message or leave it as is. There might be additional merge conflicts or rebasing will complete. \n\n\nAfter the dev/gunnar branch has been rebased on the master branch the remote branch and the local branch have diverged. Update the remote branch with the local branch by using “git push –force”.\n\n\nOptionally, the master branch must be updated with the changes from the dev/gunnar branch. Switch to the master branch using “git checkout master” and merge the changes from the dev/gunnar branch to the master branch using “git merge dev/gunnar”. Then use “git push” to update the remote branch.\n\n\nNow that all remote repository branches have been updated the database should be synced with the master or dev/gunnar before more changes are added. Use “Update database from repository” and check “Force update”.\n\n\n\nThe database should now be synced with the most recent commit for the selected branch and new commits can be added.\n\n"
    },
    {
        "chapterName": "Deployment Mastery",
        "lessonTitle": "Working with Development Packages and Git",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Working with Development Packages and GIT\n\nDevelopment packages are meant to contain all artifacts for a solution built on Neptune DXP Open Edition. When artifacts are assigned to a package the artifact data can be pushed to a remote git repository and subsequently imported to any DXP server installation. This also enables collaborative development across DXP server installations. To work together on a development package some prior knowledge of GIT is required.\nStart by creating a development package in the cockpit.\n\nAfter the package has been created it must be connected to a GIT repository to enable GIT integration for the package.\n\nCreate an empty repository in your preferred GIT hosting solution. In this document we will be using GitHub. When you have created an empty repository grab the URL to the repository and add it to the development package. A repository URL to GitHub will look something like the below URL.\nhttps://github.com/sveingunnarlarsen/com.neptune.testpackage.git\n\n\n\n\n\nFor private repositories and when pushing to a public repository authentication must be added, use “Configure Authentication” to add authentication. When using GitHub authentication tokens can be generated by going to Profile > Settings > Development settings > Personal access tokens > Tokens (classic) when logged in to GitHub. \n\nIncluded in the template code pushed to the repository, as part of the development package, is a GitHub workflow script. When using GitHub make sure you include “workflow” as a scope for the authentication token. If this scope is not added the commit will fail when pushing to GitHub.\n\nAfter pressing “OK” Neptune DXP tries to connect to the remote repository. If a successful connection can be made a new tab called “GIT” will become visible. If this tab is not visible Neptune DXP failed to connect to the remote repository. In the new tab information about the remote repository is displayed.\n\n\n\nWhen connecting to an empty repository no branch information is displayed as the repository does not contain any branches. Using “Commit changes and push to remote repository” before any artifacts have been added to the package will push template code to the remote repository. When using this button, a dialog will be displayed with all files that can be added to the repository.\n\n\n\nSelect all files, add a commit message (“Commit Message”) and push to the repository. When the added files have been successfully pushed to the repository the dialog will close and some new information will be displayed. The branch dropdown should now at least contain a branch called “master” and next to the repository URL there should be a label with the SHA (commit tag) the database is synced with.\n\n\nWhen working with Development Packages the Neptune DXP database acts as the working tree. “View modified files” will display changes between the selected branch and the database. When all added/modified/deleted files have been pushed to the repository the database/working tree should be clean. “View modified files” should show no changes.\n\n\nWhen artifacts are assigned to the package they should show up as “added” files when pressing “View modified files”. Below an application have been assigned to the package “com.neptune.testpackage”. Applications are added as multiple files, one file for the application definition and one file for each script in the application. Only applications and server scripts are added as multiple files, all other artifacts are only a single definition file.\n\n\n\nClicking added/modified/deleted files in this dialog will show the diff between the database and the selected branch.\n\nArtifact data can now easily be pushed to the repository. However, when working on the same repository from different application servers/databases merging changes must be done outside of Neptune DXP."
    },
    {
        "chapterName": "Highcharts",
        "lessonTitle": "Download and inspect the Highchart example product",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "By following this example, you can access and re-use code to generate the most common highchart types. You can then easily integrate your own data.\nDownload the “Highcharts” example from the Marketplace:\n\nIt contains an application “P9_TRAINING_HIGHCHARTS” application, where we can find some logic to display almost all examples of the library, within a single 2 pages. The first page contains the tabs with all the types. The second page contains a single hGghchart component that is programmatically set with the relevant Gighchart code, when a cell is selected on the first page.\n\nHere you can see the Highchart component within the second page.\nWhen you make a selection via pressing the ‘link’ component on the first screen:\n\nA press event is triggered which calls this function:\n\nThis passes the information about the selected component (the link component name) to the function.\nA case switch then assigns the variable with the relevant name of the chart to render:\n\nThe end of the JavaScript then changes to the second page, calls “chartFunction()” to render the highchart. All the reusable code for each chart type are within their respective folders in the application resources:\n\nHere you can see how the chart metadata is configured, and how the “series” of data is passed into it, for it to render.\n"
    },
    {
        "chapterName": "Script Editor",
        "lessonTitle": "P9 functions",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "‘P9’ functions | Script Editor\nThe Script Editor enables you to utilize 'core' functions capable of triggering events, workflows, locating user roles, and much more. When searching for 'p9', you'll discover a variety of functions in the code snippets.\n\nIn each code snippet, an example and a description of the function along with its purpose are provided. Moreover, within the editor, you'll have visibility into each function's parameters, return values, and available operations.\n\n\n\n"
    },
    {
        "chapterName": "Script Editor",
        "lessonTitle": "Operators",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Operators in scripts\nSQL operators are symbols or keywords used in SQL to perform operations on data in a database. They are used in conjunction with SQL statements to filter, manipulate, and compare data.\nHere are some basic operators and their descriptions that you can use with TypeORM:\n\nNote: The operators must be declared as a variable before they are referenced within a entities operation.\n\nBetween: This is used to return all entities that are between two numerical values.\nMoreThan: This is used to retrieve entities from a table where a specific property is strictly greater than the provided value.\nRaw: This is used to execute a custom raw SQL query for filtering entities based on a dynamic condition.\n\n\n\nYou can find more operators and their description with examples in code snippets by searching for ‘operators’\n\n\n\n\nExample: The following code block will retrieve all entities where the value in the updatedAt column is greater than the value in the inspectedAt variable using the Raw operator.\nconst {\n    Raw,\n} = operators;\n\nconst data = await entities.entityName.find({ \n    inspectedAt: Raw((updatedAt) => `${updatedAt} > ${inspectedAt}`),\n});\n\nNote: These operator are not only used within the Script Editor but can also be used in other tools such as the API Client, Table Browser and the App Designer."
    },
    {
        "chapterName": "Script Editor",
        "lessonTitle": "APIs in scripts",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "APIs in server scripts\nWithin the script editor, you can execute API calls in multiple ways. One option is to employ an NPM module such as AXIOS or HTTPS. However, the script editor provides code snippets that automatically generate code for your existing APIs within the platform, when they are assigned to your script as a resource.\n\nHow to add an API in your script\nIn the resources panel, you will see the list of all existing APIs within the system.\n\nTo incorporate an operation into your script, drag and drop the operation onto the script you are working on. The script must be in edit mode for you to place the operation within it. You'll then be prompted to provide a name for the operation.\n\nOnce you have successfully completed this step, right click and open the code snippets and search for your operation. Alternatively, you can expand the API section to locate it.\n\nThe Script Editor will generate the code snippet with all the parameters, headers, and body definitions exactly as you have defined the API within the API Designer.\n\nNow, this script can be utilized to execute tasks based on your requirements. For instance, you can manually trigger this script to call an external endpoint, connect it to a job for executing a sequence of tasks, integrate it with an external API, and more.\n"
    },
    {
        "chapterName": "PDF Designer",
        "lessonTitle": "Look around an example in the PDF Designer",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Install the Sales Order with PDF Generation product from the Marketplace:\n\nIt contains a PDF Designer template:\n\n\nOpen the template in the PDF Designer:\n\nObserve the table “tabItems”:\n\n\nIt has a comprehensive set of properties.\nOpen the test data to see how the table is populated:\n\n\nHere we can see the bindings match the data, just like in the App Designer:\n\n\nObservice the interface within the settings:\n\nIt has a root level object ”data” which contains the properties.\nObserve the Neptune logo in the top right corner:\n\nIt is utilising a style class component:\n\n\nWhich has the property: alignment: right.\nMultiple style properties are referenced within this design.\nScroll down to view the QR Code which is generated:\n\nNote it is generated automatically based on the provided property ”qr” - which can be static or bound to data.\n\nObserve a text property in the footer at the bottom of the page, which is bound to the ‘currentPage’ attribute:\n\nThis component also has its own styles defined.\nYou have now learnt about a number of the key features of the PDF Designer!"
    },
    {
        "chapterName": "PDF Designer",
        "lessonTitle": "Exercise Generate UI using the Wizard",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "If you have not already - Install the Sales Order with PDF Generation product from the Marketplace:\n\nIt contains a PDF Designer template:\n\n\nOpen the template in the PDF Designer:\n\n\nToggle edit mode:\n\n->\n\n\n\nDelete the table “tabItems”:\n\n\nActivate the PDF template:\n\n\nObserve the table is gone.\nFeel free to adjust the Test Data and Interface at this step.\nIf you choose to, simple use the JSON import feature in the Settings > Interface:\n\t\n\nAnd then also paste in the data set, in the test data tab:\n\t\n\nSearch in the component tree for table:\n\n\nDrag and drop the table into the main “Content” section:\n\n\n\nNow set the model path of the table:\n\n\nIn this case, we will pick the root object as defined in our interface:\n\nObserve the table now is bound to the data:\n\n\nYou can now use the wizard to generate the table:\n\n\nSelect the fields you wish to create:\n\n\nPress “Create” - then activate:\n\n\nObserve the table generated with the Wizard!\n"
    },
    {
        "chapterName": "Workflows",
        "lessonTitle": "Administrating Workflows - Exploring Workflow Overview",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "This tool gives a full administrators overview of all workflows, active, errored and completed, and is essential to keep track of workflows.\nYou can use this tool to validate and monitor workflows are running as you expect, without having to assign yourself to a particular approver group or role to view it as an end user.\nA workflow can exist in any of these states:\n\nCancelled and Completed are the two end state nodes that can be defined within your workflow.\nWithin each workflow item, you can view the log detailing all the steps it has taken so far.\n For example – if you trigger a workflow and you notice it is not behaving as it is designed, you may find it in an error state:\n\nIf you inspect the workflow item, using the button on the far right of the line item, you can view the log of its path so far:\n\nIt is also possible to view more details around the determination strategy that has been used on the user task:\nIn this case we can observe a lack of a username being assigned to the determination strategy group. By assigning the admin to the group, and triggering the workflow again, we can see the difference:\n\n\nIt is also possible to trigger workflows to start directly from this tool. Simply click “Add”: \nWithin this tool you can re-run approver determination, for any number of selected workflows. This is covered in more detail in the \"Substitutions and rerunning approver determination\" lesson in this chapter.\n"
    },
    {
        "chapterName": "Security and Data Integrity",
        "lessonTitle": "Server Script - Audit operations",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Within the Script Editor – when you have table resources associated with your script, you can utilise the automatically generated functions for managing your entities (data).\nThe ‘audit’ operations:\nFor example the ‘saveAudit’\nThis code snippet creates a record in table_audit with the entity name, the operation(in this case Save), the payload and the user that initiated it.\n\n\nIn this example script – instead of using the regular .save method, we can use the .saveAudit:\n\n\nThe Table Audit tool then displays these logs:\n\nYou can inspect each payload:\n"
    },
    {
        "chapterName": "App Builder",
        "lessonTitle": "Advanced App Builder - Feedback functionality",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced App Builder – Feedback functionality\n\n\n\nThis document describes the Feedback functionality of the App Builder. \nTo demonstrate the feedback functionality of the App Builder, a demo application composed of multiple building blocks has been utilized. You have the option to select an existing application from your account or create a new application using just a few building blocks.\n\nDemoApplication\nWithin the App Builder, there are two feedback options available. One allows users to provide feedback on the tool itself, while the other enables feedback specifically on an application.\n\n\n\nApp Builder Feedback\nIn the footer of the App Builder you'll discover a \"Give us your Feedback\" button. This feature is designed to collect feedback on the tool itself, aiding in its continual improvement based on user input.\n\nGive us your Feedback button\n\nUpon clicking, the user feedback dialog will open, allowing you to input your thoughts on the tool. Additionally, you can also utilize the speech-to-text functionality for convenience. Once your thoughts are expressed, simply press the “Send feedback” button. We welcome any suggestions to help us enhance the App Builder.\n\nUser Feedback dialog\nAlongside text feedback, you can utilize annotations to visually express your thoughts and suggestions directly on the current screen.\n\nAnnotations example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApp Feedback\nAfter sharing the prototype application using the QR code functionality, when the app is opened on the user’s device, a feedback button appears in the bottom right corner of the screen. Upon clicking it, a user feedback dialog will open, allowing you to share your thoughts on each screen of the application.\n\n\nApp feedback \n\nOnce the feedback is sent, you can access the user’s feedback from the App Builder. \n\nUser Feedback\nIn the Usage Feedback dialog, you can access all the feedback collected across all screens of the application.\n\nUsage Feedback dialog\n\nThe App Feedback functionality enables developers to gather feedback on the prototype application and analyze it to enhance the overall quality of the app."
    },
    {
        "chapterName": "App Builder",
        "lessonTitle": "Advanced App Builder - Heatmaps functionality",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced App Builder – Heatmaps functionality\n\n\n\nThis document describes the Heatmaps functionality of the App Builder. \nTo demonstrate the heatmaps functionality of the App Builder, a demo application composed of multiple building blocks has been utilized. You have the option to select an existing application from your account or create a new application using just a few building blocks.\n\nDemoApplication\n\n\n\n\n\nHeatmaps\nHeatmaps are visual representations of data where values are depicted using color gradients. In the context of user interface design or user behavior analysis, heatmaps display areas of high and low activity or interaction on a digital interface. They provide valuable insights into how users engage with apps, or prototypes by highlighting areas of interest, clicks, scrolls, or other interactions, helping developers optimize user experience and interface design.\nIn the App Builder, to generate heatmaps for your prototype application, simply share your application using the QR code functionality. The interactions of users with the application will be automatically captured and represented in the heatmaps.\n\n\nUser interaction with the prototype application\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the App Builder, you can access the Heatmaps from the “share” context menu. \n\nHeatmaps from share context menu\n\nIn the Usage Heatmaps dialog, you can observe how users have interacted with your application. The left panel displays the screens of the application, the middle panel presents a list of all interactions of the selected screen, and the right panel provides a visual representation of the selected screen with heatmaps. These heatmaps highlight all the areas of the screen that users have interacted with.\n\nUsage Heatmaps dialog\n"
    },
    {
        "chapterName": "Advanced Tables",
        "lessonTitle": "How to configure Foreign Keys (with the Data Modeller)",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Consider this UML diagram, showing three tables.\n(Source: https://cloud.google.com/spanner/docs/foreign-keys/how-to)\n\nFigure 1. Diagram of an order processing database schema\nThere are three tables in the schema shown in Figure 1:\nThe Customers table records the names of each customer.\nThe Orders tables keeps track of all orders made.\nThe Products table stores the product information for every product.\nThere are two foreign key relationships between these tables:\nA foreign key relationship is defined between the Orders table and the Customers table to ensure that an order can't be created unless there is a corresponding customer.\nA foreign key relationship between the Orders table and the Products table ensures that an order can't be created for a product that doesn't exist.\n\nWe can recreate this within the Data Modeller, by simply creating the three tables in the table definition tool – then click and dragging to assign the foreign key relations.\nSimple click and drag from the ‘id’ of one table, to a property in another table, of type UUID and set to unique.\nPackage available to import here: https://github.com/neptune-software-marketplace/neptunesoftware-dxp-abb-tableKeyExample \n\n\nObserve the ‘orders’ table, now with its two foreign key connections to the ‘customer’ and ‘products’ table:\n\n\nSelecting each foreign key reveals the referenced colum and table on the right:\n\n\n"
    },
    {
        "chapterName": "Styling Applications, Tiles and Launchpads",
        "lessonTitle": "Advanced Styling Applications, Tiles and Launchpads – Theme Designer",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced Styling Applications, Tiles and Launchpads – Theme Designer\n\n\nThis document describes how to use the Theme Designer to create and apply custom themes to your applications and launchpads.\nTo showcase this, the “2VIEWANDEDITEQUIPMENT” application, and the “eLearning” launchpad, from the eLearning 2022 Demo package have been used. \nDownload the eLearning 2022 Demo package from the Marketplace.\n\n\nTheme Designer\nThe Theme Designer allows you to create custom themes for use within the Launchpad and the App Designer. With this tool, you can define custom CSS styles to modify various aspects of your application's and launchpad’s appearance, including color schemes, fonts, backgrounds, and logos.\nThemes created in the Theme Designer are immediately available for use in all applications and launchpads connected to the theme.\n\nTheme Designer\n\nWhen creating a new theme (“eLearningTheme”), under the “General” tab, a base theme needs to be selected. \n\nSelect a base theme\n\nOnce the base theme is selected for an application or launchpad, the custom theme associated to the base theme becomes an option for selection.\n\nCustom theme selection\n\nUnder the “CSS” tab, you can reference styleClasses from both applications and launchpads. \n\nCSS tab\n\n\nApp Designer Theme \nIn the Theme Designer, you can reference styleClasses from the App Designer. For instance, by assigning a custom styleClass to the “ObjectListItemEquipment” component (“listItemEquipment”) in the App Designer, you can then reference it within the CSS tab of the Theme Designer to apply a border radius. Save the changes.\n\nApp Designer styleClass reference in the Theme Designer\n\nNext, in the Application Settings, select the base theme used for the eLearning theme, and then the eLearningTheme is available to be selected.\n\nSelecting the eLearningTheme in the App Designer\n\nSave, activate and run the app in the designer. Notice that the eLearningTheme has been applied, since the border-radius is now visible, as specified in the Theme Designer.\n\neLearningTheme applied in the App Designer\n\nTile styleClass\nIn the Tile's \"Layout\" tab, you have the option to define a custom styleClass for the tile. This enables you to reference it in the CSS, allowing you to target and style that specific tile without affecting others, thus preventing CSS leaks.\n\nTile styleClass\n\nLaunchpad styleClasses and elements hierarchy \nIn HTML, elements are structured in a hierarchical manner, forming a tree-like structure known as the Document Object Model (DOM). This hierarchy represents the parent-child relationships between elements, where some elements are nested within others.\nWhen styling elements using CSS, it's common to use classes to target specific elements. However, sometimes you may need to target elements more precisely, especially when dealing with elements that share the same class but are nested differently within the DOM hierarchy.\nBy using two classes in your CSS selectors, you can create more specific rules that target elements based on both their individual class and their position within the DOM hierarchy. This allows you to apply styles to specific combinations of elements. \nTherefore, you can use the “Inspector” tool from the developer console to locate the class that you want to apply the CSS to. \n\nLocate the sapFCardTitle class\n\nLaunchpad Theme\nSimmilarly, you can reference launchpad and tile styleClasses within the Theme Designer “CSS” tab.\n\nLaunchpad and Tile styleClasses\n\n\n\n\n\nOnce you've identified the classes you want to style, you can define the CSS within the \"CSS\" tab of the Theme Designer.\nFor example, to customize the color of TileGroup titles, you can target the \".nepCatTitle.sapMTitle\" classes, which will affect all TileGroup titles.\n\nTileGroups title color change\n\nHowever, if you want to apply CSS changes only to a specific tile, such as \"My Inbox\", you can reference the \"inboxTile\" styleClass. In this example, changes to the background color, border radius, and font style for the title and sub-title have been applied to “My Inbox” tile only.\n\ninboxTile CSS\nOnce the launchpad specific CSS has been defined, within the “General” tab of the Launchpad, scroll-down and select the base theme used for the eLearningTheme-Quartz Light. This will allow the selection of the eLearningTheme. \n\nLaunchpad custom theme selection\n\nSave the changes and run the Launchpad. Notice that the CSS is applied to both the launchpad and the application since both artefacts have the custom theme (eLearningTheme) selected within their settings.\n\neLearningTheme applied\nFeel free to explore and experiment with the Theme Designer, attempting to create a new theme by referencing other styleClasses within the application and launchpad.\n"
    },
    {
        "chapterName": "Styling Applications, Tiles and Launchpads",
        "lessonTitle": "Advanced Styling Applications, Tiles and Launchpads - StyleClass App Designer ",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced – styleClass App Designer\n\n\nThis document describes how to use the styleClass property to style applications within the App Designer. \nTo showcase the styleClass property, the “2VIEWANDEDITEQUIPMENT” application from the eLearning 2022 Demo package has been used. \nDownload the eLearning 2022 Demo package from the Marketplace and open the “2VIEWANDEDITEQUIPMENT” application in the App Designer. \n\n\n\nstyleClass\nThe \"styleClass\" property can be applied to UI components to define custom CSS classes for styling purposes. It allows developers to customize the appearance of UI elements beyond the default styles provided by the framework.\nIn the App Designer, most components have a \"styleClass\" property that enables the customization of their appearance through custom CSS classes.\n\nstyleClass property\n\n\n\nstyleClassMargin\n\nThe “styleClassMargin” property allows you to adjust the margin of the components providing spacing between elements or around them. \nYou can select from the list the type of spacing you wish to apply to the component, such as \"sapUiMediumMargin,\" which will add a medium-sized margin around the component.\n\nstyleClassMargin property\n\n\nFor example, to apply a border radius to the \"ObjectListItemEquipment\", find the component and assign a unique styleClass name to it.\n\nObjectListItemEquipment styleClass\n\nThen, within the stylesheet of the App Designer you can start writing the CSS to style the component based on the assigned styleClass. \n\nApp Designer stylesheet\n\nActivate, and you notice the border radius has been applied to the “ObjectListItemEquipment”.\n\nObjectListItemEquipment border radius – Note: The rounded edges!\n\n\n\nTo add space between the list items, you can assign the \"styleClassMargin\" property to \"sapUiTinyMargin,\" resulting in a tiny margin being applied to the list items.\n\nstyleClassMargin\n\n\nstyleClassMargin applied\n\n\nNote: It's crucial to utilize the styleClass property and reference it in the stylesheet, rather than using the SAPUI5 component name. This approach helps prevent any CSS leaks when the application is running within a Launchpad.\nTake as an example the “ButtonRefreshEquipment”.\n\n\nButtonRefreshEquipment\n\n\n\nThe button has a styleClass property, but instead you have opted to use the SAPUI5 name of the component (sapMBtn) and reference it within the stylesheet to set a custom “background-color” to the button. \n\n\nStylesheet\n\nUpon activating, the CSS will be applied to all the buttons within the application when running standalone. \n\nCSS applied to all buttons\nSimilarly, when the application runs within a launchpad, upon opening it, all buttons will be affected by the custom CSS applied on the application’s button.\n\nCSS applied to the launchpad’s buttons\nUltimately it is up to you when it comes to styling the application according to your requirements. However, by using the styleClass property you can achieve the desired styling outcomes.\nFeel free to experiment with the application. "
    },
    {
        "chapterName": "Styling Applications, Tiles and Launchpads",
        "lessonTitle": "Advanced Styling Applications, Tiles and Launchpads – Finding styleClasses with the inspector tool",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced Styling Applications, Tiles and Launchpads – Finding styleClasses with the inspector tool\n\nThis document describes how to locate component’s styleClasses within the HTML structure of the application using the inspector tool. \nTo showcase this process, the “1CREATENEWEQUIPMENT” application from the eLearning 2022 Demo package has been used. \nDownload the eLearning 2022 Demo package from the Marketplace and open the “1CREATENEWEQUIPMENT” application in the App Designer. \n\n\n\nThe outcome of this lesson is to round the edges of the input fields from the “1CREATENEWEQUIPMENT” by applying a border-radius. \n\nOutcome\n\n\n\n\nFirstly, a custom styleClass (“roundInput”) needs to be assigned to all the targeted components. In this case: inputName, inputPN, inputLat, inputLong and datePickerCheckup.\n\nCustom styleClass\nNext, in the stylesheet of the App Designer, reference the custom class and apply the border radius.\n\nStylesheet\n\nBut after activating the application, the border radius is not applied to any of the components. That is because of the hierarchy of the elements and classes.\n\nHierarchy of Elements:\nIn HTML, elements are structured in a hierarchical manner, forming a tree-like structure known as the Document Object Model (DOM). This hierarchy represents the parent-child relationships between elements, where some elements are nested within others.\n\nImportance of Multiple Classes:\nWhen styling elements using CSS, it's common to use classes to target specific elements. However, sometimes you may need to target elements more precisely, especially when dealing with elements that share the same class but are nested differently within the DOM hierarchy.\n\nUsing Two Classes:\nBy using two classes in your CSS selectors, you can create more specific rules that target elements based on both their individual class and their position within the DOM hierarchy. This allows you to apply styles to specific combinations of elements.\n\n\n\n\n\n\n\n\n\n\n\nTherefore, open the developer console and select the inspector.\n\nDeveloper console - Inspector\n\nNext, hover over the inputName and select it. In the HTML structure, you can observe the hierarchy of the elements and classes associated with the inputName.\n\n\nHTML hierarchy of the inputName\n\n\n\n\nNotice that the class \"sapMInputBaseContentWrapper\"currently defines a border radius. Therefore, this is the targeted class that needs to be used to apply the border radius to the targeted components within the “1CREATENEWEQUIPMENT” application.\n\nLocating the class\n\nThen, within the stylesheet, target the elements that have both the “roundInput” class and the \"sapMInputBaseContentWrapper\" class (make sure you include a space in between the classes). By doing so, only components assigned the “roundInput” class will be affected, avoiding unintended style changes to other components sharing the \"sapMInputBaseContentWrapper\" class, hence preventing CSS leaks. \n\nStylesheet\n\nFinally, upon activating the application, all the targeted components will have the border radius specified within the stylesheet. \n\nOutcome\n\nFeel free to explore and experiment within the application, attempting to reference other classes within the application structure.\n"
    },
    {
        "chapterName": "Styling Applications, Tiles and Launchpads",
        "lessonTitle": "Advanced Styling Applications, Tiles and Launchpads – Theme Import",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced Styling Applications, Tiles and Launchpads – Theme Import\n\n\n\nThis document describes the Theme Import, it’s functionlality and how to use it.\nTo showcase this, the “eLearning Launchpad” form the eLearning 2022 Demo package has been used.  \n\n\n\nTheme Import\nThe Theme Import allows you to import SAP-custimized themes from the SAP UI Theme Desiner and apply them in Launchpads and in the App Designer. \nYou can follow this step by step guide on how to access and export a theme from the SAP UI Theme Designer: https://community.neptune-software.com/documentation/how-to/documentation/access-sap-theme-designer\n\n\n\n\n\n\n\nNote: When creating a theme in the SAP UI Theme Designer, the UI5 Version of the theme needs to match the UI5 Version of the Launchpad. Open the settings of the launchpad, and uder the “System” tab, you can find the UI5 version of the Launchpad. \n\nUI5 Version of the Launchpad\n\nClick on the version located at the top-right corner of the SAP UI Theme Designer, and select the version that matches the version of the launchpad.\n\nChanging the UI5 version in the SAP UI Theme Designer\n\n\n\n\n\n\n\n\n\nImport the theme \nOnce you have customized your theme, export it from the SAP UI Theme Designer. \n\nSAP UI Theme used in this example\n\nOpen the Theme Import tool, and click “Add” to add a new theme. Before importing, you need to fill in the Name, UI5 Version and UI5 Theme fields. These fields must match the names and version used in the SAP UI Theme Designer theme. \n\nTheme Import general \n\nThen, click the “Import” button and select the exported SAP UI Theme from your device. \n\nSelecting SAP UI Theme from the device\n\n\nOnce imported, the theme can be applied to Launchpads and in the App Designer.\n\nLaunchpad\nOpen the eLearning Launchpad, scroll down to UI5 and under “Theme” you can select the imported theme (“custom_horizon_neptune” in this example).\n\nLaunchpad UI5 Theme\n\n\n\n\n\nSave, and run the launchpad. You notice that the customized SAP UI Theme has been applied to the launchpad.\n\nCustom SAP UI theme applied to the launchpad\n\nAs well as to all the applications running in the launchpad.\n\nCustom SAP UI theme applied to the applications \n\nApp Designer\nTo apply the SAP UI5 theme to an application, open the “Application Settings”, and under the “Properties” tab, select the OpenUI5 version that matches the theme version (1.108.12). Then select the custom theme from the dropdown.  \n\nApply custom theme to an app in the App Designer\n\nSave, activate and run the app in the designer. You notice that the custom theme has been applied to the application.\n\nCustom theme applied \nUsing the Theme Import tool, you can import a customized theme designed according to your brand guidelines using the SAP UI Theme Designer. This theme can be applied to a launchpad, thereby influencing the appearance of all applications running within it, as well as to individual applications.\n"
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "Authentication",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "API Authentication\n\nWhat is API authentication?\nTo begin with, why would you need to authenticate with your API in the first place?  Authentication can be required since it ensures security and access control. It verifies users' identities, preventing unauthorized access and malicious activities.\n\nWhen do I know authentication is required?\nWhen configuring an external API, you'll typically find authentication requirements outlined in the API documentation. Look for instructions specifying the need for an API key, OAuth token, or other authentication method. Sometimes, an API key is placed as a parameter of the URL, or the documentation might outline a different authentication process, such as using headers or request bodies.\nWhat do I do in Open Edition if authentication is required?\nDepending on the API, different steps will be taken in order to add authentication in your API.\nExample 1:\nBelow, is the definition of a weather API that takes an API key in its path.\n\nIf we wanted to use this API then, the API would look like such in the API Designer:\nEndpoint: https://api.openweathermap.org\n\nOperation:\n\nRequest:\n\nSince, we added the parameters in the path of the operation, we are required to check the ‘In Path’ checkbox.\n\nIn this way, when you make the API call, you will just need to pass the necessary values in each parameter.\n\nExample 2:\nIn the example below, an API key is required to be placed in the header of the operation.\n\nIn this case, we have two options.\nDefining a header in the request tab of the operation:\n\n      2.   Defining a proxy authentication with the Proxy Authentication tool:\nFirst, create a new Proxy Authentication and give it a name. Since, we are only required to add a value in the header of the operation, we just leave the ‘type’ as it is and, in the header tab, we add the header as if we were adding in the API Designer.\nFinally, in the API Designer, you can either add the proxy authentication we just defined in the Authentication tab or in the Authentication tab of a specific operation. This will place all the configurations of the proxy authentication in all operations of the API. Alternatively, if we place it in the operation, then it will only affect that specific operation.\nAffects all operations:\n\nAffects specific operation:\n\nDepending on the settings and requirements of an API, various methods might be required for you to access the API. The proxy authentication tool can create the following types of authentication:\nBasic (username, password)\nClient Certificate (where a client presents a certificate to authenticate itself to the server)\nOAuth2\nJWT (JSON Web Token)\nSAP Principal Propagation"
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "APIHeaders",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Headers in a REST API\nHeaders provide additional information about the API request and response. They are used to carry information such as the request method (GET, POST, etc.), the content type of the request payload, authentication information, and other metadata. \nHeaders are included in the HTTP request and response messages, separate from the actual request and response payloads.\nLet’s use the API Client to inspect a HTTP response and explain some of the automatically generated headers:\n\nWhen a server includes the \"Access-Control-Allow-Origin: *\" header in its response, it effectively indicates to the browser that it allows requests from any origin to access the resource.\n“X-Content-Type-Options: nosniff\" is a security header that helps enforce the declared Content-Type and prevents browsers from attempting to guess or interpret the content type based on the response body. For instance, if a server sends a response with a Content-Type of \"text/html\", but the content of the response looks like JavaScript, some browsers might try to interpret it as JavaScript, potentially leading to security vulnerabilities like Cross-Site Scripting (XSS) attacks.\nThe “connection” general header controls whether the network connection stays open after the current transaction finishes. If the value sent is keep-alive, the connection is persistent and not closed, allowing for subsequent requests to the same server to be done.\nWhen do I need to add a header?\nAdding headers to your HTTP requests is essential in various scenarios, especially when interacting with APIs or web services that require authentication, authorization, or specific data formats. \nFor example, let’s say you are configuring an external API, and you are required to include an API key or authentication token in your request headers. Then, you would have to add in the request headers of the operation, the header ‘Authorization’ and the value depending on if it is a token or API key.\nFor example:\n\nYou should exercise caution when modifying HTTP headers and their values, especially those related to standards, security, authentication, and CORS. Always refer to the relevant specifications, standards, and best practices when configuring headers in your applications or APIs to ensure proper functionality and security."
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "queryFunctions",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Query functions (Operators)\nNeptune DXP – Open Edition uses TypeORM, which is an Object-Relational Mapping (ORM) tool used to create a \"bridge\" between object-oriented programs and relational databases. \nFor that reason, tools like the API Client, Script Editor, App Designer, etc., can benefit from the use of operators that can help you perform more complex queries.\nTypeORM is introduced in the Foundation – Script Editor chapter, as scripts can utilise tables as resources. In comparison, the APIs that interact with tables can use some of the same capabilities.\nLink to TypeORM documentation: https://typeorm.io/\nThese functions can be passed as values in the parameters of an API. For example, the following parameter in a GET operation for a table definition API:\n\nwill trigger the following SQL command:\nSELECT * FROM \"entityName\" WHERE \"age\" BETWEEN 30 AND 40\nIn natural language, this means \"fetch all entries from the table where the age is between 30 and 40.\"\n\nList of functions\nThe available operators that can be used are:\nAny\nDefinition: The operator helps comparison against multiple values within a single expression, clarify queries by negating the need for numerous OR conditions.\nInput type: The operator accepts an array of values, where the elements within the array should correspond to the data type of the column being compared.\nExample: In([“John”,”Terry”])\n\n\nBetween\nDefinition: The operator selects values within a given range.\nInput type: The operator accepts numbers, text, or dates.\nExample: Between(20,30)\n\nIn\nDefinition: The operator is used to compare a value against a list of specified values. It simplifies queries by checking if a value matches any value in a specified list.\nInput type: The operator accepts a list of values enclosed within parentheses. These values can be of any compatible data type with the column being compared.\nExample: In([“John”,”Terry”])\n\nIsNull\nDefinition: The operator is used to check if a column contains a NULL value. \nInput type: The operator does not require any input value.\n\nLessThan\nDefinition: The operator is used to compare if a value is less than another value.\nInput type: The operator accepts a single value for comparison, which should be compatible with the data type of the column being compared.\nExample: LessThan(30)\n\nLessThanOrEqual\nDefinition: The operator is used to compare if a value is less or equal than another value.\nInput type: The operator accepts a single value for comparison, which should be compatible with the data type of the column being compared.\nExample: LessThanOrEqual(30)\n\nLike\nDefinition: The operator is used for pattern matching within string columns.\nInput type: The operator accepts a pattern string containing wildcard characters, such as % for matching any sequence of characters and _ for matching any single character.\nExample: Like(“%test%”)\n\nFor more information about other operators please access the following:\nhttps://orkhan.gitbook.io/typeorm/docs/find-options#advanced-options\n\nMore preconfigured examples:\nEqual to a value: { \"fieldName\": \"value\" }\nNot equal to a value: { \"fieldName\": \"Not(value)\" }\nBetween a range of values: { \"fieldName\": \"Between(1,10)\" }\nIn a list of values: { \"fieldName\": \"In([\\\"value1\\\", \\\"value2\\\"])\" }\nLess than a value: { \"fieldName\": \"LessThan(value)\" }\nLess than or equal to a value: { \"fieldName\": \"LessThanOrEqual(value)\" }\nMore than a value: { \"fieldName\": \"MoreThan(value)\" }\nMore than or equal to a value: { \"fieldName\": \"MoreThanOrEqual(value)\" }\nLike a value (pattern matching): { \"fieldName\": \"Like(value)\" }\nAny value (exists): { \"fieldName\": \"Any(value)\" }\nIs null (empty): { \"fieldName\": \"IsNull(value)\" }\nRaw value (direct comparison): { \"fieldName\": \"Raw(value)\" }\n"
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "WhereUsed",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Where-used\n\nWhen you start using your APIs across the platform (within application, scripts etc), you need a way to see where your operations are being used before you apply changes to them. Within the API Designer, you will find in the Where-used tab, where your operations are being consumed."
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "API Roles",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Roles within APIs\nTo restrict access to an API, you can easily assign a role to it. Doing so will deny access (via applications, API Client etc) to the endpoint for users who do not have that role assigned to their user (either directly, or via group association).\nNote: Table type APIs can’t have a role assigned:\n\nInstead you can define the role within the table itself, for read and write access:\n\n\nScript and External type APIs can have the role assigned directly the API definition & operations.\n\nThe steps for adding a role to an API\nTo add a role to an API, begin by creating a role using the Role tool. Then, assign this role to the users who require access to the API. Finally, add the role to the API within the Role tab. This will apply restrictions to all operations of the API.\n\nIf you attempt to query the API without a user with the correct authentication, you will recieve this error in response:\n\"status\": \"No access to resource\",\n\nIf you need to apply restrictions to a specific operation, navigate to the General tab of the operation and select the roles from the dropdown menu. Ensure all necessary roles are added in the Role tab to populate the dropdown. \nThis enables you to specifiy within a larger group of operations, which should be accessible by which role."
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "API Trace",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "API Trace\nWith API Trace tool, you can view and analyse an API’s performance and usage.\n\n\nConfigure the filters to view the data relevant to your use case. The default view ‘Analytic’, however you can swap the the ‘List’ table to see a different view of the records.\nViewing and analysing an API's performance and usage is essential for optimization, ensuring scalability and reliability, managing costs, troubleshooting, and improving the overall user experience.\nTo enable tracking of these metrics, you need to activate \"Enable Trace\" from the General tab in the API's settings. This option allows you to monitor all operations within the API.\n\nIf you only want to track a specific operation, navigate to the General tab of the chosen operation and activate \"Trace Operation\".\n"
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "Endpoints",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "API Designer - Endpoint override (External APIs)\nFor external type APIs, you can override the default endpoint displayed in the General tab within the API Designer to suit your requirements. For instance, you can replace the endpoint based on the system role of the instance where the API is being consumed, or you can override the entire endpoint for a specific operation.\nEndpoint override based on the system role and URL\nSuppose you have configured an API on the instance www.development-neptune.com and deployed this API to multiple Neptune DXP instances, such as www.testing-neptune.com and www.sandbox-neptune.com, using Deployment tools.\nEG: Your external endpoint https://www.my-dev-logic.com/ \nWhen the API Definition is deployed to other systems, the endpoint remains as “my-dev-logic.com” instead of adapting to the corresponding URL of the other system.\nEG: For www.testing-neptune.com you want the endpoint to reflect https://www.my-test-logic.com/ \nThis would require manual endpoint adjustments for each system. \nBy incorporating an additional Role based endpoint configuration, this issue can be avoided. The system will determine the origin of the API trigger and replace the endpoint accordingly, streamlining the process.\nEndpoint tab:\nHere you can see this API definition has a specific endpoint URL set for when the system role is “Local”:\n\nDefault endpoint:\n\nNotes:\nThe appropriate system role must be included in the endpoint. You can find this information in the System Settings of the instance where the API will be consumed.\nThis adjustment will affect all operations within the API. If you prefer to make this change on a per-operation basis, you can add the endpoint within the Endpoint tab of the selected operation.\n\nEndpoint override for any API type, independent to the system URL and role\nSuppose you have configured an API with the endpoint www.weatherAPI.com, and for specific operations, you want to override the default endpoint regardless of the system's URL and role for certain reasons. In such cases, within the selected operation, navigate to the General tab, where you can input an Endpoint Override that will replace the one displayed in the API's General tab.\nHere you can see this operation is overridden with www.new.weatherAPI.com for this endpoint only:\n\nAdditional information about the System Settings - Configuration can be found in the Foundation course, chapter ‘Other Cockpit features’."
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "APIvsConnector",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "APIs vs Connectors\nYou might have noticed that connectors and APIs behave and function similarly. Even though APIs and connectors are both essentially REST APIs, each type is utilized within specific tools. APIs are primarily intended for use within App Designer applications and server scripts, while connectors are designed to function within Adaptive Designer applications. In this lesson, we will highlight the key differences and similarities between these two objects.\nSimilarities:\nThey are both used to manage and interact with your internal and external data sources.\nEssentially, connectors and APIs share the same types (Table Definition, Server Script etc).\nThey are REST APIs.\nDifferences:\nConnectors can be used within both Adaptive and App Designers, whereas APIs are exclusive to the App Designer.\nAPIs are meant to be used within App Designer applications and server scripts whereas connectors are optimized to work within Adaptive Designer applications.\nAn API can be set as 'External' to communicate with endpoints outside of Neptune DXP, whereas a connector would need to be set to API or Server Script or SAP API Factory to communicate with endpoints outside of Neptune DXP.\nAPIs can automatically populate fields through the 'Import' functionality from various items like the API Discovery Service, SAP APIs, Open API 3.0, and Planet 9 File, whereas connectors cannot be imported this way.\nConnectors are simplified APIs.\n"
    },
    {
        "chapterName": "API Designer",
        "lessonTitle": "fetchTrue",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Create entities and retrieve ID via API\nFor table definition type APIs, the /PUT operation will create a new record whereas the /POST will update a record based on the provided parameters, EG: “where” parameter.\nWhen creating a new entry, the /PUT operation will only return the status of the API operation (successful or failed). Sometimes it's useful to obtain information about the newly created entry. \n\nInstead of the developer first creating the new entry and then using the /GET operation to fetch the specific record, you can utilize a /POST operation to create the new entry and receive the ID of that entry as a response in one round trip. This reduces the number of API calls from two to one.\nTo achieve this, use the /POST operation of your table definition API. Provide the required request body similar to a /PUT operation, and include the following parameter:\n“fetch : true”\n\n\n\nThe corresponding code snippet would look like:\nlet apiOptions = {\nparameters: {\nfetch: true\n},\ndata: {\nname: \"\",\nage: \"\",\n// all required fields \n},\n};\napiRestAPI(apiOptions);\n\n\nAn example response for a different table type API, with this “fetch” parameter set to true:\n\n\nYou can retrieve this data within your App Designer API AjaxSuccess event.\nEG:\nxhr.responseJSON.identifiers\n\n\nNote: Remember this only applies to the /POST operation.\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Advanced App Designer - Nested Array ",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "App Designer – Nested data response to enable drop down in a table\n\n\nThis document describes how to use a nested data response to populate a drop down in a table. \nTo illustrate this, a \"Products\" table has been created with four properties: Product, Description, Version, and Quantity. The Version property type has been set to JSON to allow a nested array within it.\n\nProducts Table\nThe products table has been populated with some test data. \n\nProducts table data\n\nBased on the products table, an API has been created, to be used within the application.\n\nProducts API\nImplementation\n\nCreate a new application within the App Designer formed of a Page, a Table, and a RestAPI. \n\nApplication structure\n\nConnect the RestAPI to the GET operation of the products API.\n\nRest API dialog\n\nSet the initLoad of the RestAPI to “online” to trigger the API when the application is initialized and set the API’s response to the Table. \n\nRestAPI configuration\n\nNext, set the Model Source of the Table to the products API definition. \n\nModel Source of the Table\n\nThis will enable the usage of the Wizard. Right-click on the Table, locate the Wizard and select “Insert Fields – Display”.\n\nTable Wizard\n\nFrom the Wizard dialog, select the fields that you want to add to the Table, and press “Create”.\n\nWizard dialog\nNote: If the Version (or the field with the nested array) is not generated, duplicate one of the columns and rename it.\nIn the colTableVersion, delete the text component and replace it with a sap.m.Select component. Within the Select component, drag and drop a sap.ui.core.Item component. \n\ncolTableVersion structure\n\nThen set the Model Path of the Select component to the property with the nested array.\n\nModel Path of the sap.m.Select\n\nFinally, set the sap.ui.core.Item’s text to the desired property within the nested array. In this example is: {version}.\n\nItem’s text property\n\nSave, activate, and the select component within the table is populated with the nested array data.\n\nTable with nested data array populating a sap.m.Select \n\n\nFeel free to experiment with the application!"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "App Designer -  UI5 Framework Knowledge - Key and Value example ",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced eLearning - UI5 Framework Knowledge - Key and Text/Value\n\n\n\nThis document describes the difference between the \"Key\" and \"Text/Value\" concepts within the UI5 Framework. Understanding the difference between these two elements is important for developing SAPUI5 applications effectively. This lesson aims to clarify the roles of Keys and Text/Values, their usage in various UI elements, and best practices for implementing them in UI5 applications.\n\nIn this lesson, the SAMPLE_COMBOBOX application from the UI5 Application Samples package has been used. \n\nDownload the UI5 Application Samples from the Marketplace and open the SAMPLE_ COMBOBOX application in the App Designer. \n\n\n\n\n \nSAMPLE_COMBOBOX application\n\n\n\nIn the SAMPLE_COMBOBOX application, the ComboBox component is used to create a dropdown list of selectable items, wich contains a ListItem used to represent each selectable option. \n\n\n\n\n\nKey Property\n\nThe key property of a sap.ui.core.ListItem serves as the unique identifier for the item, representing its internal value within the ComboBox. You can typically assign a meaningful and unique value to the key property, such as an ID or code (KUNNR –customer number is used in this example), which is then used to programmatically identify the selected item from the ComboBox options.\n\n\n\n\n\n\n\n\n\n\n\nText Property\n\nThe text property of a sap.ui.core.ListItem is the visible text shown to the user in the dropdown list, representing the name or description of the item. When the ComboBox is expanded, each sap.ui.core.ListItem's text property is displayed as an option for the user to select.\nThe additionalText property of a sap.ui.core.ListItem is used to display additional information next to the main text property in the ComboBox dropdown list. This property is optional and can be used to provide additional details about the item, such as status indicators, counts, or secondary information. When set, the additionalText is displayed alongside the text property for each sap.ui.core.ListItem in the ComboBox dropdown.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nEach ListItem includes a key (KUNNR – customer number), text (NAME1 – customer name), and additionalText (LAND1 – country key ). When the ComboBox expands, users see \"SudaTech GmbH - DE\", etc. as selectable options. Selecting \"SudaTech GmbH\" enables the use of the corresponding key (KUNNR) \"T-L64B06\" to identify the selection programmatically.\n\n\n\n\nConclusion\n\nWithin the provided example, the key – customer number, uniquely identifies each item for programmatic use, while the text property displays the customer name, and additionalText offers supplementary details – country key. This combination allows for clear and intuitive selection options in the ComboBox dropdown, enhancing the user experience and providing developers with the option to create dynamic and informative UI elements.\n\nFeel free to experiment within the sample application! "
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Advanced App Designer - Signature Pad",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "App Designer – Signature Pad Building Block\n\n\nThis document explains what a signature pad is, how to use it, and how to implement it into your application.\nThe signature pad building block allows users to input signatures directly onto the screen. It captures and records the signature as an image or base64, which can then be stored or used in various applications.\n\nInstall\nThe signature pad building block can be installed from the DXP Marketplace. Search for “signature pad” and install the Signature Pad building block.\n\n\n\n\n\n\n\n\n\n\n\n\nAdd the Signature Pad to an application\nCreate a new application, right click on the HTML 5 Document and press Building Blocks from the context menu. \n\nRight-click context menu\n\nFrom the Building Blocks dialog, select the Signature Pad and press “Select”. You can also preview and interact with the building block within the dialog.\n\nBuilding Blocks dialog\n\nOnce the Signature Pad building block is selected, all the components of the building block are available within the component tree.\n\nSignature Pad components\n\nOpen the “Librarytoinclude” file and you will find guidance on how to include the signature pad library.\n\nLibrarytoinclude file\n\nOnce this step is completed, you can save, activate, and run the app in the Designer. \n\nSignature Pad structure\nThe Signature Pad building block consists of: \nA start button – used to initialize the signature pad, creating the signature pad canvas, and setting the visibility to true for the \"Transform in Image\", \"Reset\" buttons and “IconTabBar\".\n\n\nStart button – press event\nA transform in image button – used to convert the signature to an image. \n\nTransform in Image button – press event\n\nA reset button – used to clear the signature pad.\n\nReset button – press event\n\nAn IconTabBar containing two TabFilters:\nTabSignIt – used to capture the signature.\n\ntabSignIt structure\nTabSign – used to display the signature as an image.\n\ntabSign structure\nHow it works\nPress the \"Start\" button to input your signature within the first tab. Use the \"Transform in Image\" button to convert the signature, and within the second tab, you can preview the signature as an image. Press the \"Reset\" button to clear the signature pad and sign again.\n\nSignature Pad demo\n\n\nThe Signature Pad building block has also been used in the “3FIELDWORKERINSPECT” application, from the eLearning 2022 Demo package. \n\n\nInstall the “eLearning 2022 Demo” from the DXP Marketplace and run the eLearning launchpad.\nUnder the “Header” tab of the launchpad you notice the script tag is there among other libraries used. \n\neLearning launchpad’s header\n\nThe script tag in the application's header initializes the Signature Pad library when the app runs standalone. Similarly, the script tag in the launchpad's header initializes Signature Pad library when the app is running within a launchpad.\nIn the Inspection Portal, choose an inspection, and navigate to the Signature tab where you'll find the Signature Pad building block in use. In this scenario, the Signature Pad is used to capture the signature of the worker who conducted the inspection on the assigned equipment.\n\nInspection Portal – 3FIELDWORKERINSPECT application\nFeel free to experiment with the Signature Pad building block within the newly created application or within the “3FIELDWORKERINSPECT” application."
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "ADVANCED App-Designer -Layout Boxes revision",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Layout Boxes – Revision\n\n\njustifyContent - Inherit\n\nTo illustrate the concept of justifyContent set to inherit, consider a simple example with an HBox (parent) and two VBoxes (child). \nThe HBox's justifyContent property is set to center, and the justifyContent property of the VBoxes is set to inherit. As a result, the VBoxes inherit the justifyContent setting from the HBox, causing their content to be vertically centered. However, in this scenario, VBoxChild1 contains two GenericTiles, while VBoxChild2 contains only one. This means the GenericTile in VBoxChild2 will be vertically centered, whereas the content of VBoxChild1 will remain unchanged since the components take the full height of the VboxChild1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrenderType difference: Div, List and Bare \n\nThe renderType property in an HBox and VBox context is used to define how the layout boxes should be rendered in the UI. The difference between the types is as follows:\n\nDiv:\n\nRender Type: \"Div\" is the default render type for Layout Box components.\nUsage: When \"renderType\" is set to \"Div\", each component within the Layout Box is wrapped in a <div> element.\nVisual Effect: This adds extra <div> elements around each component, which can introduce some default padding, margin, or other styling depending on the CSS.\n\nList:\n\nRender Type: \"List\" render type wraps each component in a <li> (list item) element.\nUsage: Setting \"renderType\" to \"List\" means each component will be rendered as a list item.\nVisual Effect: This can be useful for creating list-like structures, similar to an unordered list (<ul>), where each component is treated as a separate item in the list.\n\nBare:\n\nRender Type: \"Bare\" render type removes the wrapping <div> or <li> elements.\nUsage: When \"renderType\" is set to \"Bare\", components are rendered without any additional <div> or <li> elements.\nVisual Effect: This means components are rendered directly without extra spacing or styling from the wrapping elements. It gives more control over the exact spacing and styling of the components within the Layout Box.\n\nBoxes are Divs!\n\nIf you have a look at this code playground, you can see that the HBox and VBox's are just HTML components!\nhttps://codepen.io/enxaneta/full/adLPwv/\n\nIn this case, a FlexContainer is the same as the FlexBox UI5 component – which is essentially either a HBox or VBox depending on its configuration.\n\nYou can play with all the properties of this box, to understand the effect it has on the items within."
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Advanced App Designer - Formatters",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "App Designer – Formatters - Shape the data in your components\n\n\nThis document describes how to use the formatters to shape the data in your application.\n\nTo showcase the usage of formatters, the “2VIEWANDEDITEQUIPMENT” and “3FIELDWORKERINSPECT” applications from the eLearning 2022 Demo package have been used. \n\nDownload the eLearning 2022 Demo from the Marketplace and open the “2VIEWANDEDITEQUIPMENT” and “3FIELDWORKERINSPECT” applications in the App Designer. \n\n\n\nFormatters\n\nFormatters are used to manipulate data and format it for display in UI controls. They are functions that take a value as input, perform some processing on that value, and return a new value. Formatters are commonly used in binding expressions to transform model data into a format that is suitable for rendering in the UI.\n\nOnce a property is bound to a data source, the associated formatter for that property becomes available. In the figure below, the icon property of the “tabSubmitted” from the “3FIELDWORKERINSPECT”  application is bound to the \"inspection_status\" field, enabling the use of the formatter.\n\n3FIELDWORKERINSPECT application\n\nWithin the formatter, the icon and color are adjusted according to the inspection status. For instance, if the inspection status is \"Submitted\", the icon is set to \"sap-icon://pending\" and the icon color is set to \"Critical\". \n\n\nIcon formatter logic\n\n\nThis visually highlights that the inspection item has been submitted.\n\n\nThe same applies for the highlight property of the “ObjectListItemEquipment” from the “2VIEWANDEDITEQUIPMENT” application. The highlight property is bound to “days_until_check”, and the formatter can be used to highlight the item in a specific color based on the bound data. \n\n2VIEWANDEDITEQUIPMENT application\n\nWithin the formatter, the “ObjectListItemEquipment” is highlighted in red (Error) if the days until check is less than 1, indicating that the equipment is overdue for inspection, and in green (Success) if the equipment is due for inspection in more than 1 day.\n\n\nFormatter logic\n\nThis visually highlights which equipment is due or overdue for inspection.\n\n2VIEWANDEDITEQUIPMENT application\nSome of the commom uses of formatters are:\n\nFormatting Dates and Times: Formatters can convert date and time values from the model into a specific format that is easier to read and understand for users.\n\nNumber Formatting: They are used to format numbers, such as currency values or decimal numbers, into a desired format with specific precision, separators, and symbols.\n\nBoolean to Text Conversion: Formatters can convert boolean values (true/false) to text values, such as \"Yes\" or \"No\", \"Active\" or \"Inactive\", etc.\n\nCustom Text Formatting: They can be used to create custom text based on certain conditions in the model data. For example, showing \"High Priority\" for items with a priority value of 1, \"Medium Priority\" for 2, and so on.\n\nIcon Formatting: Formatters can determine which icon to display based on certain conditions in the model data. For instance, showing a green checkmark icon for success and a red warning icon for errors.\n\n\nThe best way to understand the capabilities of the formatters is to experiment with them, therefore, feel free to practice within the presented applications.\n"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Advanced App Designer - sap.n namespace",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced App Designer – sap.n namespace\n\n\nThis document describes the “sap.n” namespace and how to use it. \n“sap.n” is an internal Neptune namespace that developers often use within applications to check if the application is running within the context of a launchpad. This allows to write code that behaves differently depending on whether the application is standalone or running within a launchpad environment.\nWhen coding launchpad-specific functionality, always check first if the sap.n namespace is available to prevent errors when apps are running standalone.\n\nLaunchpad specific code\n\nFor example, in the app “3FIELDWORKERINSPECT” from the eLearning 2022 Demo package, the “sap.n” namespace is used to append the localViewID to the Leaflet map container.\n\nsap.n example\nThis code is checking whether the “sap.n” namespace is available. If it is, it creates a reference variable by appending localViewID + \"--jobLocationMap\". If “sap.n” is not available, it simply sets reference to \"jobLocationMap\". This logic is used when applications need to handle differences between running in standalone versus within a launchpad environment. The reference variable is then used as the target container for the Leaflet map initialization.\n\n\nIn addition, “sap.n” can also be used in combination with the AppCache to leverage additional data and functionalities that applications can benefit from when running within a launchpad environment (e.g.: AppCache.userInfo). Further details on the AppCache can be found in the eLearning Expert course.\n\nSap.n and AppCache example\n\nFeel free to experiment within the application!"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Advanced App Designer - LocalViewID explainer - Apps running in a Launchpad",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced App Designer - LocalViewID explainer - Apps running in a Launchpad\n\nThe application used in this example is the “3FIELDWORKERINSPECT” application, from the eLearning 2022 Demo package.  \n \n \nInstall the “eLearning 2022 Demo” from the DXP Marketplace and run the eLearning launchpad. \n\nObserve the application when running the app in standalone, via the Run button:\n\nWhen you inspect an element, you can see the name of the component:\n\nNow open the Launchpad:\n\n\nAnd observe the same component:\n\n\nHere you can see “__jsview0—” is appended to the component name.\nThis number increments by 1 each time you open another application. This prevents duplicate component names across applications, causing issues. It is important to consider when referencing components via the DOM.\nThere is a code snippet in the Marketplace to allow you get the current localViewID:\n\n\nif (sap.n) {\nvar localViewID = this.getId();\nconsole.log(\"localViewID:\")\nconsole.log(localViewID)\nvar reference = (localViewID + '--oVBox');\n} else {\nvar reference = ('oVBox');\n}"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Advanced App Designer - Debugging using breakpoints and developer console.",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "App Designer – Debugging using the developer tools\n\n\n\n\nThis document describes how to debug applications using breakpoints and developer tools.\n\nTo showcase the usage of formatters, the “3FIELDWORKERINSPECT” application from the eLearning 2022 Demo package has been used. \n\nDownload the eLearning 2022 Demo from the Marketplace and open the “3FIELDWORKERINSPECT” application in the App Designer. \n\n\n\nWhat are debuggers?\n\nDebuggers are software tools that enable developers to examine, analyze, and debug their code during development. They provide a range of functionalities to assist in the debugging process, including:\n\nBreakpoints: Developers can set breakpoints in their code, which pause execution at specific lines. This allows them to inspect the program's state at that point.\nStep-through Execution: Debuggers let developers execute code line-by-line, stepping into functions (going deeper into the code), stepping over (skipping) functions, or stepping out (exiting the current function).\nInspect Variables: Developers can view the current values of variables at any point in the code execution, helping to identify incorrect or unexpected values.\nError Analysis: Debuggers often provide detailed information about runtime errors, making it easier to pinpoint the cause of an issue.\n\n\n\nDebugging a function \n\nFor example, the populateInspectionJobPage() function sets data to the page model, selects the \"COMM\" tab, checks and builds a map if not existing, updates it if already rendered, and creates a Leaflet map with equipment coordinates, with two debuggers added for checks.\n\n\n\n3FIELDWORKERINSPECT application\n\n\n\nWhen the app is running standalone or in a launchpad and the developer console is open, attempting to open an inspection item from the list will pause execution at the debugger point within the function.\nYou can utilize the step button to move through each line of code or the play button to resume the function's execution without interruption, bypassing any other encountered debuggers.\n\nDeveloper console debugger\n\n\n\nIn the debugger tab of the developer console, you have the ability to inspect the function's values step-by-step as it executes. This allows for a detailed examination of the function, aiding in the identification of potential logic errors or unexpected behavior.\n\n\n\n\n\nConclusion\n\nDebuggers are important tools that enable developers to efficiently identify and resolve bugs, gain insights into code behavior, and enhance the overall quality of their application’s logic."
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Advanced App Designer - Code snippets overview & onInit event",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced App Designer – Code Snippets Overview & onInit event\n\n\nCode Snippets\n\nCode snippets are small sections of reusable code that can be inserted into a larger codebase. They are used to save time and effort by providing pre-written code for common tasks or functionalities. Code snippets are particularly useful for repetitive or complex code patterns that are used frequently.\n\nCode snippets can be accessed from the App Designer, as well as from the Script Editor, from the right-click context menu. \n\nRight-click context menu\n\n\n\n\n\n\n\n\n\n\n\nIn the Code Snippets dialog, you'll discover useful snippets for JavaScript, OpenUI5, and PhoneGap. If you need custom code snippets for your development, you can create them using the Code Snippets tool, and they will be available under the Custom menu.\n\nCode Snippets tool\n\nCode Snippets dialog\n\nWhen working with APIs in your application, the code snippets dialog will provide you with options that include parameters and the API call itself.\n\nAPI Code Snippet\nonInit Event\n\nThe onInit event purpose is to perform actions when the SAPUI5 framework is fully initialized. This is a crucial point in the application lifecycle where you can start setting up your UI, data models, and any other configurations needed for your application to function properly. \nThe onInit event can be found in the resources of the App Designer. Drag and drop it in the resources of your application, and the logic within the onInit event will be the first one to be triggered when the application is initialized. \n\nonInit event\nOpen the Code Snippets, search for “onInit”, and you can find the onInit code snippet. \n\nonInit code snippet\n\nThis code sets up an initialization function that runs when the SAPUI5 core is ready. It allows you to perform initial setup tasks, potentially using any start parameters, and handle delayed tasks with the setTimeout function.\nFor example, the onInit code snippet is used within the “JavascriptCamera” file of the “3FILEDWORKERINSPECT” application, from the eLearning 2022 Demo package. \n\nJavascriptCamera file\nThis code is attaching an event listener to the initialization of the SAPUI5 core, so when the core is initialized, it executes a function. The function sets the content of an HTML object (oHTMLObjectCameraUpload) to an input element of type file with specific attributes, essentially creating a hidden file input field that accepts only image files.\n\n3FILEDWORKERINSPECT application\n\n\nFeel free to experiment within the application!"
    },
    {
        "chapterName": "App Designer",
        "lessonTitle": "Advanced App Designer - Translation",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Advanced App Designer – Translation\n\n\nThis document describes the translation capabilities of the App Designer. \nTo showcase this, the “1CREATENEWEQUIPMENT” application and “eLearning” launchpad, from the eLearning 2022 Demo package have been used. \nDownload the eLearning 2022 Demo package and open the “1CREATENEWEQUIPMENT” application in the App Designer. \n\n\nLanguage translation\n\nOn the left side bar menu of the App Designer, you can find the “Language translation” tab. \n\nLanguage translation\n\nIn language translation, you can translate text elements within an application's user interface. This feature is valuable in scenarios where users of the application speak different languages. \n \n\n\nYou can translate objects in four ways: \nUtilizing the Google Translate API – the API Key needs to be added in the Custom Settings. \n\nCustom Settings – Google API Key\n\nSelect the desired language, then choose the elements you wish to translate, and finally, click on \"Google Translate\". This action will translate the selected elements into the chosen language.\n\n\nGoogle Translate\n\n\nCustom Translation – Select the language, then choose the elements you wish to translate, then enter your custom translations in the “Translation” column. \n\nCustom Translation\n\n\nNaia Translate - Select the desired language, then choose the elements you wish to translate, and finally, click on \"Naia Translate\". This action will translate the selected elements into the chosen language.\n\n\nNaia Translate\n\nImport from file - You can import a CSV file with all the translated object for a given language. The structure must look like this:\n\nExample of translation file\n\nAfter translating the application elements, save and activate the app. Then, navigate to the launchpad (“eLearning”) where the application is hosted. In the \"Customization\" tab, locate the “Translation” section and choose the language to which the elements have been translated. Save the changes, and run the launchpad. \n\nLaunchpad translation section\nAccess the user menu located at the top-right corner of the screen, then navigate to settings. Within the settings menu, select the language from the dropdown options and confirm your selection by clicking “OK”.\n\nLaunchpad language selection\n\nFollowing the language selection in the settings, the page will refresh automatically, and all elements of the application will be translated into the chosen language.\n\nTranslated application\nNote: Translations for Tile and Tile groups within the Launchpad, the Translation tool needs to be utilised in a similar process:\n"
    },
    {
        "chapterName": "Email",
        "lessonTitle": "SMTP Setup",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "How to setup an SMTP connection\nPrerequisites\nTo utilize all email capabilities, you must have an SMTP server to establish a connection between Neptune DXP – Open Edition and your server. If you do not possess one, there are various providers available for you to choose from.\n\nSteps\nIn the System Settings tool, navigate to the Emailing tab.\nIn Provider, choose your provider or select Custom.\nEnter the SMTP Host for example, smtp.sendgrid.net.\nEnter the Port and, enable the following depending on your SMTP requirements:\nUse pool.\nSecure (only for port 465).\nAllow self-signed certificates. \nEnter the email address from which you want your emails to be sent.\nChoose your Authentication. You can either authenticate with your username and password or with OpenID Connect.\nSave\nFinally, test the connection.\n\nIMPORTANT: Make sure to click Restart in the System Settings after you enter your SMTP information to apply the changes you made on the server.\n.\t\t\t\t\n\nIf no errors occurred, you should see the following message:\n\nOtherwise, an error message will be displayed. To troubleshoot, navigate to the System Logs and locate the corresponding log files under the 'System' category. Open these files to identify and understand the issue.\n"
    },
    {
        "chapterName": "Email",
        "lessonTitle": "Sending emails from apps",
        "sourceUrl": "",
        "sourceType": "PDF",
        "content": "Sending emails from applications\n\nThe DXP Marketplace offers products to streamline processes and save time for developers. Instead of developing a script to send emails and an API to trigger that script, you can download the Simplify Email Sending product from the Marketplace, to utilise a pre-configured framework.\n\nPrerequisites\nYou must have an SMTP connection configured in the System Settings.\n\nSteps\nDownload the ‘Simplify Email Sending ‘product from the DXP Marketplace.\n\nCreate an application in the App Designer and, drop a RestAPI component in your Resources.\nSelect the API that came with the development package.\nIn a JavaScript file, right click and select code snippets. Select the API code snippet associated with the product’s API.\n\nEnsure to read the product's description and the API's settings to understand the necessary fields required for the operation to function properly.\n\nNote that this API calls the included server script, which calls the await sendEmail() function with the data passed via the API."
    }
]